abstract lock (p: perm)
fact duplicable (lock p)

(* A lock is currently implemented as a mutable Boolean block.
   Of course, this implementation is safe only in a sequential
   setting, and will have to be modified if/when Mezzo receives
   a concurrent execution scheme. *)

(* Encoding the invariant that [p] is available when the lock
   is free is of course non-essential, but allows saving a few
   type casts. *)

data mutable private_lock (p : perm) =
 | Free {| p }
 | Taken

(* Defining [locked] as a synonym for [Taken] is again non-essential
   and allows saving a few type casts. *)

alias locked =
    Taken

(* Creation. *)

val new_locked [p: perm] () : (l: lock p | l @ locked) = 
  let l : private_lock p = Taken in
  (* This unsafe type cast causes the desired permissions to appear. *)
  magic::magic l

(* To acquire a lock, we check that it is currently [Free], and
   change it to [Taken]. *)

val try_acquire [p: perm] (l: lock p) : rich_bool empty (p * l @ locked) =
  (* This unsafe type cast causes the permission [l @ private_lock p] to appear. *)
  let () : (| l @ private_lock p) = magic::magic () in
  (* This allows us to inspect the lock. *)
  match l with
  | Free ->
      tag of l <- Taken;
      True
  | Taken ->
      False
  end

val acquire [p: perm] (l: lock p) : (| p * l @ locked) =
  if not (try_acquire l) then fail

val release [p: perm] (l: lock p | consumes (p * l @ locked)) : () =
  (* The lock is known to be [Taken]. Change its tag back to [Free]. *)
  tag of l <- Free

(* [new] could be implemented directly. For extra safety, we prefer to
   implement it as the composition of [new_locked] and [release]. *)

val new [p: perm] (| consumes p) : lock p =
  let l : lock p = new_locked () in
  release l;
  l

(* [borrow] is a well-parenthesized [acquire/release] pair. *)

val borrow [p: perm, q: perm, b] (
  l: lock p,
  f: (| p * consumes q) -> b
| consumes q
) : b =
  acquire l;
  (* We could pass [l @ locked] to [f], but we don't, so [f] cannot
     release the lock, either intentionally or by mistake. *)
  let x = f() in
  release l;
  x

(*
Local Variables:
compile-command: "../mezzo lock.mz"
End:
*)
