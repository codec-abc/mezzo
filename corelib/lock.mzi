(* A lock protects a permission [p], which usually is not duplicable.
   The lock itself is duplicable, so multiple threads may simultaneously
   attempt to acquire it. *)

abstract lock (p: perm)
fact duplicable (lock p)

(* The permission [l @ locked], where [l] is a lock, is a witness that the
   lock [l] is held. This permission is not duplicable. This allows
   the type system to prevent calling [release l] unless the lock [l]
   is held. *)

abstract locked

(* Creation. *)

(* The invariant [p] is fixed at creation time. *)

(* When the lock is created, it is available; for this reason, [new]
   consumes the permission [p]. *)

val new: [p: perm] (| consumes p) -> lock p

(* This variant of [new] creates a lock that is initially held. In theory, it
   is more expressive: one can recover [new] as the sequential composition of
   [new_locked] and [release], whereas one cannot recover [new_locked] as a
   the sequential composition of [new] and [acquire]. Indeed, [new_locked]
   offers extra flexibility: it allows creating a lock of type [lock p] even
   if one does not (yet) have the permission [p] at hand. The lock can be
   shared immediately and can be used as a kind of promise that eventually [p]
   will be available. *)

val new_locked: [p: perm] () -> (l: lock p | l @ locked)

(* Acquisition. *)

val acquire:     [p: perm] (l: lock p) -> (| p * l @ locked)
val try_acquire: [p: perm] (l: lock p) -> rich_bool empty (p * l @ locked)

(* Release. *)

val release: [p: perm] (l: lock p | consumes (p * l @ locked)) -> ()

(* A well-balanced acquire/release pair. *)

val borrow: [p: perm, q: perm, b] (
  l: lock p,
  f: (| p * consumes q) -> b
| consumes q
) -> b

