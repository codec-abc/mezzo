(* Nesting requires no runtime support; its implementation is trivial. *)

abstract nests (x : value) (p : perm) : perm
fact duplicable (nests x p)

val nest [p : perm, a] exclusive a => (x: a | consumes p) : (| nests x p) =
  magic::magic ()

abstract punched (a : type) (p : perm) : type

val focus [p : perm, a] exclusive a => (consumes x: a | nests x p) : (| x @ punched a p * p) =
  magic::magic ()

val defocus [p : perm, a] (consumes (x: punched a p | p)) : (| x @ a) =
  magic::magic ()

val nest_punched [p : perm, a, q : perm] (x: punched a q | consumes p) : (| nests x p) =
  magic::magic ()

(* TEMPORARY we really need a type abbreviation for the type:
   y: unknown | nests x (y @ a)
   which represents a region inhabitant *)

(* TEMPORARY it is not very elegant to have both [nest] and [nest_punched].
   A more general approach, allowing multi-focusing, would be more elegant,
   but would need to be built into the system at a more primitive level. *)

