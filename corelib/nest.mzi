(* Boyland's nesting is available in Mezzo, thanks to the following primitive
   types and operations. *)

(* A nesting witness, [nests x p], is a duplicable permission, which guarantees
   that an exclusive permission for [x] implies the permission [p]. Because
   nesting is monotonic (it cannot be undone), a nesting witness is duplicable. *)

abstract nests (x : value) (p : perm) : perm
fact duplicable (nests x p)

(* Nesting consumes the permission [p] and produces a nesting witness [nests x p].
   The instruction [nest [x, p] ()] is somewhat analogous to an adoption
   instruction, [give p to x]. The permission [p] becomes implicitly associated
   with the address [x]. *)

val nest: [x : value, p : perm, a] exclusive a => (| x @ a * consumes p) -> (| nests x p)

(* A punched type [punched a p] is used to keep track of the fact that a nested
   permission [p] has been temporarily recovered by focusing on [x]. This type
   is not duplicable. It cannot be considered exclusive either; this prevents
   double focusing. *)

abstract punched (a : type) (p : perm) : type

(* Focusing allows temporarily recovering a permission [p] that was nested in [x].
   It requires an exclusive permission for [x], as well a nesting witness. It
   produces a punched permission for [x]. The syntax is [focus [x, p] ()]. *)

val focus: [x : value, p : perm, a] exclusive a => (| consumes x @ a * nests x p) -> (| x @ punched a p * p)

(* Defocusing is the reverse operation. The syntax is [defocus [x] ()]. *)

val defocus: [x : value, p : perm, a] (| consumes (x @ punched a p * p)) -> (| x @ a)

(* Nesting is permitted also while a region is punched. *)

val nest_punched: [x : value, p : perm, a, q : perm] (| x @ punched a q * consumes p) -> (| nests x p)

(* [consult] is a short-hand for a well-parenthesized use of [focus] and [defocus].
   Its type is quite heavy, due to the higher-order pattern used here. *)

val consult: [x : value, p : perm, a, pre : perm, b] exclusive a => (
  f: (| p * consumes pre) -> b
| x @ a * nests x p * 
  consumes pre
) -> b

(*
Local Variables:
compile-command: "../mezzo nest.mz"
End:
*)
