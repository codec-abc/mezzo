(* This module is used by the [hashtable] module, but could also be useful
   per se. It offers mutable lists of key-value pairs. *)

(* -------------------------------------------------------------------------- *)

(* A bucket is a mutable list of entries. Each entry holds a key and a value. *)

data bucket k a =
  | BNil
  | mutable BCons { key: k; value_: a; tail: bucket k a }

(* -------------------------------------------------------------------------- *)

(* Search. *)

val rec mem [k, a] (
  equal: (k, k) -> bool,
  x: k,
  b: bucket k a
) : bool =
  match b with
  | BNil ->
      false
  | BCons { key; tail } ->
      equal (x, key) || mem (equal, x, tail)
  end

val rec assoc [k, a, p : perm] duplicable a => (
  equal: (k, k | p) -> bool,
  x: k,
  b: bucket k a
  | p
) : option a =
  match b with
  | BNil ->
      none
  | BCons { key; value_; tail } ->
      if equal (x, key) then some value_ else assoc (equal, x, tail)
  end

val rec assoc_all [k, a, p : perm] duplicable a => (
  equal: (k, k | p) -> bool,
  x: k,
  b: bucket k a
  | p
) : list::list a =
  match b with
  | BNil ->
      list::nil
  | BCons { key; value_; tail } ->
      if equal (x, key) then list::cons (value_, assoc_all (equal, x, tail)) else assoc_all (equal, x, tail)
  end

(* -------------------------------------------------------------------------- *)

(* Removal of a cell. *)

(* [remove (b, ok)] looks for the first cell whose key satisfies the predicate
   [ok] and (if it finds one) removes it. It returns a pair of the new list
   head and the value that was found, if one was found. *)

val remove [k, a, p : perm] (
  consumes b: bucket k a,
  ok: (k | p) -> bool
  | p
) : (bucket k a, option a) =

  (* Write a loop that works over two consecutive cells. We work under the
     assumption that [prev] does not satisfy [ok], so it remains the list
     head after the removal. The loop returns the value that was found, if
     one was found. *)
  let rec loop (
    consumes prev: BCons { key: k; value_: a; tail = this },
    consumes this: bucket k a
  | p) : (option a | prev @ bucket k a) =
    match this with
    | BNil ->
        none
    | BCons { key; value_ } ->
        if ok key then begin
         prev.tail <- this.tail;
         some value_
       end
       else
         loop (this, this.tail)
    end
  in

  match b with
  | BNil ->
      (* If the list is empty, return it. *)
      b, none
  | BCons { key; value_ } ->
      if ok key then
       (* If the first cell matches, return the list tail. *)
       b.tail, some value_
      else
       (* Otherwise, enter the above loop, and return the list head. *)
       b, loop (b, b.tail)
  end

(* -------------------------------------------------------------------------- *)

(* The following two functions serve in the definition of [update] below. *)

(* Optional insertion. *)

val insert [k, a] (
  consumes x: k,
  consumes ov: option a,
  consumes b: bucket k a
) : bucket k a =
  (* There is a merge warning here; this is because we're actually merging [ov]
   * into [option unknown]. Indeed, we first perform a subtraction (when the
   * context provides a type annotation), and then we try to merge the remaining
   * pieces. This allows the user to provide partial hints for merge situations.
   * *)
  match ov with
  | None ->
      b
  | Some { contents = v } ->
      BCons { key = x; value_ = v; tail = b }
  end

(* Update or removal of the list head. *)

val update_or_remove [k, a] (
  consumes b: BCons { key: k; value_: unknown; tail: bucket k a },
  consumes ov: option a
) : bucket k a =
  match ov with
  | None ->
      b.tail
  | Some { contents = v } ->
      b.value_ <- v;
      b
  end

(* -------------------------------------------------------------------------- *)

(* Update. *)

(* [update (equal, b, x, f)] looks for an entry whose key is [equal] to [x]
   in the bucket [b]. It calls the user-supplied function [f] exactly once,
   and passes it either the value [v] that is associated with the key [x],
   or nothing, if the key [x] does not appear in the bucket. The function
   [f] returns either a new value, or nothing. In the former case, the new
   value replaces the value [v]. In the latter case, the key [x] is removed
   (if it was there at all). An updated bucket is returned. *)

val update [k, a, pre : perm, post : perm] (
  equal: (k, k) -> bool,
  consumes b: bucket k a,
  consumes x: k,
  f: (consumes (option a | pre)) -> (option a | post)
  | consumes pre
) : (bucket k a | post) =

  (* Write a loop that works over two consecutive cells. We work under the
     assumption that [prev] does not satisfy [ok], so it remains the list
     head after the loop. *)
  let rec loop (
    consumes prev: BCons { key: k; value_: a; tail = this },
    consumes this: bucket k a
  | consumes x @ k * consumes pre
  ) : (| prev @ bucket k a | post) =
    match this with
    | BNil ->
        (* The desired key was not found. Invoke [f] with argument [none]. *)
        prev.tail <- insert (x, f none, this)
    | BCons { key; value_ } ->
        if equal (x, key) then
         (* The desired key was found. Invoke [f] with argument [some value]. *)
         prev.tail <- update_or_remove (this, f (some value_))
       else
         loop (this, this.tail)
    end
  in

  match b with
  | BNil ->
      (* The desired key was not found. Invoke [f] with argument [none]. *)
      insert (x, f none, b)
  | BCons { key; value_ } ->
      if equal (x, key) then
       (* The desired key was found. Invoke [f] with argument [some value]. *)
       update_or_remove (b, f (some value_))
      else begin
       (* Otherwise, enter the above loop. The list head does not change. *)
       loop (b, b.tail);
       b
      end
  end

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

(* Non-destructive iteration over the elements of a bucket. *)

(* For simplicity, we assign [fold] a type that does not allow performing
   a strong update on the keys or values. A more general type exists. *)

val rec fold [k, a, b] (
  this: bucket k a,
  consumes accu: b,
  f: (k, a, consumes b) -> b
) : b =
  match this with
  | BNil ->
      accu
  | BCons { key; value_; tail } ->
      fold (tail, f (key, value_, accu), f)
  end

(* -------------------------------------------------------------------------- *)

(* Destructive iteration over the cells of a bucket. Each cell is presented in
   turn to the function [f]. Note that the cells that are presented to [f] are
   detached, i.e., their [tail] field is garbage. *)

val rec iter_bucket_down [k, a, p : perm] (
  consumes b: bucket k a,
  f: (consumes b: BCons { key: k; value_: a; tail: unknown } | p) -> ()
  | p
) : () =
  match b with
  | BNil ->
      ()
  | BCons ->
      (* Iteration from the end down to the beginning of the list. *)
      iter_bucket_down (b.tail, f);
      f b
  end

(* -------------------------------------------------------------------------- *)

(* Length. *)

val length [k, a] (b: bucket k a) : int =
  let rec loop (b: bucket k a, accu: int) : int =
    match b with
    | BNil ->
       accu
    | BCons ->
       loop (b.tail, accu + 1)
    end
  in
  loop (b, 0)

(*
Local Variables:
compile-command: "../mezzo bucket.mz"
End:
*)
