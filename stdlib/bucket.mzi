(* This module is used by the [hashtable] module, but could also be useful
   per se. It offers mutable lists of key-value pairs. *)

(* -------------------------------------------------------------------------- *)

(* A bucket is a mutable list of entries. Each entry holds a key and a value. *)

data bucket k a =
  | BNil
  | mutable BCons { key: k; value_: a; tail: bucket k a }

(* -------------------------------------------------------------------------- *)

(* Search. *)

val mem : [k, a] (
  equal: (k, k) -> bool,
  x: k,
  b: bucket k a
) -> bool

val assoc: [k, a, p : perm] duplicable a => (
  equal: (k, k | p) -> bool,
  x: k,
  b: bucket k a
  | p
) -> option a

val assoc_all: [k, a, p : perm] duplicable a => (
  equal: (k, k | p) -> bool,
  x: k,
  b: bucket k a
  | p
) -> list::list a

(* -------------------------------------------------------------------------- *)

(* Removal and update. *)

(* [remove (b, ok)] looks for the first cell whose key satisfies the predicate
   [ok] and (if it finds one) removes it. It returns a pair of the new list
   head and the value that was found, if one was found. *)

val remove : [k, a, p : perm] (
  consumes b: bucket k a,
  ok: (k | p) -> bool
  | p
) -> (bucket k a, option a)

(* [update (equal, b, x, f)] looks for an entry whose key is [equal] to [x]
   in the bucket [b]. It calls the user-supplied function [f] exactly once,
   and passes it either the value [v] that is associated with the key [x],
   or nothing, if the key [x] does not appear in the bucket. The function
   [f] returns either a new value, or nothing. In the former case, the new
   value replaces the value [v]. In the latter case, the key [x] is removed
   (if it was there at all). An updated bucket is returned. *)

val update : [k, a, pre : perm, post : perm] (
  equal: (k, k) -> bool,
  consumes b: bucket k a,
  consumes x: k,
  f: (consumes (option a | pre)) -> (option a | post)
  | consumes pre
) -> (bucket k a | post)

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

(* Non-destructive iteration over the elements of a bucket. *)

val fold : [k, a, b] (
  bucket k a,
  consumes b,
  f: (k, a, consumes b) -> b
) -> b

(* Destructive iteration over the cells of a bucket. Each cell is presented in
   turn to the function [f]. Note that the cells that are presented to [f] are
   detached, i.e., their [tail] field is garbage. *)

val iter_bucket_down : [k, a, p : perm] (
  consumes b: bucket k a,
  f: (consumes b: BCons { key: k; value_: a; tail: unknown } | p) -> ()
  | p
) -> ()

(* -------------------------------------------------------------------------- *)

(* Length. *)

val length: [k, a] bucket k a -> int

