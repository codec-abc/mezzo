open list

(* -------------------------------------------------------------------------- *)

(* Properties. *)

(* The following record type can be understood as a parameterized module
   signature. The parameter [property] is the type of properties, and the
   fields are the operations on properties that we need. *)

data properties property =
  Properties {
    bottom: property;
    equal: (property, property) -> bool;
    is_maximal: property -> bool;
  }

(* -------------------------------------------------------------------------- *)

(* The dynamic dependency graph. *)

(* The types of nodes and edges. *)

data mutable node info =
  Node {
    (* The client data associated with this node. *)
    info: info;
    (* The node's incoming and outgoing edges. *)
    outgoing: list dynamic; (* edge *)
    incoming: list dynamic; (* edge *)
    (* A transient mark, always set to [false], except when checking for
       duplicate elements in a list of nodes. Here, using an adopter to
       encode does not appear possible. *)
    marked: bool;
  }

data mutable edge info =
  Edge {
    (* This edge's nodes. *)
    node1, node2: dynamic; (* node *)
    (* In the OCaml version, each edge carries a boolean field [destroyed].
       Here, we encode this information in the implicit adopter field. *)
  }

(* Adopters for nodes and edges. *)

data mutable nodes info =
  Nodes adopts node info

data mutable edges info =
  Edges adopts edge info

data graph info =
  Graph {
    nodes: nodes info;
    edges: edges info;
  }

(* Node creation. *)

val create [info] (consumes i: info) : node info =
  Node {
    info = i;
    outgoing = nil;
    incoming = nil;
    marked = false;
  }

(* Following an edge. *)

val follow [info] (src: dynamic (* node *), e: edge info) : dynamic (* node *) =
  if e.node1 == src then
    e.node2
  else
    e.node1

(* Finding a node's predecessors. *)

val predecessors [info] (g: graph info, n: node info) : list dynamic (* node *) =
  (* Clean up the list of predecessor edges by removing the edges that have been
     previously destroyed by [clear_successors]. They are identified by the fact
     that they are no longer adopted by [es]. *)
  let predecessors : list dynamic (* edge *) =
    list::filter (n.incoming, fun (e: dynamic (* edge *) | g @ graph info) : bool =
      g.edges adopts e
    )
  in
  n.incoming <- predecessors;
  (* For each remaining (valid) predecessor edge, find its endpoint other than [n]. *)
  list::rev_map (predecessors, fun (e: dynamic (* edge *) | n @ node info * g @ graph info) : dynamic (* node *) =
    taking e from g.edges begin
      follow (n, e)
    end
  )

(* Edge creation. *)

val link [info] (g: graph info, src: dynamic (* node *), dst: dynamic (* node *)) : () =
  let e = Edge {
    node1 = src;
    node2 = dst;
  } in
  give e to g.edges;
  taking src from g.nodes begin src.outgoing <- cons (e, src.outgoing) end;
  taking dst from g.nodes begin dst.incoming <- cons (e, dst.incoming) end

(* Setting a node's successors. *)

val set_successors [info] (g: graph info, src: dynamic (* node *), dsts: list dynamic (* node *)) : () =
  let rec loop (dsts : list dynamic (* node *) | g @ graph info) : () =
    match dsts with
    | Nil ->
        ()
    | Cons { head = dst; tail = dsts } ->
        if taking dst from g.nodes begin dst.marked end then
         (* Skip this duplicate node. *)
         loop dsts
       else begin
         taking dst from g.nodes begin dst.marked <- True end;
         (* Create a link. *)
         link (g, src, dst);
         (* Continue. *)
         loop dsts;
         (* Clear the mark. *)
         taking dst from g.nodes begin dst.marked <- False end;
       end
    end
  in
  loop dsts

(* Removing a node's outgoing edges. *)

val clear_successors [info] (g: graph info, n: node info) : () =
  list::iter (n.outgoing, fun (e: dynamic | g @ graph info) : () =
    (* The edges are marked as destroyed by taking them away from their adopter. *)
    take e from g.edges
  );
  n.outgoing <- nil

(* -------------------------------------------------------------------------- *)

(* We now specialize the above types of nodes and edges with a fixed
   type [info]. Everything is parameterized over the types [variable]
   and [property]. *)

(* Each record of type [info] stands for one particular variable [v]
   in the equation system. *)

data mutable info variable property =
  Info {
    (* The right-hand side of the equation associated with the variable [v]. *)
    rhs: (variable -> property) -> property;
    (* The current property at [v]. It evolves in a monotonic manner. *)
    property: property;
  }

(* -------------------------------------------------------------------------- *)

(* The main function. *)

val lfp
  [variable, property]
  (* TEMPORARY probably duplicable variable => duplicable property => *)
  (
    (* We need notions of hashing and equality over variables. *)
    hash: variable -> int,
    equal: (variable, variable) -> bool,
    (* We need the following operations over properties. *)
    p: properties property,
    (* We need a system of equations. *)
    eqs: variable -> (variable -> property) -> property
  )
  : variable -> property =

  (* We will work with nodes of type [node (info variable property)].
     A type abbreviation would be very handy! *)

  (* Create an empty graph. *)
  
  let g : graph (info variable property) =
    Graph {
      nodes = Nodes;
      edges = Edges;
    } in

  (* Create a workset, whose elements are nodes. *)

  let workset : queue::fifo dynamic (* node *) =
    queue::create ()
  in

  (* A signal is broadcast by a variable to its predecessors. *)

fail

(* TEMPORARY if I wish to encode modules as records, then we will probably
   wish to have local algebraic data type definitions. *)

(*
Local Variables:
compile-command: "../mezzo fix.mz"
End:
*)
