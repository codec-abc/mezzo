(* This module implements association maps using height-balanced trees.
   The code is modeled after OCaml's [Map] library, but has been modified
   to allow trees to be modified in place. *)

(* -------------------------------------------------------------------------- *)

(* A tree is either empty or a binary node. Besides its children, a binary
   node contains a key, a value, and its height. *)

data tree k a =
  | Empty
  | mutable Node { left: tree k a; key: k; value_: a; right: tree k a; height: int }

(* -------------------------------------------------------------------------- *)

(* Cardinal. *)

val rec cardinal [k, a] (t: tree k a) : int =
  match t with
  | Empty ->
      0
  | Node ->
      cardinal t.left + 1 + cardinal t.right
  end

(* -------------------------------------------------------------------------- *)

(* The following (private) function reads the height information that is
   stored in a node. It does not recompute anything. *)

val height [k, a] (t: tree k a) : int =
  match t with
  | Empty -> 0
  | Node  -> t.height
  end

(* The following (private) function updates the height information that is
   stored in a node, based on the height of its children. *)

val update_height [k, a] (
  consumes t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: unknown }
) : ( |    t @ Node { left: tree k a; key: k; value_: a; right: tree k a; height: int     }) =
  t.height <- max (height t.left, height t.right) + 1

(* The following (private) function re-organizes a tree, if required, by
   performing a rotation at the root. The left and right sub-trees are
   expected to have almost equal heights. The address of the new tree root
   is returned. *)

val bal [k, a] (
  consumes t: Node { left: tree k a; key: k; value_: a; right: tree k a; height: unknown }
) : tree k a =

  (* Extract the two sub-trees and their heights. *)
  let Node { left = l; right = r } = t in
  let hl = height l
  and hr = height r in

  (* Determine whether the tree is unbalanced and needs to be repaired. *)

  (* Situation 1: the left sub-tree is too big. *)
  if hl > hr + 2 then match l with
  | Empty -> fail (* impossible! *)
  | Node { left = ll; right = lr } ->
      if height ll >= height lr then begin
       (* The left node becomes the root node. *)
       (* The root node becomes the right child. *)
       t.left <- lr;
       update_height t;
       l.right <- t;
       update_height l;
       l
      end
      else match lr with
      | Empty -> fail (* impossible! *)
      | Node { left = lrl; right = lrr } ->
         (* The node [lr] becomes the root node. *)
         (* The root node becomes the right child. *)
         (* The left node remains the left child. *)
         l.right <- lrl;
         update_height l;
         t.left <- lrr;
         update_height t;
         lr.left <- l;
         lr.right <- t;
         update_height lr;
         lr
      end
  end

  (* Situation 2: the right sub-tree is too big. *)
  else if hr > hl + 2 then match r with
  | Empty -> fail (* impossible! *)
  | Node { left = rl; right = rr } ->
      if height rr >= height rl then begin
       (* The right node becomes the root node. *)
        (* The root node becomes the left child. *)
       t.right <- rl;
       update_height t;
       r.left <- t;
       update_height r;
       r
      end
      else match rl with
      | Empty -> fail (* impossible! *)
      | Node { left = rll; right = rlr } ->
         (* The node [rl] becomes the root node. *)
         (* The root node becomes the left child. *)
         (* The right node remains the right child. *)
          t.right <- rll;
         update_height t;
         r.left <- rlr;
         update_height r;
         rl.left <- t;
         rl.right <- r;
         update_height rl;
         rl
      end
  end

  (* Last situation: the tree is not unbalanced. *)
  (* Just update its height field. [t] remains the root. *)
  else begin
    t.height <- max (hl, hr) + 1;
    t
  end

(* -------------------------------------------------------------------------- *)

(* Creating an empty tree. *)

val create [k, a] () : tree k a =
  Empty

(* Creating a singleton tree. *)

val singleton [k, a] (consumes (x: k, d: a)) : tree k a =
  Node { left = Empty; key = x; value_ = d; right = Empty; height = 1 }

(* Testing whether a tree is empty. *)

val is_empty [k, a] (t : tree k a) : bool =
  match t with
  | Empty -> True
  | Node  -> False
  end

(* -------------------------------------------------------------------------- *)

(* Insertion. *)

val rec add [k, a] (
  cmp: (k, k) -> int,
  consumes x: k,
  consumes d: a,
  consumes t: tree k a
) : tree k a =
  match t with
  | Empty ->
      (* Create a singleton tree. *)
      Node { left = t; key = x; value_ = d; right = Empty; height = 1 }
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
       (* The key already exists; overwrite the previous data *)
       t.value_ <- d;
       t
      end
      else if c < 0 then begin
       t.left <- add (cmp, x, d, t.left);
       bal t
      end
      else begin
       t.right <- add (cmp, x, d, t.right);
       bal t
      end
  end

(* -------------------------------------------------------------------------- *)

(* Lookup. *)

(* It seems that the function [find] must require [duplicable a].
   Indeed, without this hypothesis, we would be forced to consume
   the argument tree [t], which does not seem reasonable. *)

val rec find [k, a] duplicable a => (
  cmp: (k, k) -> int,
  x: k,
  t: tree k a
) : option a =
  match t with
  | Empty ->
      none
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then some t.value_
      (* It is interesting to note that we cannot write the more compact code:
        find (cmp, x, (if c < 0 then t.left else t.right))
        Indeed, the type-checker is unable to figure out the desired type of
        the conditional sub-expression; it reports a resource allocation
        conflict. In fact, if we wanted to explicitly declare this type,
        I believe that we would need a magic wand: this sub-expression
        produces a result [s] together with the permissions [s @ tree k a]
        and [s @ tree k a -* t @ tree k a]. *)
      else if c < 0 then find (cmp, x, t.left)
      else find (cmp, x, t.right)
  end

(* The above [find] function requires [a] to be duplicable. Another approach
   is to parameterize [find] with a [copy] function that is able to copy an
   element of type [a]. In fact, an even more general idea is to offer an
   [update] function that allows the caller to access the value found at the
   key [x] within a lexically-delimited scope, and then to surrender it (or
   a new version of it). *)

(* Because the key [x] may be absent, the function [f] is called either never
   or just once. Our use of a [preserved/consumed] permission pair allows
   reflecting this. A [pre/post] permission pair would be more precise, but
   can be used only when it is known that [f] will be called exactly once. *)

val rec update
  [k, a, preserved : perm, consumed : perm]
  (cmp: (k, k) -> int,
    x: k, t: tree k a,
    f: (consumes a | preserved * consumes consumed) -> a
      | preserved * consumes consumed
  ) : () =
  match t with
  | Empty ->
      ()
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then
       t.value_ <- f t.value_
      else if c < 0 then
       update [k, a, preserved, consumed] (cmp, x, t.left, f)
      else
       update [k, a, preserved, consumed] (cmp, x, t.right, f)
  end

(* The following two functions (currently not exported) show that versions
   of [find] can be implemented in terms of [update]. *)

val find_and_copy [k, a] (
  copy: a -> a,
  cmp: (k, k) -> int,
  x: k,
  t: tree k a
) : option a =
  let r = newref none in
  update [k, a, (r @ ref (option a)), empty] (cmp, x, t, fun (consumes x: a | r @ ref (option a)) : a =
    r := some (copy x);
    x
  );
  !r

val find_variant [k, a] duplicable a => (
  cmp: (k, k) -> int,
  x: k,
  t: tree k a
) : option a =
  let id (x: a) : a = x in
  find_and_copy (id, cmp, x, t)

val rec mem [k, a] (cmp: (k, k) -> int, x: k, t: tree k a) : bool =
  match t with
  | Empty ->
      False
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then
       True
      else if c < 0 then
       mem (cmp, x, t.left)
      else
       mem (cmp, x, t.right)
 end

(* -------------------------------------------------------------------------- *)

(* Minimum and maximum elements. *)

(* Because [min_binding] returns a binding but does not remove it from the
   tree, it is restricted to duplicable keys and values. *)

(* [min_binding] is defined first for non-empty trees, then extended to empty
   trees. *)

val rec min_binding
  [k, a] duplicable k => duplicable a =>
  (t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })
  : (k, a) =
  match t.left with
  | Empty ->
      t.key, t.value_
  | Node ->
      min_binding t.left
  end

val min_binding
  [k, a] duplicable k => duplicable a =>
  (t : tree k a)
  : option (k, a) =
  match t with
  | Empty ->
      none
  | Node ->
      some (min_binding t)
  end

val rec max_binding
  [k, a] duplicable k => duplicable a =>
  (t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })
  : (k, a) =
  match t.right with
  | Empty ->
      t.key, t.value_
  | Node ->
      max_binding t.right
  end

val max_binding
  [k, a] duplicable k => duplicable a =>
  (t : tree k a)
  : option (k, a) =
  match t with
  | Empty ->
      none
  | Node ->
      some (max_binding t)
  end

(* [extract_min_binding] extracts the node that contains the minimum key.
   It returns both this node (which can be re-used) and the remaining,
   re-organized tree. By convention, instead of returning a pair, we
   return a single node, which contains the minimum key, and whose
   right child is the remaining tree. *)

val rec extract_min_binding
  [k, a]
  (consumes t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })
  :             Node { left:    Empty; key: k; value_: a; right: tree k a; height: int }
  =
  match t.left with
  | Empty ->
      (* The desired node is [t], and the sub-tree [t.right] is what remains. *)
      t
  | Node ->
      (* Extract the minimum node out of the left sub-tree. *)
      let node = extract_min_binding t.left in
      (* Update in place the left sub-tree. *)
      t.left <- node.right;
      (* Perform a rotation at the root if required, and return. *)
      node.right <- bal t;
      node
  end

val rec extract_max_binding
  [k, a]
  (consumes t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })
  :             Node { left: tree k a; key: k; value_: a; right:    Empty; height: int }
  =
  match t.right with
  | Empty ->
      t
  | Node ->
      let node = extract_max_binding t.right in
      t.right <- node.left;
      node.left <- bal t;
      node
  end

(* The private function [add_min_binding] takes a tree node whose only
   relevant fields are [key] and [value]. The [left] field is supposed
   to contain [Empty]. The [right] and [height] fields are irrelevant.
   This node is inserted into the tree [t], where it is expected to
   become the new minimum node. *)

val rec add_min_binding [k, a]
  (consumes node: Node { left: Empty; key: k; value_: a; right: unknown; height: unknown },
   consumes t: tree k a) : tree k a =
  match t with
  | Empty ->
      (* Turn [node] into a singleton tree. *)
      node.right <- t; (* re-use the memory block at [t], which is [Empty] *)
      node.height <- 1;
      node
  | Node ->
      t.left <- add_min_binding (node, t.left);
      bal t
  end

val rec add_max_binding [k, a]
  (consumes node: Node { left: unknown; key: k; value_: a; right: Empty; height: unknown },
   consumes t: tree k a) : tree k a =
  match t with
  | Empty ->
      (* Turn [node] into a singleton tree. *)
      node.left <- t; (* re-use the memory block at [t], which is [Empty] *)
      node.height <- 1;
      node
  | Node ->
      t.right <- add_max_binding (node, t.right);
      bal t
  end

(* -------------------------------------------------------------------------- *)

(* Removal. *)

(* The private function [merge] combines two trees that have almost equal
   heights. *)

val merge [k, a] (consumes t1: tree k a, consumes t2: tree k a) : tree k a =
  match t1, t2 with
  | Empty, t -> t
  | t, Empty -> t
  | Node, Node ->
      (* Extract the minimum node out of [t2]... *)
      let root = extract_min_binding t2 in
      (* And re-use this node to become the new root. *)
      root.left <- t1;
      bal root
  end

(* Compared with OCaml's [remove], our [remove] function combines [find]
   and [remove]. The binding that was removed is returned via a reference,
   whereas the new tree is returned as a function result. *)

(* [dst] is an out-parameter, just like in C, except here, we get a type
   error if we forget to write it! *)

(* TEMPORARY we could avoid writes and calls to [bal] when nothing is
   removed *)

val rec remove [k, a] (
  cmp: (k, k) -> int,
  x: k,
  consumes t: tree k a,
  consumes dst: ref unknown
) : (tree k a | dst @ ref (option (k, a)))
  =
  match t with
  | Empty ->
      dst := none;
      t
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
       dst := some (t.key, t.value_);
       merge (t.left, t.right)
      end
      else if c < 0 then begin
       t.left <- remove (cmp, x, t.left, dst);
       bal t
      end
      else begin
       t.right <- remove (cmp, x, t.right, dst);
       bal t
      end
  end

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

(* Compared with OCaml's [iter], our [iter] function is generalized
   to allow early termination. The client function, [f], is allowed
   to return a Boolean flag, which indicates whether iteration should
   continue. The function [iter] itself returns a Boolean outcome
   which indicates whether iteration was performed all the way to the
   end. *)

(* This feature implies that the type of the collection elements cannot
   be modified. Our version of [fold] (below) makes the converse choices:
   early termination is not possible, but the type of the elements can be
   changed from [a1] to [a2]. *)

(* In fact, our [iter] is exactly OCaml's [for_all]. (Except that the
   evaluation order is not the same; OCaml's [iter] guarantees that
   the keys are visited in increasing order, where OCaml's [for_all]
   does not.) Funny -- I never explicitly thought of [for_all] as a
   version of [iter] that has an early termination feature. *)

val rec iter [k, a, p : perm] (
  f: (k,    a | p) -> bool,
  t: tree k a | p)  : bool =
  match t with
  | Empty ->
      True
  | Node ->
      iter (f, t.left) && f (t.key, t.value_) && iter (f, t.right)
  end

(* -------------------------------------------------------------------------- *)

(* Map. *)

(* Our [map] is modeled after OCaml's [mapi]. One could in fact offer
   even more generality by allowing keys to be copied/translated, as
   long as the key ordering is preserved. *)

val rec map [k, a1, a2, b, p : perm] duplicable k => (
  f: (k, consumes d: a1 | p) -> (       b | d @        a2),
  consumes t: tree k a1 | p)  : (tree k b | t @ tree k a2) =
  match t with
  | Empty ->
      Empty
  | Node ->
      Node {
       left = map (f, t.left);
       key = t.key;
       value_ = f (t.key, t.value_);
       right = map (f, t.right);
       height = t.height
      }
  end

(* -------------------------------------------------------------------------- *)

(* Fold. *)

(* The two [fold] functions have the same type, but differ in the order
   in which the tree is visited. *)

val rec fold_ascending [k, a1, a2, b, p : perm] (
  f: (k, consumes d:        a1, consumes accu: b | p) -> (b | d @        a2),
         consumes t: tree k a1, consumes accu: b | p)  : (b | t @ tree k a2) =
  match t with
  | Empty ->
      accu
  | Node ->
      let accu = fold_ascending (f, t.left, accu) in
      let accu = f (t.key, t.value_, accu) in
      let accu = fold_ascending (f, t.right, accu) in
      accu
  end

val rec fold_descending [k, a1, a2, b, p : perm] (
  f: (k, consumes d:        a1, consumes accu: b | p) -> (b | d @        a2),
         consumes t: tree k a1, consumes accu: b | p)  : (b | t @ tree k a2) =
  match t with
  | Empty ->
      accu
  | Node ->
      let accu = fold_descending (f, t.right, accu) in
      let accu = f (t.key, t.value_, accu) in
      let accu = fold_descending (f, t.left, accu) in
      accu
  end

(* -------------------------------------------------------------------------- *)

(* The private function [join] has the same specification as [bal], except
   the left and right sub-trees may have arbitrary heights. *)

val rec join [k, a] (
  consumes t: Node { left: tree k a; key: k; value_: a; right: tree k a; height: unknown }
) : tree k a =
  let left, right = t.left, t.right in
  match t.left, t.right with
  | Empty, _ ->
      add_min_binding (t, right)
  | _, Empty ->
      add_max_binding (t, left)
  | Node, Node ->
      if left.height > right.height + 2 then begin
       (* The left node becomes the root. *)
       (* The root node becomes the right child. *)
       t.left <- left.right;
       left.right <- join t;
       bal left
      end
      else if right.height > left.height + 2 then begin
       t.right <- right.left;
       right.left <- join t;
       bal right
      end
      else begin
       update_height t;
       t
      end
  end

(* -------------------------------------------------------------------------- *)

(* The private function [concat] concatenates two trees of arbitrary heights.
   It is identical to [merge], except it calls [join] instead of [bal]. *)

val concat [k, a] (consumes t1: tree k a, consumes t2: tree k a) : tree k a =
  match t1, t2 with
  | Empty, t -> t
  | t, Empty -> t
  | Node, Node ->
      let root = extract_min_binding t2 in
      root.left <- t1;
      join root
  end

(* -------------------------------------------------------------------------- *)

(* The private function [split] splits at a certain key. It returns a tree
   whose root node may or may not contain a value: note that the field
   [value] has type [option a] in the result type. This allows us to almost
   completely avoid memory allocation (and it is a natural thing to do anyway). *)

val rec split [k, a] (cmp: (k, k) -> int, x: k, consumes t: tree k a)
  : Node { left: tree k a; key: unknown; value_: option a; right: tree k a; height: unknown } =
  match t with
  | Empty ->
      (* Allocate a new node, containing no value_, and whose sub-trees are empty. *)
      Node { left = Empty; key = (); value_ = none; right = t; height = () }
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
       (* We found the desired key. *)
       t.value_ <- some t.value_; (* ah ha! look at this, feeble ML programmers *)
       t
      end
      else if c < 0 then begin
        let root = split (cmp, x, t.left) in
       t.left <- root.right;
       root.right <- join t;
       root
      end
      else begin
        let root = split (cmp, x, t.right) in
       t.right <- root.left;
       root.left <- join t;
       root
      end
  end

(* -------------------------------------------------------------------------- *)

(* The private function [concat_or_join] accepts a tree whose root node may or
   may not contain a value, and turns it intro a tree, using either [join] or
   [concat]. Thus, the left and right sub-trees are allowed to have arbitrary
   heights. *)

val concat_or_join [k, a] (consumes t: Node { left: tree k a; key: k; value_: option a; right: tree k a; height: unknown }) : tree k a =
  match t.value_ with
  | Some { contents = d } ->
      t.value_ <- d;
      join t
  | None ->
      concat (t.left, t.right)
  end

(* -------------------------------------------------------------------------- *)

(* Merging. *)

(* This function has the same specification as its OCaml counterpart. *)

val rec merge [k, a, b, c] (
  cmp: (k, k) -> int,
  f: (k, consumes option a, consumes option b) -> option c,
  consumes s1: tree k a,
  consumes s2: tree k b
) : tree k c =
  match s1, s2 with
  | Empty, Empty ->
      s1
  | _, _ ->
      if height s1 >= height s2 then
       match s1 with
       | Node ->
           let root2 = split (cmp, s1.key, s2) in
           root2.left <- merge (cmp, f, s1.left, root2.left);
           root2.key <- s1.key;
           root2.value_ <- f (s1.key, some s1.value_, root2.value_);
           root2.right <- merge (cmp, f, s1.right, root2.right);
           concat_or_join root2
        | Empty ->
           fail (* impossible *)
        end
      else
       match s2 with
       | Node ->
           let root1 = split (cmp, s2.key, s1) in
           root1.left <- merge (cmp, f, root1.left, s2.left);
           root1.key <- s2.key;
           root1.value_ <- f (s2.key, root1.value_, some s2.value_);
           root1.right <- merge (cmp, f, root1.right, s2.right);
           concat_or_join root1
        | Empty ->
           fail (* impossible *)
        end
  end

(* -------------------------------------------------------------------------- *)

(* Compared to OCaml's [filter], our [filter] is more general. Instead of
   returning a Boolean value, the function [p] returns an option. This
   allows us not only to drop certain entries, but also to modify the
   existing entries, and possibly to change their type. *)

val rec filter [k, a, b] (
  p: (k, consumes a) -> option b,
  consumes t: tree k a
) : tree k b =
  match t with
  | Empty ->
      t
  | Node ->
      t.left <- filter (p, t.left);
      t.value_ <- p (t.key, t.value_);
      t.right <- filter (p, t.right);
      concat_or_join t
  end

(* The function [partition] is generalized in a similar manner. Instead
   of returning a Boolean value, it returns a choice. *)

val rec partition [k, a, b, c] (
  p: (k, consumes a) -> either::either b c,
  consumes t: tree k a
) : (tree k b, tree k c) =
  match t with
  | Empty ->
      t, Empty
  | Node ->
      let ll, lr = partition (p, t.left) in
      let rl, rr = partition (p, t.right) in
      match p (t.key, t.value_) with
      | either::Left { contents = d } ->
         t.left <- ll;
         t.value_ <- d;
         t.right <- rl;
         join t, concat (lr, rr)
      | either::Right { contents = d } ->
         t.left <- lr;
         t.value_ <- d;
         t.right <- rr;
         concat (ll, rl), join t
      end
      (* TEMPORARY why do I get a warning about this merge? isn't the expected type
        propagated all the way down? *)
  end

(* -------------------------------------------------------------------------- *)

(* Iterators. *)

open osf
open focused

alias iterator k a (post: perm) =
  ref (focused (list::list (tree k a)) post)

val new_iterator [k, a] (consumes t: tree k a): iterator k a (t @ tree k a) =
  newref (
    list::Cons { head = t; tail = list::Nil },
    fun () : () = ()
  )

val rec next [k, a, post: perm]
  (consumes it: iterator k a post):
  either::either (focused (k, a, int) (it @ iterator k a post)) (| post) =

  let stack, release = !it in

  (* [stack] is the list::list of sub-trees that remain to be explored. *)
  (* [release] is the magic wand that abandons the stack and yields
     the ownership of the entire tree. *)

  match stack with
  | list::Nil ->
      (* The stack is empty. We are done. The iterator auto-stops. *)
      release ();
      either::right ()

  | list::Cons { head = t; tail = ts } ->
      (* The stack is non-empty. *)
      match t with
      | Empty ->
          (* The head tree is empty. Pop it off. *)
          it := (ts, release);
          (* Persuade the type-checker that [release] takes us from the new stack
             to the old stack and (hence) to [post]. *)
          let flex p: perm in
          pack release @ osf::wand (ts @ list::list (tree k a)) post
          witness p * stack @ list::Cons { head: Empty; tail = ts };
          (* Continue. *)
          next it

      | Node { left; key; value_; right; height } ->
          (* The head tree has a root node. Split this node and push its
             sub-trees onto the stack. *)
          let stack = list::Cons {
            head = left;
            tail = list::Cons { head = right; tail = ts }
          } in
          it := (stack, release);

          (* Now, we must construct a new magic wand, which packs some of our current
             permissions, and ensures that once the client gives [key @ k * value @ a]
             back to us, we can produce [it @ iterator k a post]. *)
          let flex p: perm in
          let surrender (|
            consumes (
              left @ tree k a *
              key @ k *
              value_ @ a *
              right @ tree k a *
              t @ Node { left; key; value_; right; height } *
              ts @ list::list (tree k a) *
              it @ Ref { contents: (=stack, =release) } *
              p
            )
          ): (| it @ iterator k a post) =

            (* We know that the new [stack] is [left :: right :: ts], because this is
               a duplicable fact. Similarly, we know that the old [stack] was [t :: ts].
               Thus, if we own the new [stack] as a list of trees, and if own the node [t]
               and its element, then we can reconstruct that we own the old [stack] as a
               list of trees, and from there, apply [release] -- at its previous type --
               in order to obtain [post]. This justifies the following new view of
               [release]. *)

            (* The use of [stash/unstash] is a way of helping the type-checker find
               the appropriate value of the flexible variable [p]. It would be more
               elegant if we could find a less fragile way of telling the type-checker
               what we mean by [p]. *)

            (* stash::stash [(ts @ list::list (tree k a))] (); *)

            pack release @ wand (stack @ list::list (tree k a)) post
            witness
              key @ k *
              value_ @ a *
              t @ Node { left; key; value_; right; height } *
              p;

            (* stash::unstash(); *)

            (* This assertion is superfluous. It says that, once the client surrenders
               [key @ k * value @ a], we again have a well-formed new [stack] and that
               [release] allows us to abandon this stack and obtain [post]. *)
            assert
              stack @ list::list (tree k a) *
              release @ wand (stack @ list::list (tree k a)) post;
            ()
          in

          (* This assertion is superfluous. *)
          assert surrender @ wand (key @ k * value_ @ a) (it @ iterator k a post);

          either::left ((key, value_, height), surrender)
     end
  end

val stop [k, a, post: perm]
  (consumes it: iterator k a post):
  (| post) =
  let _, release = !it in
  release()

val new_generic_iterator [k, a] (consumes t: tree k a):
  iterator::iterator (k, a, int) (t @ tree k a)
  =
  let alias post: perm = t @ tree k a in
  let alias a' = (k, a, int) in

  iterator::wrap [a', (iterator k a post), post]
    (new_iterator t, next [k, a, post], stop [k, a, post])

(* -------------------------------------------------------------------------- *)

(* We use an iterator to implement the comparison of two trees. *)

val compare [k, a] (
  cmpk: (k, k) -> int,
  cmpa: (a, a) -> int,
  m1: tree k a,
  m2: tree k a
) : int =

  let i1 = new_generic_iterator m1
  and i2 = new_generic_iterator m2 in

  let cmp ((k1: k, x1: a, h1: int), (k2: k, x2: a, h2: int)): int =
    let c = cmpk (k1, k2) in
    if c <> 0 then c else cmpa (x1, x2)
  in

  iterator::compare (cmp, i1, i2)

(* -------------------------------------------------------------------------- *)

(* Conversion of a tree to a list. *)

val bindings [k, a] duplicable k => duplicable a => (t: tree k a) : list::list (k, a) =
  let f (x: k, v: a, accu: list::list (k, a)) : list::list (k, a) =
    list::cons ((x, v), accu)
  in
  fold_descending (f, t, list::nil)

(* -------------------------------------------------------------------------- *)
(* -------------------------------------------------------------------------- *)

(* We now wrap the type [tree] in another type, [treeMap], which the client
   will work with. There are two reasons for doing so. One is that this allows
   some functions, such as [add], to return unit instead of returning a new
   data structure. The other is that this allows us to store the comparison
   function. *)

data mutable treeMap k (c : value) a =
  TreeMap { tree: tree k a; cmp: =c | c @ (k, k) -> int }

val cardinal [k, c : value, a] (m: treeMap k c a) : int =
  cardinal m.tree

(* -------------------------------------------------------------------------- *)

(* Creating an empty map requires supplying a comparison function [cmp],
   which is stored within the new data structure. *)

val create [k, a] (cmp: (k, k) -> int) : treeMap k cmp a =
  TreeMap { tree = create(); cmp }

val singleton [k, a] (cmp: (k, k) -> int, consumes x: k, consumes d: a): treeMap k cmp a =
  TreeMap { tree = singleton (x, d); cmp }

val is_empty [k, c: value, a] (m : treeMap k c a) : bool =
  is_empty m.tree

val add [k, c: value, a] (
  consumes x: k,
  consumes d: a,
  m: treeMap k c a
) : () =
  m.tree <- add (m.cmp, x, d, m.tree)

val find [k, c: value, a] duplicable a => (
  x: k,
  m: treeMap k c a
) : option a =
  find (m.cmp, x, m.tree)

val update [k, c: value, a, preserved : perm, consumed : perm] (
  x: k,
  m: treeMap k c a,
  f: (consumes a | preserved * consumes consumed) -> a
| preserved * consumes consumed
) : () =
  update [k, a, preserved, consumed] (m.cmp, x, m.tree, f)

val mem [k, c: value, a] (x: k, m: treeMap k c a) : bool =
  mem (m.cmp, x, m.tree)

val min_binding [k, c: value, a] duplicable k => duplicable a => (m : treeMap k c a) : option (k, a) =
  min_binding m.tree

val max_binding [k, c: value, a] duplicable k => duplicable a => (m : treeMap k c a) : option (k, a) =
  max_binding m.tree

val extract_min_binding [k, c: value, a] (m: treeMap k c a) : option (k, a) =
  match m.tree with
  | Empty ->
      none
  | Node ->
      let node = extract_min_binding m.tree in
      m.tree <- node.right;
      some (node.key, node.value_)
  end

val extract_max_binding [k, c: value, a] (m: treeMap k c a) : option (k, a) =
  match m.tree with
  | Empty ->
      none
  | Node ->
      let node = extract_max_binding m.tree in
      m.tree <- node.left;
      some (node.key, node.value_)
  end

val remove [k, c: value, a] (x: k, m: treeMap k c a) : option (k, a) =
  let dst = newref () in
  m.tree <- remove (m.cmp, x, m.tree, dst);
  !dst

val iter [k, c: value, a, p : perm] (
  m: treeMap k c a,
  f: (k, a | p) -> bool
  | p
) : bool =
  iter (f, m.tree)

val for_all =
  iter

(* [exists] could be implemented directly, but an implementation in
   values of [for_all] is preferred, as a test of the type-checker. *)

val exists [k, c: value, a, p : perm] (
  m: treeMap k c a,
  f: (k, a | p) -> bool
 | p
) : bool =
  not (for_all (m, fun (key: k, value_: a | p) : bool =
    not (f (key, value_))
  ))

val map [k, c: value, a1, a2, b, p : perm] duplicable k => (
  consumes m: treeMap k c a1,
  f: (k, consumes d: a1 | p) -> (b | d @ a2)
  | p
) : (treeMap k c b | m @ treeMap k c a2) =
  TreeMap { tree = map (f, m.tree); cmp = m.cmp }

(* [copy] could be defined directly, but is here defined as a special case of [map]. *)

val copy [k, c: value, a, b] duplicable k => (m: treeMap k c a, f: a -> b) : treeMap k c b =
  map (m, fun (x: k, d: a) : b = f d)

val fold_ascending [k, c: value, a1, a2, b, p : perm] (
  consumes m: treeMap k c a1,
  consumes accu: b,
  f: (k, consumes d: a1, consumes accu: b | p) -> (b | d @ a2)
  | p
) : (b | m @ treeMap k c a2) =
  fold_ascending (f, m.tree, accu)

val fold_descending [k, c: value, a1, a2, b, p : perm] (
  consumes m: treeMap k c a1,
  consumes accu: b,
  f: (k, consumes d: a1, consumes accu: b | p) -> (b | d @ a2)
  | p
) : (b | m @ treeMap k c a2) =
  fold_descending (f, m.tree, accu)

val fold =
  fold_ascending

val merge [k, cmp: value, a, b, c] (
  consumes m1: treeMap k cmp a,
  consumes m2: treeMap k cmp b,
  f: (k, consumes option a, consumes option b) -> option c
) : treeMap k cmp c =
  m1.tree <- merge (m1.cmp, f, m1.tree, m2.tree);
  m1

val split [k, c: value, a] (
  x: k,
  consumes m: treeMap k c a
) : (treeMap k c a, option a, treeMap k c a) =
  let root = split (m.cmp, x, m.tree) in
  m.tree <- root.left;
  m, root.value_, TreeMap { tree = root.right; cmp = m.cmp }

val filter [k, c: value, a, b] (
  consumes m: treeMap k c a,
  p: (k, consumes a) -> option b
) : treeMap k c b =
  m.tree <- filter (p, m.tree);
  m

val partition [k, cmp: value, a, b, c] (
  consumes m: treeMap k cmp a,
  p: (k, consumes a) -> either::either b c
) : (treeMap k cmp b, treeMap k cmp c) =
  let left, right = partition (p, m.tree) in
  m.tree <- left;
  m, TreeMap { tree = right; cmp = m.cmp }

(* We might wish to make [compare] a unary function
   of [cmp] to a binary function of [(m1, m2)]. *)

val compare [k, c: value, a] (
  cmp: (a, a) -> int,
  m1: treeMap k c a,
  m2: treeMap k c a
) : int =
  compare (m1.cmp, cmp, m1.tree, m2.tree)

val equal [k, c: value, a] (
  cmp: (a, a) -> int,
  m1: treeMap k c a,
  m2: treeMap k c a
) : bool =
  compare (cmp, m1, m2) = 0

val bindings [k, c: value, a] duplicable k => duplicable a => (
  m: treeMap k c a
) : list::list (k, a) =
  bindings m.tree

(* TEMPORARY compare .mzi file with map.mli *)

(*
Local Variables:
compile-command: "../mezzo mutableTreeMap.mz"
End:
*)
