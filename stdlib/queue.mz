(* A FIFO queue implementation, adapted from OCaml's queue.ml. *)

data mutable cell a =
  Cell { value_: a; next: dynamic }

(* The FIFO structure is implemented as a cyclic list. The
   [fifo] object contains a pointer to the last element of
   the queue, as well as the length of the queue. The length
   information is used in the OCaml version to test whether
   the queue is empty. Here, the tag, [Empty] or [NonEmpty],
   provides this information. The [tail] pointer is present
   only when the queue is nonempty. *)

data mutable fifo a =
  Empty    { length: int; tail: ()      }
| NonEmpty { length: int; tail: dynamic }
adopts cell a

val create [a] () : fifo a =
  Empty { length = 0; tail = () }

val internal_insert [a] (consumes x: a, q: fifo a, insertAtEnd: bool): () =
  let c = Cell {
    value_ = x; next = ()
  } in
  match q with
  | Empty ->
      c.next <- c;
      give c to q;
      tag of q <- NonEmpty;
      q.length <- 1;
      q.tail <- c
  | NonEmpty { tail } ->
      taking tail from q begin
        c.next <- tail.next;
        tail.next <- c;
      end;
      give c to q;
      q.length <- q.length + 1;
      (* We have just inserted the cell [c] at the beginning of the
        queue. If the caller would like [c] to be inserted at the
        end of the queue, advance the [tail] pointer. *)
      if insertAtEnd then
       q.tail <- c
  end

val insert [a] (consumes x: a, q: fifo a) : () =
  internal_insert (x, q, true)
  
val insert_at_head [a] (consumes x: a, q: fifo a) : () =
  internal_insert (x, q, false)

val retrieve [a] (q: fifo a) : option a =
  match q with
  | Empty ->
      None
  | NonEmpty { tail } ->
      take tail from q;
      let head = tail.next in
      if head == tail then begin
       tag of q <- Empty;
       q.length <- 0;
       q.tail <- ()
      end
      else begin
       q.length <- q.length - 1;
       take head from q;
       tail.next <- head.next;
       give tail to q
      end;
      (* At this point, we own the [head] cell. Note that this annotation
        is not required. *)
      assert head @ cell a;
      (* The head cell must not be given back to the queue. We need to assert
        the ownership of [head.value], whose type is not duplicable. *)
      some head.value_
 end

val peek [a] duplicable a => (q: fifo a) : option a =
  match q with
  | Empty -> 
      none
  | NonEmpty { tail } ->
      let head =
       taking tail from q begin
         tail.next
       end
      in
      taking head from q begin
       some head.value_
      end
  end

val length [a] (q: fifo a) : int =
  match q with
  | Empty -> 0
  | NonEmpty -> q.length
  end

(* The function [clear] doesn't type-check without the [match]
   construct. Mezzo does not allow setting an object's tag
   unless its current tag is known. *)

val clear [a] (q: fifo a) : () =
  match q with
  | Empty -> ()
  | NonEmpty ->
      tag of q <- Empty;
      q.length <- 0;
      q.tail   <- ()
  end

val rotate [a] (q: fifo a) : () =
  match q with
  | Empty ->
      ()
  | NonEmpty { tail } ->
      (* Advance the tail pointer. *)
      taking tail from q begin
       q.tail <- tail.next
      end
  end

(* In contrast with [list::fold], the function [queue::fold] cannot perform
   a strong update on the queue elements. The queue [q] adopts elements of
   type [cell a], and this cannot be changed. Thus, [queue::fold] must require
   its argument [f] to preserve the type [a] of the list element. *)

val fold [a, b] (
  q: fifo a,
  consumes accu: b,
  f: (a, consumes b) -> b
) : b =
  match q with
  | Empty ->
      accu
  | NonEmpty { tail } ->
      let rec fold (consumes accu: b, c: dynamic | q @ fifo a) : b =
       take c from q;
        let Cell { next; value_ } = c in
        let accu = f (value_, accu) in
       give c to q;
        if tail == c then
          accu
        else
          fold (accu, next)
      in
      (* Obtain the address of the first cell. *)
      let head = taking tail from q begin tail.next end in
      (* We're ready to launch the recursion. *)
      fold (accu, head)
  end

val iter [a, p : perm] (
  q: fifo a,
  f: (a | p) -> ()
| p
) : () =
  fold [a, (| p)] (q, (), fun (x:a, (| p)) : () = f x) 

val map [a, b, p : perm] (
  q: fifo a,
  f: (a | p) -> b
| p
) : fifo b =
  let q' : fifo b = create () in
  iter (q, fun (x: a | q' @ fifo b * p) : () =
    insert (f x, q')
  );
  q'

val copy [a] duplicable a => (q: fifo a): fifo a =
  map (q, fun (x: a) : a = x)

val rec work [a, p : perm] (q: fifo a, f: (a | q @ fifo a * p) -> () | p) : () =
  match retrieve q with
  | None ->
      ()
  | Some { contents = x } ->
      f x;
      work (q, f)
  end

(*
Local Variables:
compile-command: "../mezzo queue.mz"
End:
*)
