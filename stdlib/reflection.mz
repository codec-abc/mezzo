(* TEMPORARY this could be just a rich_bool if "duplicable a" was
   a permission. *)

(* TEMPORARY we need a dummy [content] field of type unit, because
   there is otherwise no place to put the [TyAnd] construct. *)

data duplicability a =
  | NonDuplicable
  | Duplicable { content: (() | duplicable a) }

(* A test. *)

(* This function is not very useful per se, but it shows that a dynamic
   test allows us to decide whether [x] can be shared or must be explicitly
   copied. *)

val copy_if_required [a] (dup: duplicability a, copy: a -> a, x: a) : a =
  if dup then x else copy x

(* A test. *)

(* Constructing duplicability witnesses is easy: the witness is always
   the same, it is [Duplicable]. *)

(* TEMPORARY if there wasn't this pesky [content] field, we would just
   use [Duplicable] itself and would not need an abbreviation for it. *)

(* TEMPORARY the next step would be to have the type system automatically
   supply a value where an expression of type [duplicable a] is expected... *)

val dup_int : duplicability int =
  Duplicable { content = () }

(* TEMPORARY this type is no longer supported!
val dup: [a] duplicable a => duplicability a =
  Duplicable { content = () }

val dup_int_2 : duplicability int =
  dup
*)

