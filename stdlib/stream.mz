open lazy

(* A definition of lazy (finite or infinite) streams. *)

data cell a =
  Nil
| Cons { head: a; tail: thunk (cell a) }

alias stream a =
  (thunk (cell a) | duplicable a)

(* Short-hands for constructing streams. *)

val _nil : Nil =
  Nil

val _cons (head: unknown, tail: unknown) : Cons { head; tail } =
  Cons { head; tail }

val nil =
  lazy::constant _nil

val cons [a] (head: a, tail: stream a) : stream a =
  lazy::constant (_cons(head, tail))

(* Accessors. *)

val head [a] (xs: stream a) : option a =
  match lazy::force xs with
  | Nil ->
      none
  | Cons { head } ->
      some head
  end

val tail [a] (xs: stream a) : option (stream a) =
  match lazy::force xs with
  | Nil ->
      none
  | Cons { tail } ->
      some tail
  end 

(* Concatenation. *)

val rec concat [a] (xs: stream a, ys: stream a) : stream a =
  lazy::create (fun () : cell a =
    match lazy::force xs with
    | Nil ->
        lazy::force ys
    | Cons as xs ->
        _cons(xs.head, concat(xs.tail, ys))
    end
  )

(* An infinite stream can be created out of a production function.
   The function's internal state becomes hidden forever. *)

val infinite [a, p : perm] duplicable a => (
  f: (| p) -> a
| consumes p
) : stream a =

  let rec next (| consumes p) : cell a =
    _cons(f(), lazy::create next)
  in
  lazy::create next

(* Printing BUG? If I remove "duplicable a =>" above, I get an error
   message that contains "!! â˜  !!" *)

(* A constant infinite stream. *)

val constant [a] duplicable a => (x: a) : stream a =
  infinite (fun () : a = x)

(* The above definition of [constant] causes new suspensions to be created as
   the stream is forced. One might prefer a definition that consists of a
   single cyclic suspension. Here it is. *)

val constant [a] duplicable a => (x: a) : stream a =
  lazy::cyclic (fun (self: stream a) : cell a =
    _cons(x, self)
  )

(* The infinite stream of the natural integers. *)

val nats : stream int =
  let r = newref 0 in
  infinite (fun (| r @ ref int) : int = postincr r)

(* A finite or infinite stream can be created out of a production function
   that produces an optional result. As soon as the function produces [None],
   the stream is terminated. As in the case of [infinite] above, the
   function's internal state becomes hidden forever. The function [f] is
   allowed to destroy its own internal state when it returns [None]. This
   can be useful, for instance, if one wishes to close a file after all
   characters have been read. *)

val produce [a, p : perm] duplicable a => (
  f: (| consumes p) -> option (a | p)
| consumes p
) : stream a =

  let rec next (| consumes p) : cell a =
    match f() with
    | None ->
        Nil
    | Some { contents = x } ->
        _cons(x, lazy::create next)
    end
  in
  lazy::create next

(* A finite stream of integers. *)

val interval (n: int) : stream int =
  let r = newref 0 in
  produce (fun (| consumes r @ ref int) : option (int | r @ ref int) =
    let x = !r in
    if x < n then begin
      r := x + 1;
      some x
    end
    else
      none
  )

(*
Local Variables:
compile-command: "../mezzo stream.mz"
End:
*)
