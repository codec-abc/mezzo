open lazy

data cell a =
  Nil
| Cons { head: a; tail: thunk (cell a) }

alias stream a =
  (thunk (cell a) | duplicable a)

val _cons (head: unknown, tail: unknown) : Cons { head; tail } =
  Cons { head; tail }

val f [a] (consumes c: cell a) : cell a =
  match c with
    | Cons { head = x; tail = xs } ->
        _cons(x, xs)
  end

(*
Local Variables:
compile-command: "../mezzo flexible-point.mz"
End:
*)
