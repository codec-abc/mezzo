open list
open nest

data mutable graph =
  (g: Graph {
    roots: list (node g)
  })

and alias node (g: value) =
  (n: unknown | nests g (n @ node_ g))

and mutable node_ (g: value) =
  Node {
    neighbors: list (node g)
  }

val _: graph =
  let g = Graph {
    roots = nil
  } in
  let n = Node {
    neighbors = nil;
  } in
  nest [g, (n @ node_ g)] ();
  consult (fun (| n @ node_ g): () =
    n.neighbors <- cons [node g] (n, nil);
  );
  g.roots <- cons (n, nil);
  g
