(* This example must fail, because the function we're passing is too
 * restrictive: it consumes its argument! See [impredicative5.mz] for the
 * symmetrical case. *)

data mutable foo = Foo

val fst [a, b] (consumes y: a, b): a = y

val id [α] (x: α): ((f: [β] (α, β) -> α) | x @ α) -> α =
  fun (f: [β] ((α, β) -> α) | x @ α): α =
    f [int] (x, 2)

val test1 = id [foo] Foo
val test2 = fst [foo]

val test3 = test1 test2

(*

Internal representation for "id":

[α, x : value]
  (=x | x @ α) -> (
    [f : value] (=f | f @
      [β, /d1 : value, /d2 : value, /r2 : value]
        (=/r2 | /r2 @ (=/d1, =/d2) ∗ /d1 @ α ∗ /d2 @ β) ->
        (α | /d1 @ α ∗ /d2 @ β)
      ∗ x @ α) -> (α | x @ α)
  | x @ α)


Internal representation for "test1":

[f : value] (=f | x @ foo ∗ f @
  [β, /d1 : value, /d2 : value, /r2 : value]
    (=/r2 | /r2 @ (=/d1, =/d2) ∗ /d1 @ foo ∗ /d2 @ β) ->
    (foo | /d1 @ foo ∗ /d2 @ β))
  -> (foo | x @ foo)


Internal representation for "test2":

[b, /d1 : value, /d2 : value, /r2 : value]
  (=/r2 | /r2 @ (=/d1, =/d2) ∗ /d2 @ b ∗ /d1 @ foo)
-> (foo | /d2 @ b)

*)
