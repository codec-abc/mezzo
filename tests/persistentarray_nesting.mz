open lock
open nest

(* This version of persistent arrays uses nesting instead of adoption/abandon.
   Compare with the version in the standard library. *)

(* ---------------------------------------------------------------------------- *)

(* The internal representation of persistent arrays is essentially unchanged.
   The main difference is that the type [dynamic] is replaced with the type
   [p: unknown | nests r (p @ point r a)], which represents a point that
   inhabits the region [r]. This type is duplicable. *)

(* Unfortunately, it seems that I cannot use [wref] any more, because I need
   to name the region [r], in order to refer to it in the permission
   [nests r ...]. *)

(* TEMPORARY a type abbreviation, or a data type where the field
   names are binders, would be useful. *)

data parray a =
  PArray { contents: (
    (* The region which this persistent array is part of. *)
    r: unknown,
    (* A lock, which gives access to this region. *)
    l: lock (r @ region),
    (* The point in the region which represents this persistent array. *)
    p: unknown | nests r (p @ point r a)
  ) }

(* A region nests a set of points. *)

and mutable region =
  Region

(* The representation of points is unchanged. *)

and mutable point (r : value) a =
| PFlat { contents: marray a;                                unused1: (); unused2: () }
| PUndo { previous: (p: unknown | nests r (p @ point r a)); offset: int; element:  a }

(* ---------------------------------------------------------------------------- *)

(* Creation of a new persistent array. *)

val create [a] duplicable a => (n: int, x: a) : parray a =
  (* Create the point [p]. *)
  let t = array::create (n, x) in
  let p = PFlat { contents = t; unused1 = (); unused2 = () } in
  (* Create the region [r] and make [p] an element of it. *)
  let r = Region in
  nest [r, (p @ point r a)] (); (* the system no longer infers (p @ point r a)! *)
  (* Create a lock that protects [r]. *)
  let l : lock (r @ region) = lock::new () in
  (* Done. *)
  PArray { contents = (r, l, p) }

(* ---------------------------------------------------------------------------- *)

val rec revert [a] duplicable a =>
  (consumes r: region, p: unknown | nests r (p @ point r a))
: (marray a | p @ PUndo { previous: unknown; offset: unknown; element: unknown }
           * r @ punched region (p @ point r a))
=
  (* Take [p] out of the region [r]. *)
  focus ();
  match p with
  | PFlat ->
      let t = p.contents in
      tag of p <- PUndo;
      t
  | PUndo ->
      revert_link (r, p)
  end

and revert_link [a] duplicable a =>
  (r: punched region (p @ point r a),
   consumes p: PUndo { previous: (previous: unknown | nests r (previous @ point r a)); offset: int; element: a }
 | nests r (p @ point r a))
: (marray a | p @ PUndo { previous: unknown; offset: unknown; element: unknown })
=
  let previous = p.previous in
  (* We must give [p] back to the region before the recursive call.
     We read [p.offset] and [p.element] now, while we have access
     to [p], because it will be difficult/impossible later, once
     we have focused on [previous]. *)
  let i = p.offset in
  let v = p.element in
  defocus [r] ();
  (* Now that we could in principle loop if there is a cycle in
     the graph, while the version based on [dynamic] cannot loop;
     it will fail at runtime instead. *)
  let t = revert (r, previous) in
  (* Now, we are focused on [previous]. *)
  previous.previous <- p;
  previous.offset <- i;
  previous.element <- array::get (t, i);
  assert previous @ point r a; (* sanity check *)
  defocus [r] ();
  array::set (t, i, v);
  (* The point [p] is in the desired state: its tag is [PUndo]. Unfortunately,
     we have forgotten this information by giving [p] back to [r] above, so we
     have to explicitly recover it. *)
  focus [r, (p @ point r a)] ();
  match p with PFlat -> fail | PUndo -> () end;
  t

val reroot [a] duplicable a => (
  consumes r: region,
  p: unknown | nests r (p @ point r a)
)
: (t: marray a | p @ PFlat { contents = t; unused1: (); unused2: () }
              * r @ punched region (p @ point r a))
=

  focus ();
  match p with
  | PFlat ->
      p.contents
  | PUndo ->
      let t = revert_link (r, p) in
      tag of p <- PFlat;
      p.contents <- t;
      p.unused1 <- ();
      p.unused2 <- ();
      t
  end

(* ---------------------------------------------------------------------------- *)

val borrow [a, b, q : perm] duplicable a => (
  pa: parray a, 
  f: (marray a | consumes q) -> b
| consumes q
) : b =
  let PArray { contents = (r, l, p) } = pa in
  lock::borrow (l, fun (| r @ region * consumes q) : b =
    let t = reroot (r, p) in
    let result = f t in
    defocus [r] ();
    result
  )

(* ---------------------------------------------------------------------------- *)

val get [a] duplicable a => (pa: parray a, i: int) : a =
  borrow (pa, fun (t: marray a) : a =
    array::get (t, i)
  )

(* ---------------------------------------------------------------------------- *)

(* Write access. *)

val set [a] duplicable a => (pa: parray a, i: int, v: a) : parray a =
  let PArray { contents = (r, l, p) } = pa in
  lock::borrow (l, fun (| r @ region) : parray a =
    let t = reroot (r, p) in
    tag of p <- PUndo;
    p.offset <- i;
    p.element <- array::get (t, i);
    array::set (t, i, v);
    let q = PFlat { contents = t; unused1 = (); unused2 = () } in
    (* We need to nest [q] in [r] before we can defocus [p], because defocusing
       [p] requires [p.previous] to be a valid inhabitant of [r]. Thus, we must
       be able to nest a permission into a punched region. *)
    nest [r, (q @ point r a)] (); (* the system no longer infers the type application (q @ point r a)! *)
    p.previous <- q;
    defocus [r] ();
    PArray { contents = (r, l, q) }
  )

(*
Local Variables:
compile-command: "../mezzo persistentarray_nesting.mz"
End:
*)
