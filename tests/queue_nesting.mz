open nest

(* A variant of the FIFO queue implementation, using nesting instead
   of adoption & abandon. *)

(* A cell contains an element of type [option a], as opposed to [a].
   Indeed, extracting an element of type [a] out of a cell, when the
   type [a] is not duplicable, requires writing something in its place.
   An alternative approach would be to tag the cell itself as active
   or garbage (effectively fusing the cell with the option); this
   would save memory but would make access to the [next] field less
   convenient. *)

data mutable cell (f : value) a =
| Cell { value_: option a; next: (n: unknown | nests f (n @ cell f a)) }

(* TEMPORARY I would like the fifo object itself to adopt the cells,
   but this doesn't work, because an algebraic data type definition
   cannot refer to [this]. Instead I am forced to use a separate
   object, of type [region]. Furthermore, I am forced to use one
   field, which is a triple, whereas I would prefer to use three fields. *)

data mutable region =
  Region

data mutable fifo a =
  Empty    { contents: (f: region, length: int, ()) }
| NonEmpty { contents: (f: region, length: int, tail: unknown | nests f (tail @ cell f a)) }

val create [a] () : fifo a =
  Empty { contents = (Region, 0, ()) }

val internal_insert [a] (consumes x: a, q: fifo a, insertAtEnd: bool): () =
  let c = Cell {
    value_ = some x; next = ()
  } in
  match q with
  | Empty { contents = (r, length, ()) } ->
      c.next <- c;
      nest r; (* crazy inference! *)
      tag of q <- NonEmpty;
      q.contents <- (r, 1, c)
  | NonEmpty { contents = (r, length, tail) } ->
      focus r;
      c.next <- tail.next;
      (* [c] is now a cell, so it can be nested in [r]. *)
      nest_punched r; (* crazy inference! *)
      tail.next <- c;
      (* Because [tail.next] is [c], which is now a valid
        inhabitant of [r], we can argue that [tail] has
        type [cell r a], and give it back to [r]. *)
      defocus r;
      let length = length + 1 in
      q.contents <- (r, length, if insertAtEnd then c else tail)
  end

val insert [a] (consumes x: a, q: fifo a) : () =
  internal_insert (x, q, true)
  
val insert_at_head [a] (consumes x: a, q: fifo a) : () =
  internal_insert (x, q, false)

val retrieve [a] (q: fifo a) : option a =
  match q with
  | Empty ->
      None
  | NonEmpty { contents = (r, length, tail) } ->
      focus (* tail *) r;
      let head = tail.next in
      defocus r;
      focus [(head @ cell r a)] r;
      let x = option::force head.value_ in
      (* Write [None] in [head.value_], so we can give [head] back to [r]. *)
      head.value_ <- None;
      if head == tail then begin
        defocus r;
       tag of q <- Empty;
        q.contents <- (r, 0, ())
      end
      else begin
        let length = length - 1 in
        let new_head = head.next in
        defocus r;
        (* This fine-grained focusing and defocusing is really painful. *)
        focus [(tail @ cell r a)] r;
       tail.next <- new_head;
        defocus r;
        q.contents <- (r, length, tail)
      end; (* BUG at the merge? Fatal error: exception TypeCore.UnboundPoint *)
      some x
 end

(*
val peek [a] duplicable a => (q: fifo a) : option a =
  match q with
  | Empty -> 
      none
  | NonEmpty { tail } ->
      let head =
       taking tail from q begin
         tail.next
       end
      in
      taking head from q begin
       some head.value_
      end
  end

val length [a] (q: fifo a) : int =
  match q with
  | Empty -> 0
  | NonEmpty -> q.length
  end

(* The function [clear] doesn't type-check without the [match]
   construct. Mezzo does not allow setting an object's tag
   unless its current tag is known. *)

val clear [a] (q: fifo a) : () =
  match q with
  | Empty -> ()
  | NonEmpty ->
      tag of q <- Empty;
      q.length <- 0;
      q.tail   <- ()
  end

val rotate [a] (q: fifo a) : () =
  match q with
  | Empty ->
      ()
  | NonEmpty { tail } ->
      (* Advance the tail pointer. *)
      taking tail from q begin
       q.tail <- tail.next
      end
  end

(* In contrast with [list::fold], the function [queue::fold] cannot perform
   a strong update on the queue elements. The queue [q] adopts elements of
   type [cell a], and this cannot be changed. Thus, [queue::fold] must require
   its argument [f] to preserve the type [a] of the list element. *)

val fold [a, b] (
  q: fifo a,
  consumes accu: b,
  f: (a, consumes b) -> b
) : b =
  match q with
  | Empty ->
      accu
  | NonEmpty { tail } ->
      let rec fold (consumes accu: b, c: dynamic | q @ fifo a) : b =
       take c from q;
        let Cell { next; value_ } = c in
        let accu = f (value_, accu) in
       give c to q;
        if tail == c then
          accu
        else
          fold (accu, next)
      in
      (* Obtain the address of the first cell. *)
      let head = taking tail from q begin tail.next end in
      (* We're ready to launch the recursion. *)
      fold (accu, head)
  end

val iter [a, p : perm] (
  q: fifo a,
  f: (a | p) -> ()
| p
) : () =
  fold [a, (| p)] (q, (), fun (x:a, (| p)) : () = f x) 

val map [a, b, p : perm] (
  q: fifo a,
  f: (a | p) -> b
| p
) : fifo b =
  let q' : fifo b = create () in
  iter (q, fun (x: a | q' @ fifo b * p) : () =
    insert (f x, q')
  );
  q'

val copy [a] duplicable a => (q: fifo a): fifo a =
  map (q, fun (x: a) : a = x)

val rec work [a, p : perm] (q: fifo a, f: (a | q @ fifo a * p) -> () | p) : () =
  match retrieve q with
  | None ->
      ()
  | Some { contents = x } ->
      f x;
      work (q, f)
  end
*)
(*
Local Variables:
compile-command: "../mezzo queue_nesting.mz"
End:
*)
