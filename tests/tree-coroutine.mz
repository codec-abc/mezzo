data mutable tree a =
  Leaf
| Node { left: tree a; elem: a; right: tree a }

open channel

(* ------------------------------------------------------------------------------ *)

(* This function iterates over the tree, and submits the elements onto the
   channel [pipe]. It then waits for an acknowledgement to arrive on the
   channel [ack], and proceeds with the iteration. *)

(* The code is too simplistic, insofar as there is no way for the producer
   to signal that the iteration is finished. Maybe we should allow a channel
   to be closed, in which case further calls to [send] or [receive] would
   fail at runtime? *)

(* Unfortunately, this approach is limited to the case where [a] is duplicable,
   because we cannot express the idea that [ack] transmits [x @ a] where [x] is
   the last element that was sent via [pipe]. *)

val rec iter [a] duplicable a => (t: tree a, pipe: channel a, ack: channel bool) : bool =
  match t with
  | Leaf ->
      true
  | Node ->
      iter (t.left, pipe, ack) &&
      begin send (pipe, t.elem); receive ack end &&
      iter (t.right, pipe, ack)
  end 

(* Here is a client that receives the elements and counts them. Note that it
   has local state. *)

val count [a] (pipe: channel a, ack: channel bool) : () =
  let c = newref 0 in
  preserving c @ ref int while true do begin
    let x = receive pipe in
    incr c;
    send (ack, true)
  end
  (* Stupid. This point in the code is unreachable. *)

(* Now, combine the producer and consumer. We cheat by running the producer
   on the current thread. If we spawned a new thread, we would have to
   transmit [t @ tree a] to it, and get it back afterwards, using [join]. *)

val test [a] duplicable a => (t: tree a) : bool =
  let pipe, ack = new(), new() in
  thread::spawn (fun () : () =
    count [a] (pipe, ack)
  );
  iter (t, pipe, ack)
    (* Interesting example of a type application that is required. *)

(* ------------------------------------------------------------------------------ *)

(* Another approach, where we use a new [ack] channel at every interaction.
   This is a bit wasteful but allows us to typecheck the code even when [a]
   is not duplicable. *)

alias ack_t (p : perm) =
  channel (bool | p)

alias packet a =
  (x: a, ack_t (x @ a))

alias pipe_t a =
  channel (packet a)

(* TEMPORARY a lot of unpleasant type applications are required in the
   code that follows. *)

val send_and_wait [a] (pipe: pipe_t a, x: a) : bool =
  let ack : ack_t (x @ a) = new [(bool | x @ a)] () in
  send [packet a] (pipe, (x, ack));
  receive [(bool | x @ a)] ack

val rec iter [a] (t: tree a, pipe: pipe_t a) : bool =
  match t with
  | Leaf ->
      true
  | Node ->
      iter (t.left, pipe) &&
      send_and_wait (pipe, t.elem) &&
      iter (t.right, pipe)
  end 

(* Here is a client that receives the elements and counts them. Note that it
   has local state. *)

val count [a] (pipe: pipe_t a) : () =
  let c = newref 0 in
  preserving c @ ref int while true do begin
    let x, ack = receive [packet a] pipe in
    incr c;
    send [(bool | x @ a)] (ack, true)
  end
  (* Stupid. This point in the code is unreachable. *)

(* Now, combine the producer and consumer. We cheat by running the producer
   on the current thread. If we spawned a new thread, we would have to
   transmit [t @ tree a] to it, and get it back afterwards, using [join]. *)

val test [a] (t: tree a) : bool =
  let pipe = new() in
  thread::spawn (fun () : () =
    count [a] pipe
      (* Interesting example of a type application that is required. *)
  );
  iter (t, pipe)

(* ------------------------------------------------------------------------------ *)

(* A third approach, where [ack] is a tube and is re-used at every interaction. *)

open tube

alias ack_inlet (p : perm) =
  inlet (bool | p)

alias ack_outlet (p : perm) =
  outlet (bool | p)

alias packet a (ack : value) =
  (x: a | ack @ ack_outlet (x @ a))

alias pipe_t a (ack : value) =
  channel (packet a ack)

(* In this variant of [send_and_wait], we do not create the [ack]
   tube, which already exists. We set it up for one exchange, send
   the outlet permission via the pipe, and keep the inlet permission,
   which is used to receive. After the interaction, the tube is
   inert again. *)

val send_and_wait [a] (pipe: pipe_t a ack, ack: inert, x: a) : bool =
  (* Set up the tube for this one interaction. *)
  setup [(bool | x @ a)] ack;
  (* Send [x], together with the outlet permission for [ack], via the pipe. *)
  channel::send [packet a ack] (pipe, x);
  (* Recover the permission [x @ a] via the inlet side of [ack]. *)
  tube::receive [(bool | x @ a)] ack
  (* [ack] is now inert again. *)

val rec iter [a] (t: tree a, pipe: pipe_t a ack, ack: inert) : bool =
  match t with
  | Leaf ->
      true
  | Node ->
      iter (t.left, pipe, ack) &&
      send_and_wait (pipe, ack, t.elem) &&
      iter (t.right, pipe, ack)
  end 

(* Here is a client that receives the elements and counts them. Note that it
   has local state. *)

val count [a] (pipe: pipe_t a ack, ack: =ack) : () =
  let c = newref 0 in
  preserving c @ ref int while true do begin
    let x = channel::receive [packet a ack] pipe in
    (* We now have a permission to send on [ack]. *)
    assert ack @ outlet (bool | x @ a);
    incr c;
    tube::send [(bool | x @ a)] (ack, true)
  end
  (* Stupid. This point in the code is unreachable. *)

(* Now, combine the producer and consumer. We cheat by running the producer
   on the current thread. If we spawned a new thread, we would have to
   transmit [t @ tree a] to it, and get it back afterwards, using [join]. *)

val test [a] (t: tree a) : bool =
  (* [ack] must be allocated first, because the type of [pipe] refers to it! *)
  let ack = tube::new() in
  let pipe = channel::new() in
  thread::spawn (fun () : () =
    count [a] (pipe, ack)
      (* Interesting example of a type application that is required. *)
  );
  iter (t, pipe, ack)

(* ------------------------------------------------------------------------------ *)

(*
Local Variables:
compile-command: "../mezzo tree-coroutine.mz"
End:
*)
