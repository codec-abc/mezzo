open nest

(** A version of a mutable union-find done using nesting. *)

(** We need a top-level element that will hold the ownership for all the
 * elements of the union-find. *)
data mutable state = 
  UnionFind

(** An element in the union-find is either a [link] or a [root]. *)
data mutable content (s: value) a =
  | Link { link: element s a }
  | Root { descr: a }

(** And this is the interface that we expose to the client. I wish I had type
 * abbreviations... *)
and element (s: value) a =
  | Element { element: (element: unknown | nests s (element @ content s a)) }


(* Create a new union-find. *)
val new (): state =
  UnionFind

(* Create a new element that is meant to go in the union-find. *)
val create [a] duplicable a => (s: state, x: a): element s a =
  let e = Root { descr = x } in
  nest [(e @ content s a)] s;
  Element { element = e }

(* Find the root of an equivalence class. The reason why some instantiations are
 * inferred and some others aren't remains pretty mysterious. *)
val rec repr [a] duplicable a => (s: state, e: element s a): element s a =
  (* Give a name to e.element because we can't use field paths in anchored
   * permissions (WISH). *)
  let elt = e.element in
  (* We're about to examine [elt], so focus it. *)
  focus s;
  match elt with
  | Link { link } ->
      (* It's a link! We want to perform path compression, so we need to call
       * [repr] recursively; however, [repr] expects "s @ state", not "s @
       * punched state (elt @ content s a)". So we perform a defocus
       * operation... *)
      defocus (* [(elt @ content s a)] *) s;
      (* Interestingly enough, one can *not* write [elt.link] here, because this
       * comes *after* the call to [defocus]. Conversely, because [link] is
       * bound earlier, the type checker saves a copy of [link @ element s a].
       * *)
      let r = repr (s, link) in
      (* Let's focus again, because we need to perform a write in order to
       * perform path-compression. *)
      focus [(elt @ content s a)] s;
      (* But look! We no longer know that [elt] was in the [Link] state, so we
       * need to match again... *)
      match elt with
      | Link ->
          (* Perform the write. *)
          elt.link <- r;
          (* "Give back" [elt] to [s]. *)
          defocus (* [(elt @ content s a)] *) s;
          (* And return [r] which is the actual root. *)
          r
      | Root ->
          (* Our protocols guarantee that a re-entrant call to [repr] won't
           * modify [elt], so we can't possibly be in this case. *)
          fail
      end
  | Root ->
      (* It's a root! Nothing to do here, just [defocus] and return. *)
      defocus (* [(elt @ content s a)] *) s;
      e
  end

val unify [a] duplicable a => (s: state, x: element s a, y: element s a): () =
  if x == y then
    ()
  else begin
    (* First of all, find the roots. *)
    let x = repr (s, x) in
    let y = repr (s, y) in
    (* Then, give names to the elements. *)
    let elt_x = x.element in
    (* And get their representants. Here, we wish we could defocus both [elt_x]
     * and [elt_y] at the same time, but our axiomatization of [nest] doesn't
     * allow us to perform such an operation: this is the reason why [repr]
     * returns an [element s a] with the additional, not statically enforced
     * promise that the element in question is a root. *)
    focus [(elt_x @ content s a)] s;
    (* I WISH we could just overwrite the tag without having to match first...
     * *)
    match elt_x with
    | Link ->
        fail
    | Root ->
        tag of elt_x <- Link;
        elt_x.link <- y
    end;
    defocus (* [(elt_x @ content s a)] *) s;
  end

val find [a] duplicable a => (s: state, x: element s a): a =
  (* Find the root *)
  let r = repr (s, x) in
  (* Give a name to the element *)
  let elt = r.element in
  (* Now we need to access the contents of [elt]. Focus it. *)
  focus [(elt @ content s a)] s;
  let value_ =
    (* Again, we assert dynamically that [repr] returns a [Root], not a [Link]. *)
    match elt with
    | Root ->
        elt.descr
    | Link ->
        fail
    end
  in
  (* And once we're done looking up [elt], we give it back to [s]. *)
  defocus (* [(elt @ content s a)] *) s;
  (* [value_] has type [a] which is duplicable, so we still have "value_ @ a" at
   * that stage. As far as I know, this is the only place where we use the
   * "duplicable a"  hypothesis; I left it as a precondition on all other
   * functions to catch client code errors as early as possible. *)
  value_
