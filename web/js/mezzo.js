// Generated by js_of_ocaml 2.0+git-9a56643
(function(b){"use strict";var
xH=104,h8=254,kl=108,x_="i",yE="variable",yF=920812018,kk="Map.bal",be=16777215,b7="tyempty",xG="Unknown file extension",o9=65599,yD="All top-level types should be in known_triples by default",yC=-42,fg=115,dK=512,yB="ocamlfind",xF="\\",yA="mutable",dg=128,y_="duplicable",cu="0",e$=248,x9=" Display this list of options",y9="builtin",pl="int",x8="fd ",pw=107,y8=197,kx="unknown",kH=">",x7="parsing/Lexer.ml",pk="| ",pH=399,y6=506,y7="/home/jonathan/Code/mezzo",y5="consumes",xD=-97,xE="satisfy",b2="tyanchoredpermission",h1="Fix.ml",eq=105,kG=-49,e_=110,hP=-88,xC="ocamlbuild/my_unix.ml",o8="%S",pv=251,ce="tysingleton",er="typing/Permissions.ml",y4="affine",pj="typing/Types.ml",h7="e",pu=253,gg=969,ct="-",y3="witness",yz="perm",xB="rec",xA="Could not obtain the following permission: ",o7=" : file already exists",x6="Not in order?",pt="::",pG="explain",xz="_build",hO=101,x5="File %s does not exist",y2="do",x4="index out of bounds",bd="tyopen",kq=3654863,fd=".mz",y1="info",gf=224,x3=214,xy="\\b",h0="in",gh="type",bO=250,yy="bad tag name specification",h6=1024,x1="visit_many",x2="downto",e9="typing/KindCheck.ml",y0="\n--------------------------------\n",ge=102,ep=963043957,a3="visit",hL=-10,yx="conjunct",kj="bool",o6="\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\x03\0\x03\0\x86\0\0\0\x03\0\0\0\x86\0E\x01\0\0\xff\xff\0\0E\x01\0\0\0\0\0\0\0\0\0\0\x7f\0\x8b\0\0\0\x03\0\0\0\f\0\x03\0\xaa\0\x86\0\xaf\0\0\0\x07\0\x0b\x01E\x01\0\0\x0e\x01\r\x001\0\x05\0\n\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\x008\0v\0\x06\0\x81\0\x82\x009\0\0\0\x89\0\0\x001\0\0\x000\0\x8a\0j\0>\0\x0e\0n\0i\0\0\x001\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1e\x000\0\b\0r\0\xd1\0\xec\0\0\x01\r\x01\x1d\0\x16\0\xff\xff0\x000\0\x11\0\x15\0\x19\0 \0!\0#\0\x17\0\x1b\0\x10\0\x1f\0\x1c\0\"\0\x13\0\x18\0\x12\0\x1a\0\x14\0$\0)\0%\x000\0\t\0*\0+\0,\0-\0.\0/\0=\0U\x000\0&\0'\0'\0'\0'\0'\0'\0'\0'\0'\x001\0C\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0V\0\x8f\0\xff\xff(\0\x90\0\x91\0\x92\x007\0\x94\x007\0\x95\x000\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff0\0\x96\0\x97\0\xa1\0B\0\x9e\x005\0\x9f\x005\0\xa0\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xa5\x003\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa2\0\xa3\0\xa6\0]\0\xff\xff\x02\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xffM\0g\0l\0t\0\x84\0\x86\0\x87\0\x80\0\x8b\0\x86\0\xa4\0]\0\xab\0M\0\xa7\0\xa8\0\xa9\0\xac\0p\0\xad\0\xae\0\xd2\0\xe2\0\xd0\0\xd3\0\xd4\0;\0S\0\x86\0\xd5\0\xd6\0\xd7\0\xd8\0\xda\0\x8d\0\xdb\0]\0\xdc\0\xdd\0{\0\xde\0\xdf\0\xe0\0\x88\0_\0\xe1\0#\x01A\x01\xea\0\x9b\0\x05\x01a\x01\xfa\0\xff\xff\xfe\x009\x01=\x01_\x01M\0,\x01\\\x01X\x01\t\x01\x1d\x01L\0|\0!\x01\x12\x01K\0b\0\x13\x01U\x01V\x01W\x01x\x01Y\x01J\0\xe1\x005\x01y\x01I\0Z\x01H\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0b\0q\x01z\0[\x01@\0\x04\x01]\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\x9c\0p\x01^\x01`\x01b\x01c\x011\x01O\0O\0O\0O\0O\0O\0d\x01\x9d\0e\x01N\0N\0N\0N\0N\0N\0\xb7\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\x18\x01p\x01\xff\xff\x19\x01f\x01g\x01i\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0j\x01k\x010\x01(\x01l\x01m\x01n\x01P\0P\0P\0P\0P\0P\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0o\x01\x1b\x01\xff\xff\xff\xff\x1f\x01\x92\x01\x17\x01Q\0Q\0Q\0Q\0Q\0Q\0\\\0\x92\x01?\x01P\0P\0P\0P\0P\0P\0\xf8\0\x92\x01\xfc\0\x92\x01;\x01E\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0'\x01*\x01\xff\xff\x92\x01\x92\x01x\0\x02\x01X\0X\0X\0X\0X\0X\0\x92\x017\x01\x99\0W\0W\0W\0W\0W\0W\0\x07\x01\x92\x01\x92\x01\x92\x01\x10\x01\x92\x01Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\x003\x01X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0a\0\x89\x01\x92\x01\x92\x01\x92\x01\x88\x01\x92\x01Z\0Z\0Z\0Z\0Z\0Z\0a\0\xb3\0\x92\x01Y\0Y\0Y\0Y\0Y\0Y\0.\x01\x92\x01\x92\x01\xb4\0\x92\x01\x92\x01\xb5\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0|\x01Z\0Z\0Z\0Z\0Z\0Z\0\x92\x01\x92\x01\x15\x01\x92\x01a\0\x92\x01\x92\x01\x92\x01\x92\x01\x92\x01\x92\x01\x92\x01\x92\x01a\0\0\0\0\0\0\0a\0\0\0a\0\0\0\0\0\0\0a\0\0\0%\x01\0\0\0\0\0\0\0\0\0\0a\0\0\0\0\0\0\0a\0\0\0a\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\0\0\0\0~\x01\0\0\0\0\0\0\0\0c\0c\0c\0c\0c\0c\0a\0\0\0\0\0\0\0\0\0\0\0a\0\0\0|\x01|\x01a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xff\xff\0\0\0\0a\0\0\0a\0`\0c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0d\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\0\0\x81\x01\x81\x01\0\0\0\0\0\0\0\0e\0e\0e\0e\0e\0e\0\0\0\0\0\0\0d\0d\0d\0d\0d\0d\0\0\0\0\0\0\0\0\0\0\0\x86\x01a\0a\0a\0a\0a\0a\0a\0a\0a\0a\0\0\0e\0e\0e\0e\0e\0e\0a\0a\0a\0a\0a\0a\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\0\0\0\0\0\0\xb1\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xbc\0\0\0a\0a\0a\0a\0a\0a\0\0\0\0\0\0\0\xbf\0\0\0{\x01\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xc3\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc6\0\0\0\0\0\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xca\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xcd\0\xff\xff\xff\xff\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe2\0\0\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\0\0\0\0\0\0\xce\0\0\0\0\0\0\0\0\0\xcf\0\0\0\0\0\xe1\0\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\0\0\0\xe8\0\0\0\0\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xd9\0\0\0\0\0\0\0\0\0\0\0\xe1\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe6\0\0\0\xe6\0\0\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\0\0\xe4\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xba\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0q\x01\0\0M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01\0\0p\x01\0\0\0\0\xc1\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0p\x01\0\0\0\0\0\0\xf0\0\xc8\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\xf6\0\0\0\0\0\xf0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xee\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0E\x01F\x01\0\0\0\0E\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\x01\0\0N\x01\0\0\0\0\0\0\0\0h\x01I\x01\0\0\0\0\0\0\0\0O\x01\0\0G\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0H\x01\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\0\0\0\0\0\0\0\0\0\0P\x01w\x01\0\0w\x01\0\0Q\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\0\0J\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01S\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0R\x01\0\0\0\0s\x01\0\0\0\0T\x01\0\0\0\0u\x01\0\0u\x01\0\0K\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\0\0s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\0\0\0\0D\x01\x80\x01\x80\x01\x80\x01\x7f\x01\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\x80\x01\x7f\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\0\0\x8e\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",el="Win32",yw=813,c="",pF="arg",kF="then",x0=143,yZ=55296,ps=4298439,yY="\\t",dM=100,yv="The list of known triples is not consistent",b6="tyand",pE="dynamic",bM="normalize",cd=103,ki=-39,xx="ocamlbuild",yu=374,xw=-40,xZ="html",xY="s are",yt=1e3,h5=223,bp=".",xv="\xe2\x88\x97",gd="+",eo=65535,pD="lib/PersistentRef.ml",xt="data",xu="give",cV="resolved_datacon",xs="ocamlbuild/pathname.ml",xr="stdlib",hK="parsing/SurfaceSyntaxPrinter.ml",hZ=127,kh=-32,ek=111,pi="\x01\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x009\0<\0\0\0<\0\0\0\0\0A\0\0\0A\0\0\0\0\0F\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0T\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0^\0\0\0\0\0a\0\xff\xff\xff\xffa\0\xff\xff\xff\xff\xff\xff\xff\xffh\0\0\0\0\0\0\0\0\0m\0\0\0\0\0\0\0q\0\0\0\0\0\0\0u\0\0\0\0\0\0\0y\0\0\0\0\0\0\0\0\0\0\0~\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\x8a\0\0\0\x8e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x9a\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xb2\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xbb\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc2\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc9\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\0\0\0\0\0\0\0\xef\0\0\0\0\0\xff\xff\0\0\xf4\0\0\0\0\0\xff\xff\0\0\xf9\0\0\0\0\0\0\0\xfd\0\0\0\0\0\0\0\xff\xff\0\0\x03\x01\0\0\0\0\0\0\0\0\b\x01\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\x11\x01\0\0\0\0\0\0\0\0\x16\x01\0\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0 \x01\0\0\0\0\0\0\xff\xff\0\0&\x01\0\0\0\0\0\0\0\0+\x01\0\0\0\0\0\0/\x01\0\0\0\0\0\0\0\x004\x01\0\0\0\0\0\x008\x01\0\0\0\0\0\0<\x01\0\0\0\0\0\0@\x01\0\0\0\0\0\0C\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0y\x01}\x01\0\0\0\0\x80\x01\xff\xff\xff\xff\x80\x01\xff\xff\xff\xff\xff\xff\xff\xff\x87\x01\0\0\0\0\0\0\0\0\x8c\x01\0\0\0\0\xff\xff\0\0\x90\x01\x91\x01\x93\x01\0\0\x94\x01\x95\x01\x96\x01\x97\x01\x98\x01\x99\x01\x9a\x01\x9b\x01\x9c\x01\x9d\x01\x9e\x01\x9f\x01\xa0\x01\xa1\x01\xa2\x01\xa3\x01\xa4\x01\xa5\x01\xa6\x01\xa7\x01\xa8\x01\xa9\x01\xaa\x01\xab\x01\xac\x01\xad\x01\xae\x01\xaf\x01\xb0\x01\x92\x01",yX="Forall-L",ys=")",ph="typing/Interfaces.ml",fc="<flag,...> (idem)",yr=" is",hY="let",kE="open",cc=256,xX=721026633,kp=118,yq="alias focused a (post: perm) =\n  (x: a, osf::wand (x @ a) post)\n",xp="alias",xq="mode_constraint",df="typing/TypeCore.ml",yp="nan",yV="../",yW=65520,xW="value",pC=-982173274,xV="%.12g",yU="%s",pg="to",hX=".mzi",a2="interpreter/Interpreter.ml",dh="/",xo="s",fb=114,pB="];\n",ca="tyunknown",pA=-108,xn=-2147483648,yo="\\r",g="number",en=123,xU="/loop",xT='"',yT="prove subtyping relation:",xS="<",yn="function",kD=-169083785,b1="branch",kg="typing/FactInference.ml",xm="jsError",ym="pack",xR="--help",kw="|",h4=120,hW="..",kf="Found",pf="empty",yl="typing/ExpressionsCore.ml",pr="with",h3=117,yS="svg",kC="lib/patricia.ml",b$="tydynamic",em=126,yR="Not a term",o5="and",yk=-91,o4="P",xl="while",yj="<tag,...> (idem)",yP="begin",yQ="x",ko="if",xk="g",xQ="maximum depth exceeded, bailing out of fold",pq="fun",hJ=1073741823,pp="typing/Merge.ml",pz="%d",xj="hd",ke=" = ",xi=-38817255,bK="tyarrow",kn="'",kd="Unix",dL="int_of_string",xh="\\n",xg="exclusive",pe="from",o3="read.mll",po="engine.ml",yO=970337770,xf="!! \xe2\x98\xa0 !!",ax=-48,dJ="typing/Resugar.ml",hU=240,hV="typing/TypeChecker.ml",kB=2048,pn="assert",bL=-976970511,xe="points",xd="0x",pd="val",e8="\n",b5="tyconcrete",xc=32768,xP="menhir",pc="scanf.ml",pm="end",gc=125,b_="tyapp",km=2147483647,X=255,cU="data_type_group",kA="else",cb="tyq",xO="\\\\",bo="tybound",b4="tytuple",kz="typing/Fact.ml",xb="str.ml",yi="Impossible: expecting colon-separated strings",bP="field",ky="match",hT=-33,ac=246,yh="lexing: empty token",yN="Unix.Unix_error",xa="for",pb="-help",ff=848054398,yM=122,w$="Exists-R",xN="Add-Sub-Add",b3="tystar",yg="-where",yL=287,xM="flex",hS="corelib",w_="/bin/sh",yf="This type has kind %s, whereas a type of kind %s was expected.",cT=" not implemented",hR=", ",bN="%a",yK="./",kv="%a\n",yJ="data constructor",hQ=4096,ye="owns",pa="f",yd="take",bJ="extend",o2="\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x03\0\0\0\x86\0\xff\xff\x03\0\xff\xff\x86\0E\x01\xff\xff9\0\xff\xffE\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff}\0\x8a\0\xff\xff\0\0\xff\xff\0\0\x03\0\xa9\0\x86\0\xae\0\xff\xff\0\0\n\x01E\x01\xff\xff\f\x01\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0s\0\0\0}\0\x81\0\x05\0\xff\xff\x88\0\xff\xff&\0\xff\xff\n\0\x88\0f\0:\0\0\0k\0f\0\xff\xff\x0b\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1d\0&\0\0\0o\0\xd0\0\xe9\0\xff\0\f\x01\x0f\0\x11\0<\0\x0b\0\n\0\0\0\x14\0\x18\0\x1f\0 \0\"\0\x16\0\x1a\0\0\0\x0e\0\x1b\0!\0\x12\0\x17\0\0\0\x10\0\x13\0#\0(\0$\0&\0\0\0)\0*\0+\0,\0-\0.\0:\0R\0\x0b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0'\0?\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0U\0\x8c\0<\0\r\0\x8f\0\x90\0\x91\x000\0\x93\x000\0\x94\0'\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0A\0'\0\x95\0\x96\0\x9c\0?\0\x9d\x003\0\x9e\x003\0\x9f\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\x9b\x002\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa1\0\xa2\0\x9b\0[\0A\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x009\0D\0f\0k\0s\0\x83\0\x85\0\x85\0}\0\x8a\0\x85\0\xa3\0^\0\xa5\0D\0\xa6\0\xa7\0\xa8\0\xab\0o\0\xac\0\xad\0\xce\0\xcb\0\xcf\0\xd2\0\xd3\0:\0R\0\x85\0\xd4\0\xd5\0\xd6\0\xd7\0\xd9\0\x8c\0\xda\0a\0\xdb\0\xdc\0w\0\xdd\0\xde\0\xdf\0\x85\0[\0\xcb\0\"\x01>\x01\xe9\0\x98\0\x01\x01P\x01\xf7\0<\0\xfb\x006\x01:\x01Q\x01D\0)\x01R\x01S\x01\x06\x01\x1a\x01D\0w\0\x1e\x01\x0f\x01D\0^\0\x0f\x01T\x01U\x01V\x01G\x01X\x01D\0\xcb\x002\x01G\x01D\0Y\x01D\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0a\0L\x01w\0Z\x01?\0\x01\x01\\\x01G\0G\0G\0G\0G\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\x98\0L\x01]\x01_\x01a\x01b\x01-\x01N\0N\0N\0N\0N\0N\0c\x01\x98\0d\x01G\0G\0G\0G\0G\0G\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\x14\x01L\x01A\0\x14\x01e\x01f\x01h\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0i\x01j\x01-\x01$\x01k\x01l\x01m\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0n\x01\x1a\x01y\x01\x8f\x01\x1e\x01\x90\x01\x14\x01P\0P\0P\0P\0P\0P\0[\0\x91\x01>\x01O\0O\0O\0O\0O\0O\0\xf7\0\x93\x01\xfb\0\x94\x01:\x01D\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0^\0P\0P\0P\0P\0P\0P\0V\0V\0V\0V\0V\0V\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0$\x01)\x01a\0\x95\x01\x96\x01w\0\x01\x01W\0W\0W\0W\0W\0W\0\x97\x016\x01\x98\0V\0V\0V\0V\0V\0V\0\x06\x01\x98\x01\x99\x01\x9a\x01\x0f\x01\x9b\x01X\0X\0X\0X\0X\0X\0X\0X\0X\0X\x002\x01W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0_\0\x85\x01\x9c\x01\x9d\x01\x9e\x01\x85\x01\x9f\x01Y\0Y\0Y\0Y\0Y\0Y\0_\0\xb0\0\xa0\x01X\0X\0X\0X\0X\0X\0-\x01\xa1\x01\xa2\x01\xb0\0\xa3\x01\xa4\x01\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0z\x01Y\0Y\0Y\0Y\0Y\0Y\0\xa5\x01\xa6\x01\x14\x01\xa7\x01b\0\xa8\x01\xa9\x01\xaa\x01\xab\x01\xac\x01\xad\x01\xae\x01\xaf\x01_\0\xff\xff\xff\xff\xff\xffb\0\xff\xff_\0\xff\xff\xff\xff\xff\xff_\0\xff\xff$\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff_\0\xff\xff\xff\xff\xff\xff_\0\xff\xff_\0_\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0\xff\xff\xff\xffz\x01\xff\xff\xff\xff\xff\xff\xff\xff`\0`\0`\0`\0`\0`\0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffb\0\xff\xff}\x01\x80\x01b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffb\0y\x01\xff\xff\xff\xffb\0\xff\xffb\0b\0`\0`\0`\0`\0`\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffc\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xff\xff}\x01\x80\x01\xff\xff\xff\xff\xff\xff\xff\xffd\0d\0d\0d\0d\0d\0\xff\xff\xff\xff\xff\xffc\0c\0c\0c\0c\0c\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x85\x01e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xff\xffd\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xff\xff\xff\xff\xff\xff\xb0\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb9\0\xff\xffe\0e\0e\0e\0e\0e\0\xff\xff\xff\xff\xff\xff\xb9\0\xff\xffz\x01\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xc0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc0\0\xff\xff\xff\xff\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc7\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xc7\0}\x01\x80\x01\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xcc\0\xff\xff\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xff\xff\xff\xff\xff\xff\xc7\0\xff\xff\xff\xff\xff\xff\xff\xff\xc7\0\xff\xff\xff\xff\xcc\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xe1\0\xff\xff\xe1\0\xff\xff\xff\xff\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xcd\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe4\0\xff\xff\xe4\0\xff\xff\xe3\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xff\xff\xe3\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xb9\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\0\xff\xffM\x01\xff\xffM\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01\xff\xffM\x01\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0M\x01\xff\xff\xff\xff\xff\xff\xed\0\xc7\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xf2\0\xff\xff\xff\xff\xf0\0\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xed\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0B\x01B\x01\xff\xff\xff\xffB\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xffO\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01p\x01\xff\xffp\x01\xff\xffB\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01\xff\xff\xff\xffB\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xff\xff\xffr\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xffs\x01\xff\xffs\x01\xff\xffB\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\xff\xffr\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01\xff\xff~\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\x81\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01~\x01\xff\xff\xff\xffB\x01~\x01\x81\x01~\x01~\x01\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\x81\x01\x81\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xff\xff\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",xL="A flexible variable must refer to a type defined in the top-level scope, we don't know how to treat flexible variables with kind other than type yet.",fe=124,ya=252,yb="...",yc="(* The type [pool a] is the type of a generic adopter, so to speak.\n   It is able to adopt objects of type [a], for an arbitrary (but,\n   for each pool, fixed) exclusive type [a]. *)\n\ndata mutable pool a =\n  Pool adopts a\n\n",yI="?",h2="false",o1="\0\0\xec\xff\xed\xff\x03\0\xef\xff\x10\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\0\0\x1f\0\xf9\xffU\0\x01\0\0\0\0\0\x01\0\0\0\x01\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x01\0\x04\0\xfd\xff\x0b\0\xfc\xff\x03\0\x01\0\x03\0\x02\0\x03\0\0\0\xfb\xff\x15\0a\0\n\0\x16\0\x14\0\x10\0\x16\0\f\0\b\0\xfa\xffw\0\x81\0\x8b\0\xa1\0\xab\0\xb5\0\xc1\0\xd1\0\xf0\xff\x0b\0&\0\xfc\xffA\0\xfe\xff\xff\xffn\0\xfc\xff\xa3\0\xfe\xff\xff\xff\xea\0\xf7\xff\xf8\xff0\x01\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xffG\x01~\x01\x95\x01\xf9\xff'\0\xfd\xff\xfe\xff&\0\xbb\x01\xd2\x01\xf8\x01\x0f\x02\xff\xff\xdc\0\xfd\xff\xff\xff\xf5\0'\x02m\x02\x0e\x01X\x02\xa4\x02\xbb\x02\xe1\x02\r\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\x0e\0\xfd\xff\xfe\xff\xff\xff\x1e\0\xfd\xff\xfe\xff\xff\xff\x0f\0\xfd\xff\xfe\xff\xff\xff\x11\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\x13\0\xfc\xff\xfd\xff\xfe\xff\x0f\0\xff\xff\x10\0\xff\xff\b\x01\x05\0\xfd\xff\x17\0\xfe\xff\x14\0\xff\xff.\0\xfd\xff\xfe\xff*\x004\x005\0\xff\xff5\x000\0[\0\\\0\xff\xff\x1b\x01\xfa\xff\xfb\xff\x89\0h\0Y\0X\0j\0\xff\xff\x8f\0\x89\0\xb1\0\xfe\xff\xb7\0\xa8\0\xa6\0\xb7\0\x02\0\xfd\xff\xb1\0\xac\0\xbb\0\x04\0\xfc\xff5\x02\xfb\xff\xfc\xff\xfd\xffg\x01\xff\xff\xf8\x02\xfe\xff\x06\x03\x1e\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff(\x032\x03J\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff=\x03T\x03l\x03\xf9\xff\xfa\xff\xfb\xff\xf4\0x\x03\x8e\x03\xb3\0\xc2\0\x0f\0\xff\xff\xbe\0\xbc\0\xbb\0\xc1\0\xb7\0\xb3\0\xfe\xff\xbf\0\xc9\0\xc8\0\xc4\0\xcb\0\xc1\0\xbd\0\xfd\xff\x9d\x03_\x03\xae\x03\xc4\x03\xce\x03\xd8\x03\xe4\x03\xef\x03<\0\xfd\xff\xfe\xff\xff\xff\f\x04\xfc\xff\xfd\xffW\x04\xff\xff\x91\x04\xfc\xff\xfd\xff\xdd\x04\xff\xff\xe5\0\xfd\xff\xfe\xff\xff\xff\xe7\0\xfd\xff\xfe\xff\xff\xff\x02\0\xff\xff\x12\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\"\x01\xfd\xff\xfe\xff\xff\xff\0\0\xff\xff\x03\0\xfe\xff\xff\xff&\x01\xfc\xff\xfd\xff\xfe\xff\xff\xffx\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\xd0\0\xfd\xff\xfe\xff\xff\xff\xd3\0\xfd\xff\xfe\xff\xff\xff\xbd\0\xff\xff\x8f\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\r\x01\xfd\xff\xfe\xff\xff\xff_\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff2\x01\xfd\xff\xfe\xff\xff\xff\x1a\x01\xfd\xff\xfe\xff\xff\xff\xe9\0\xfd\xff\xfe\xff\xff\xff\xde\0\xfd\xff\xfe\xff\xff\xffO\x05\xed\xff\xee\xff\n\0\xf0\xff,\x01\xf3\xff\xf4\xff\xf5\xff\xf6\xff=\x01\x02\x04\xf9\xff-\x05\xd1\0\xe4\0\xd3\0\xe8\0\xe1\0\xdf\0\xf0\0\xff\xff\xeb\0\xea\0\b\x01\xfe\xff\x04\x01\x17\x01\xfd\xff6\x01\xfc\xff\x1f\x01\x1d\x01 \x01'\x011\x01-\x01\xfb\xff9\x01R\x01P\x01N\x01T\x01J\x01V\x01\xfa\xffn\x05\f\x04{\x05\x9b\x05\xa5\x05\xb1\x05\xbb\x05\xc5\x05\xf1\xff\xc7\x01M\x02\xfd\xff\xff\xff\x9a\x02\xde\x05\xd1\x05\x9b\x02\xef\x055\x06L\x06r\x06\x10\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x98\x06\xfc\xff\xfd\xff\xe3\x06\xff\xff\xd2\0\xd4\0\xdd\0\xff\xff\xe6\0\xe8\0\x0f\x01\x10\x01\x19\x01#\x01$\x01%\x01'\x01K\x01L\x01M\x01O\x01X\x01`\x01a\x01c\x01d\x01v\x01w\x01y\x01{\x01|\x01}\x01~\x01\x7f\x01\x80\x01\x81\x01\x82\x01\0\0",fa=923236811,yH=".opt",b9=" ",xK=0.001,b8="tybar",yG=202,hN=192,ku=116,w8="abstract",w9="stream.ml",xJ="fail",o$="\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\b\0\xff\xff\b\0\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",kt="typing/Expressions.ml",w7="typing/DerivationPrinter.ml",ks="Set.bal",py="_",x$="()",px="PPrintEngine.ml",o_="as",xI="adopts",hM="true",kr="typing/TransSurface.ml",aiE=b.unix_set_close_on_exec!==undefined?b.unix_set_close_on_exec:function(){aA("unix_set_close_on_exec"+cT)},zy=b.unix_pipe!==undefined?b.unix_pipe:function(){aA("unix_pipe"+cT)},aiD=b.unix_isatty!==undefined?b.unix_isatty:function(){aA("unix_isatty"+cT)},zx=b.unix_fork!==undefined?b.unix_fork:function(){aA("unix_fork"+cT)},aiB=b.unix_execvp!==undefined?b.unix_execvp:function(){aA("unix_execvp"+cT)},aiA=b.unix_execv!==undefined?b.unix_execv:function(){aA("unix_execv"+cT)},zw=b.unix_dup2!==undefined?b.unix_dup2:function(){aA("unix_dup2"+cT)},gl=b.unix_close!==undefined?b.unix_close:function(){aA("unix_close"+cT)},aiz=b.re_search_forward!==undefined?b.re_search_forward:function(){aA("re_search_forward"+cT)},aiy=b.re_replacement_text!==undefined?b.re_replacement_text:function(){aA("re_replacement_text"+cT)},zu=b.caml_sys_system_command!==undefined?b.caml_sys_system_command:function(){aA("caml_sys_system_command"+cT)};function
zp(a,b){throw[0,a,b]}function
pS(a){if(a.charCodeAt(a.length-1)==10)a=a.substr(0,a.length-1);var
c=b.console;c&&c.error&&c.error(a)}var
aG=[0];function
ia(a,b){if(!a)return c;if(a&1)return ia(a-1,b)+b;var
d=ia(a>>1,b);return d+d}function
aS(a){if(a!=null){this.bytes=this.fullBytes=a;this.last=this.len=a.length}}function
zv(){zp(aG[4],new
aS(x4))}aS.prototype={string:null,bytes:null,fullBytes:null,array:null,len:null,last:0,toJsString:function(){var
a=this.getFullBytes();try{return this.string=decodeURIComponent(escape(a))}catch(f){pS('MlString.toJsString: wrong encoding for "%s" ',a);return a}},toBytes:function(){if(this.string!=null)try{var
a=unescape(encodeURIComponent(this.string))}catch(f){pS('MlString.toBytes: wrong encoding for "%s" ',this.string);var
a=this.string}else{var
a=c,d=this.array,e=d.length;for(var
b=0;b<e;b++)a+=String.fromCharCode(d[b])}this.bytes=this.fullBytes=a;this.last=this.len=a.length;return a},getBytes:function(){var
a=this.bytes;if(a==null)a=this.toBytes();return a},getFullBytes:function(){var
a=this.fullBytes;if(a!==null)return a;a=this.bytes;if(a==null)a=this.toBytes();if(this.last<this.len){this.bytes=a+=ia(this.len-this.last,"\0");this.last=this.len}this.fullBytes=a;return a},toArray:function(){var
c=this.bytes;if(c==null)c=this.toBytes();var
b=[],d=this.last;for(var
a=0;a<d;a++)b[a]=c.charCodeAt(a);for(d=this.len;a<d;a++)b[a]=0;this.string=this.bytes=this.fullBytes=null;this.last=this.len;this.array=b;return b},getArray:function(){var
a=this.array;if(!a)a=this.toArray();return a},getLen:function(){var
a=this.len;if(a!==null)return a;this.toBytes();return this.len},toString:function(){var
a=this.string;return a?a:this.toJsString()},valueOf:function(){var
a=this.string;return a?a:this.toJsString()},blitToArray:function(a,b,c,d){var
g=this.array;if(g)if(c<=a)for(var
e=0;e<d;e++)b[c+e]=g[a+e];else
for(var
e=d-1;e>=0;e--)b[c+e]=g[a+e];else{var
f=this.bytes;if(f==null)f=this.toBytes();var
h=this.last-a;if(d<=h)for(var
e=0;e<d;e++)b[c+e]=f.charCodeAt(a+e);else{for(var
e=0;e<h;e++)b[c+e]=f.charCodeAt(a+e);for(;e<d;e++)b[c+e]=0}}},get:function(a){var
c=this.array;if(c)return c[a];var
b=this.bytes;if(b==null)b=this.toBytes();return a<this.last?b.charCodeAt(a):0},safeGet:function(a){if(this.len==null)this.toBytes();if(a<0||a>=this.len)zv();return this.get(a)},set:function(a,b){var
c=this.array;if(!c){if(this.last==a){this.bytes+=String.fromCharCode(b&X);this.last++;return 0}c=this.toArray()}else
if(this.bytes!=null)this.bytes=this.fullBytes=this.string=null;c[a]=b&X;return 0},safeSet:function(a,b){if(this.len==null)this.toBytes();if(a<0||a>=this.len)zv();this.set(a,b)},fill:function(a,b,c){if(a>=this.last&&this.last&&c==0)return;var
d=this.array;if(!d)d=this.toArray();else
if(this.bytes!=null)this.bytes=this.fullBytes=this.string=null;var
f=a+b;for(var
e=a;e<f;e++)d[e]=c},compare:function(a){if(this.string!=null&&a.string!=null){if(this.string<a.string)return-1;if(this.string>a.string)return 1;return 0}var
b=this.getFullBytes(),c=a.getFullBytes();if(b<c)return-1;if(b>c)return 1;return 0},equal:function(a){if(this.string!=null&&a.string!=null)return this.string==a.string;return this.getFullBytes()==a.getFullBytes()},lessThan:function(a){if(this.string!=null&&a.string!=null)return this.string<a.string;return this.getFullBytes()<a.getFullBytes()},lessEqual:function(a){if(this.string!=null&&a.string!=null)return this.string<=a.string;return this.getFullBytes()<=a.getFullBytes()}};function
bq(a){this.string=a}bq.prototype=new
aS();function
ahf(a,b){return a.concat(b.slice(1))}function
ahg(a,b,c,d,e){if(d<=b)for(var
f=1;f<=e;f++)c[d+f]=a[b+f];else
for(var
f=e;f>=1;f--)c[d+f]=a[b+f]}function
ahh(a){var
c=[0];while(a!==0){var
d=a[1];for(var
b=1;b<d.length;b++)c.push(d[b]);a=a[2]}return c}function
pQ(a,b){zp(a,new
bq(b))}function
h9(a){pQ(aG[4],a)}function
kJ(){h9(x4)}function
ahi(a,b){if(b<0||b>=a.length-1)kJ();return a[b+1]}function
ahj(a,b,c){if(b<0||b>=a.length-1)kJ();a[b+1]=c;return 0}function
ahk(a,b,c){return[0].concat(a.slice(b+1,b+1+c))}function
pI(a,b,c,d,e){if(e===0)return;if(d===c.last&&c.bytes!=null){var
f=a.bytes;if(f==null)f=a.toBytes();if(b>0||a.last>e)f=f.slice(b,b+e);c.bytes+=f;c.last+=f.length;return}var
g=c.array;if(!g)g=c.toArray();else
c.bytes=c.string=null;a.blitToArray(b,g,d,e)}function
br(c,b){if(c.fun)return br(c.fun,b);var
a=c.length,d=a-b.length;if(d==0)return c.apply(null,b);else
if(d<0)return br(c.apply(null,b.slice(0,a)),b.slice(a));else
return function(a){return br(c,b.concat([a]))}}function
ahl(a){if(isFinite(a)){if(Math.abs(a)>=2.22507385850720138e-308)return 0;if(a!=0)return 1;return 2}return isNaN(a)?4:3}function
ahA(a,b){var
c=a[3]<<16,d=b[3]<<16;if(c>d)return 1;if(c<d)return-1;if(a[2]>b[2])return 1;if(a[2]<b[2])return-1;if(a[1]>b[1])return 1;if(a[1]<b[1])return-1;return 0}function
zi(a,b){if(a<b)return-1;if(a==b)return 0;return 1}function
gj(a,b,c){var
e=[];for(;;){if(!(c&&a===b))if(a
instanceof
aS)if(b
instanceof
aS){if(a!==b){var
d=a.compare(b);if(d!=0)return d}}else
return 1;else
if(a
instanceof
Array&&a[0]===(a[0]|0)){var
f=a[0];if(f===h8)f=0;if(f===bO){a=a[1];continue}else
if(b
instanceof
Array&&b[0]===(b[0]|0)){var
h=b[0];if(h===h8)h=0;if(h===bO){b=b[1];continue}else
if(f!=h)return f<h?-1:1;else
switch(f){case
e$:var
d=zi(a[2],b[2]);if(d!=0)return d;break;case
pv:h9("equal: abstract value");case
X:var
d=ahA(a,b);if(d!=0)return d;break;default:if(a.length!=b.length)return a.length<b.length?-1:1;if(a.length>1)e.push(a,b,1)}}else
return 1}else
if(b
instanceof
aS||b
instanceof
Array&&b[0]===(b[0]|0))return-1;else
if(typeof
a!=g&&a&&a.compare)return a.compare(b,c);else{if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!c)return NaN;if(a==a)return 1;if(b==b)return-1}}if(e.length==0)return 0;var
i=e.pop();b=e.pop();a=e.pop();if(i+1<a.length)e.push(a,b,i+1);a=a[i];b=b[i]}}function
ahm(a,b){return gj(a,b,true)}function
y$(a){this.bytes=c;this.len=a}y$.prototype=new
aS();function
za(a){if(a<0)h9("String.create");return new
y$(a)}function
pP(a){throw[0,a]}function
zq(){pP(aG[6])}function
ahn(a,b){if(b==0)zq();return a/b|0}function
aho(a,b){return+(gj(a,b,false)==0)}function
aA(a){pQ(aG[3],a)}function
ahp(a,b,c,d){a.fill(b,c,d)}function
ahq(a){var
b;a=a.getFullBytes();b=+a;if(a.length>0&&b===b)return b;a=a.replace(/_/g,c);b=+a;if(a.length>0&&b===b||/^[+-]?nan$/i.test(a))return b;if(/^ *0x[0-9a-f_]+p[+-]?[0-9_]+/i.test(a)){var
d=a.indexOf("p");d=d==-1?a.indexOf(o4):d;var
e=+a.substring(d+1);b=+a.substring(0,d);return b*Math.pow(2,e)}aA("float_of_string")}function
pO(a){a=a.toString();var
e=a.length;if(e>31)h9("format_int: format too long");var
b={justify:gd,signstyle:ct,filler:b9,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:pa};for(var
d=0;d<e;d++){var
c=a.charAt(d);switch(c){case
ct:b.justify=ct;break;case
gd:case
b9:b.signstyle=c;break;case
cu:b.filler=cu;break;case"#":b.alternate=true;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":b.width=0;while(c=a.charCodeAt(d)-48,c>=0&&c<=9){b.width=b.width*10+c;d++}d--;break;case
bp:b.prec=0;d++;while(c=a.charCodeAt(d)-48,c>=0&&c<=9){b.prec=b.prec*10+c;d++}d--;case"d":case
x_:b.signedconv=true;case"u":b.base=10;break;case
yQ:b.base=16;break;case"X":b.base=16;b.uppercase=true;break;case"o":b.base=8;break;case
h7:case
pa:case
xk:b.signedconv=true;b.conv=c;break;case"E":case"F":case"G":b.signedconv=true;b.uppercase=true;b.conv=c.toLowerCase();break}}return b}function
pK(a,b){if(a.uppercase)b=b.toUpperCase();var
f=b.length;if(a.signedconv&&(a.sign<0||a.signstyle!=ct))f++;if(a.alternate){if(a.base==8)f+=1;if(a.base==16)f+=2}var
d=c;if(a.justify==gd&&a.filler==b9)for(var
e=f;e<a.width;e++)d+=b9;if(a.signedconv)if(a.sign<0)d+=ct;else
if(a.signstyle!=ct)d+=a.signstyle;if(a.alternate&&a.base==8)d+=cu;if(a.alternate&&a.base==16)d+=xd;if(a.justify==gd&&a.filler==cu)for(var
e=f;e<a.width;e++)d+=cu;d+=b;if(a.justify==ct)for(var
e=f;e<a.width;e++)d+=b9;return new
bq(d)}function
ahr(a,b){var
c,f=pO(a),e=f.prec<0?6:f.prec;if(b<0){f.sign=-1;b=-b}if(isNaN(b)){c=yp;f.filler=b9}else
if(!isFinite(b)){c="inf";f.filler=b9}else
switch(f.conv){case
h7:var
c=b.toExponential(e),d=c.length;if(c.charAt(d-3)==h7)c=c.slice(0,d-1)+cu+c.slice(d-1);break;case
pa:c=b.toFixed(e);break;case
xk:e=e?e:1;c=b.toExponential(e-1);var
i=c.indexOf(h7),h=+c.slice(i+1);if(h<-4||b.toFixed(0).length>e){var
d=i-1;while(c.charAt(d)==cu)d--;if(c.charAt(d)==bp)d--;c=c.slice(0,d+1)+c.slice(i);d=c.length;if(c.charAt(d-3)==h7)c=c.slice(0,d-1)+cu+c.slice(d-1);break}else{var
g=e;if(h<0){g-=h+1;c=b.toFixed(g)}else
while(c=b.toFixed(g),c.length>e+1)g--;if(g){var
d=c.length-1;while(c.charAt(d)==cu)d--;if(c.charAt(d)==bp)d--;c=c.slice(0,d+1)}}break}return pK(f,c)}function
ahs(a,b){if(a.toString()==pz)return new
bq(c+b);var
d=pO(a);if(b<0)if(d.signedconv){d.sign=-1;b=-b}else
b>>>=0;var
e=b.toString(d.base);if(d.prec>=0){d.filler=b9;var
f=d.prec-e.length;if(f>0)e=ia(f,cu)+e}return pK(d,e)}function
zo(){pP(aG[7])}function
kI(a){var
b=a.length;this.array=a;this.len=this.last=b}kI.prototype=new
aS();function
es(){this.content={}}es.prototype={exists:function(a){return this.content[a]?1:0},mk:function(a,b){this.content[a]=b},get:function(a){return this.content[a]},list:function(){var
a=[];for(var
b
in
this.content)a.push(b);return a},remove:function(a){delete
this.content[a]}};var
kO=new
es();kO.mk(c,new
es());function
cv(a){pQ(aG[2],a)}function
kN(a){a=a
instanceof
aS?a.toString():a;cv(a+": No such file or directory")}function
gk(a){var
b=kO;for(var
c=0;c<a.length;c++){if(!(b.exists&&b.exists(a[c])))kN(a.orig);b=b.get(a[c])}return b}var
pJ=dh;function
et(a){a=a
instanceof
aS?a.toString():a;if(a.charCodeAt(0)!=47)a=pJ+a;var
e=a.split(dh),b=[];for(var
d=0;d<e.length;d++)switch(e[d]){case
hW:if(b.length>1)b.pop();break;case
bp:case
c:if(b.length==0)b.push(c);break;default:b.push(e[d]);break}b.orig=a;return b}function
gi(a){this.data=a}gi.prototype={content:function(){return this.data},truncate:function(){this.data.length=0}};function
aht(a){var
c=et(a),b=gk(c);if(b
instanceof
gi)return new
kI(b.content());zo()}function
zb(a,b){var
e=et(a),c=kO;for(var
f=0;f<e.length-1;f++){var
d=e[f];if(!c.exists(d))c.mk(d,new
es());c=c.get(d);if(!(c
instanceof
es))cv(e.orig+o7)}var
d=e[e.length-1];if(c.exists(d))cv(e.orig+o7);if(b
instanceof
es)c.mk(d,b);else
if(b
instanceof
gi)c.mk(d,b);else
if(b
instanceof
aS)c.mk(d,new
gi(b.getArray()));else
if(b
instanceof
Array)c.mk(d,new
gi(b));else
if(b.toString)c.mk(d,new
gi(new
aS(b.toString()).getArray()));else
h9("caml_fs_register")}var
kL=[];function
ahu(a,b,c){var
e=a[1],i=kL[c];if(i===null)for(var
h=kL.length;h<c;h++)kL[h]=0;else
if(e[i]===b)return e[i-1];var
d=3,g=e[1]*2+1,f;while(d<g){f=d+g>>1|1;if(b<e[f+1])g=f-2;else
d=f}kL[c]=d+1;return b==e[d+1]?e[d]:0}function
ahv(a,b){return+(gj(a,b,false)>=0)}function
zc(a){if(!isFinite(a)){if(isNaN(a))return[X,1,0,yW];return a>0?[X,0,0,32752]:[X,0,0,yW]}var
f=a>=0?0:xc;if(f)a=-a;var
b=Math.floor(Math.LOG2E*Math.log(a))+1023;if(b<=0){b=0;a/=Math.pow(2,-1026)}else{a/=Math.pow(2,b-1027);if(a<16){a*=2;b-=1}if(b==0)a/=2}var
d=Math.pow(2,24),c=a|0;a=(a-c)*d;var
e=a|0;a=(a-e)*d;var
g=a|0;c=c&15|f|b<<4;return[X,g,e,c]}if(!Math.imul)Math.imul=function(a,b){return((a>>16)*b<<16)+(a&eo)*b|0};var
h$=Math.imul,ahw=function(){var
p=cc;function
c(a,b){return a<<b|a>>>32-b}function
g(a,b){b=h$(b,3432918353);b=c(b,15);b=h$(b,461845907);a^=b;a=c(a,13);return(a*5|0)+3864292196|0}function
s(a){a^=a>>>16;a=h$(a,2246822507);a^=a>>>13;a=h$(a,3266489909);a^=a>>>16;return a}function
t(a,b){var
d=b[1]|b[2]<<24,c=b[2]>>>8|b[3]<<16;a=g(a,d);a=g(a,c);return a}function
u(a,b){var
d=b[1]|b[2]<<24,c=b[2]>>>8|b[3]<<16;a=g(a,c^d);return a}function
w(a,b){var
e=b.length,c,d;for(c=0;c+4<=e;c+=4){d=b.charCodeAt(c)|b.charCodeAt(c+1)<<8|b.charCodeAt(c+2)<<16|b.charCodeAt(c+3)<<24;a=g(a,d)}d=0;switch(e&3){case
3:d=b.charCodeAt(c+2)<<16;case
2:d|=b.charCodeAt(c+1)<<8;case
1:d|=b.charCodeAt(c);a=g(a,d)}a^=e;return a}function
v(a,b){var
e=b.length,c,d;for(c=0;c+4<=e;c+=4){d=b[c]|b[c+1]<<8|b[c+2]<<16|b[c+3]<<24;a=g(a,d)}d=0;switch(e&3){case
3:d=b[c+2]<<16;case
2:d|=b[c+1]<<8;case
1:d|=b[c];a=g(a,d)}a^=e;return a}return function(a,b,c,d){var
k,l,m,i,h,f,e,j,o;i=b;if(i<0||i>p)i=p;h=a;f=c;k=[d];l=0;m=1;while(l<m&&h>0){e=k[l++];if(e
instanceof
Array&&e[0]===(e[0]|0))switch(e[0]){case
e$:f=g(f,e[2]);h--;break;case
bO:k[--l]=e[1];break;case
X:f=u(f,e);h--;break;default:var
r=e.length-1<<10|e[0];f=g(f,r);for(j=1,o=e.length;j<o;j++){if(m>=i)break;k[m++]=e[j]}break}else
if(e
instanceof
aS){var
n=e.array;if(n)f=v(f,n);else{var
q=e.getFullBytes();f=w(f,q)}h--;break}else
if(e===(e|0)){f=g(f,e+e+1);h--}else
if(e===+e){f=t(f,zc(e));h--;break}}f=s(f);return f&hJ}}();function
ahH(a){return[a[3]>>8,a[3]&X,a[2]>>16,a[2]>>8&X,a[2]&X,a[1]>>16,a[1]>>8&X,a[1]&X]}function
ahx(e,b,c){var
d=0;function
f(a){b--;if(e<0||b<0)return;if(a
instanceof
Array&&a[0]===(a[0]|0))switch(a[0]){case
e$:e--;d=d*o9+a[2]|0;break;case
bO:b++;f(a);break;case
X:e--;d=d*o9+a[1]+(a[2]<<24)|0;break;default:e--;d=d*19+a[0]|0;for(var
c=a.length-1;c>0;c--)f(a[c])}else
if(a
instanceof
aS){e--;var
g=a.array,h=a.getLen();if(g)for(var
c=0;c<h;c++)d=d*19+g[c]|0;else{var
i=a.getFullBytes();for(var
c=0;c<h;c++)d=d*19+i.charCodeAt(c)|0}}else
if(a===(a|0)){e--;d=d*o9+a|0}else
if(a===+a){e--;var
j=ahH(zc(a));for(var
c=7;c>=0;c--)d=d*19+j[c]|0}}f(c);return d&hJ}function
ahD(a){return(a[3]|a[2]|a[1])==0}function
kK(a){return[X,a&be,a>>24&be,a>>31&eo]}function
ahG(a,b){var
c=a[1]-b[1],d=a[2]-b[2]+(c>>24),e=a[3]-b[3]+(d>>24);return[X,c&be,d&be,e&eo]}function
pL(a,b){if(a[3]>b[3])return 1;if(a[3]<b[3])return-1;if(a[2]>b[2])return 1;if(a[2]<b[2])return-1;if(a[1]>b[1])return 1;if(a[1]<b[1])return-1;return 0}function
zd(a){a[3]=a[3]<<1|a[2]>>23;a[2]=(a[2]<<1|a[1]>>23)&be;a[1]=a[1]<<1&be}function
ahE(a){a[1]=(a[1]>>>1|a[2]<<23)&be;a[2]=(a[2]>>>1|a[3]<<23)&be;a[3]=a[3]>>>1}function
zh(a,b){var
e=0,d=a.slice(),c=b.slice(),f=[X,0,0,0];while(pL(d,c)>0){e++;zd(c)}while(e>=0){e--;zd(f);if(pL(d,c)>=0){f[1]++;d=ahG(d,c)}ahE(c)}return[0,f,d]}function
ahI(a){return a[1]|a[2]<<24}function
ahC(a){return a[3]<<16<0}function
ze(a){var
b=-a[1],c=-a[2]+(b>>24),d=-a[3]+(c>>24);return[X,b&be,c&be,d&eo]}function
ahB(a,b){var
d=pO(a);if(d.signedconv&&ahC(b)){d.sign=-1;b=ze(b)}var
e=c,i=kK(d.base),h="0123456789abcdef";do{var
g=zh(b,i);b=g[1];e=h.charAt(ahI(g[2]))+e}while(!ahD(b));if(d.prec>=0){d.filler=b9;var
f=d.prec-e.length;if(f>0)e=ia(f,cu)+e}return pK(d,e)}function
ahz(a,b){var
c=a[1]+b[1],d=a[2]+b[2]+(c>>24),e=a[3]+b[3]+(d>>24);return[X,c&be,d&be,e&eo]}var
zg=Math.pow(2,-24);function
ahF(a,b){var
c=a[1]*b[1],d=(c*zg|0)+a[2]*b[1]+a[1]*b[2],e=(d*zg|0)+a[3]*b[1]+a[2]*b[2]+a[1]*b[3];return[X,c&be,d&be,e&eo]}function
pM(a,b){return pL(a,b)<0}function
zn(a){var
b=0,c=10,d=a.get(0)==45?(b++,-1):1;if(a.get(b)==48)switch(a.get(b+1)){case
h4:case
88:c=16;b+=2;break;case
ek:case
79:c=8;b+=2;break;case
98:case
66:c=2;b+=2;break}return[b,d,c]}function
kM(a){if(a>=48&&a<=57)return a-48;if(a>=65&&a<=90)return a-55;if(a>=97&&a<=yM)return a-87;return-1}function
zf(a){var
f=zn(a),e=f[0],i=f[1],g=f[2],h=kK(g),j=zh([X,be,268435455,eo],h)[1],d=a.get(e),b=kM(d);if(b<0||b>=g)aA(dL);var
c=kK(b);for(;;){e++;d=a.get(e);if(d==95)continue;b=kM(d);if(b<0||b>=g)break;if(pM(j,c))aA(dL);b=kK(b);c=ahz(ahF(h,c),b);if(pM(c,b))aA(dL)}if(e!=a.getLen())aA(dL);if(f[2]==10&&pM([X,0,0,xc],c))aA(dL);if(i<0)c=ze(c);return c}function
ahJ(a){var
g=zn(a),f=g[0],h=g[1],d=g[2],i=-1>>>0,e=a.get(f),c=kM(e);if(c<0||c>=d)aA(dL);var
b=c;for(;;){f++;e=a.get(f);if(e==95)continue;c=kM(e);if(c<0||c>=d)break;b=d*b+c;if(b>i)aA(dL)}if(f!=a.getLen())aA(dL);b=h*b;if(d==10&&(b|0)!=b)aA(dL);return b|0}function
ahK(a){return+(a>31&&a<hZ)}function
ahL(a){return a.slice(1)}function
ahM(a,b){return a.apply(null,b.slice(1))}function
ahN(a){var
c=Array.prototype.slice;return function(){var
b=arguments.length>0?c.call(arguments):[undefined];return br(a,b)}}function
ahO(a,b){return+(gj(a,b,false)<=0)}function
ahP(a,b){return+(gj(a,b,false)<0)}function
bs(a){a=a.getFullBytes();var
c=[],d=a.length/2;for(var
b=0;b<d;b++)c[b]=(a.charCodeAt(2*b)|a.charCodeAt(2*b+1)<<8)<<16>>16;return c}function
ahQ(a,b,c){var
o=2,p=3,s=5,e=6,i=7,h=8,k=9,n=1,m=2,r=3,t=4,q=5;if(!a.lex_default){a.lex_base=bs(a[n]);a.lex_backtrk=bs(a[m]);a.lex_check=bs(a[q]);a.lex_trans=bs(a[t]);a.lex_default=bs(a[r])}var
f,d=b,l=c[o].getArray();if(d>=0){c[i]=c[s]=c[e];c[h]=-1}else
d=-d-1;for(;;){var
g=a.lex_base[d];if(g<0)return-g-1;var
j=a.lex_backtrk[d];if(j>=0){c[i]=c[e];c[h]=j}if(c[e]>=c[p])if(c[k]==0)return-d-1;else
f=cc;else{f=l[c[e]];c[e]++}d=a.lex_check[g+f]==d?a.lex_trans[g+f]:a.lex_default[d];if(d<0){c[e]=c[i];if(c[h]==-1)aA(yh);else
return c[h]}else
if(f==cc)c[k]=0}}function
ahS(a,b){var
d=[0];for(var
c=1;c<=a;c++)d[c]=b;return d}var
ahT=function(){function
m(a,b){return a+b|0}function
l(a,b,c,d,e,f){b=m(m(b,a),m(d,f));return m(b<<e|b>>>32-e,c)}function
h(a,b,c,d,e,f,g){return l(b&c|~b&d,a,b,e,f,g)}function
i(a,b,c,d,e,f,g){return l(b&d|c&~d,a,b,e,f,g)}function
j(a,b,c,d,e,f,g){return l(b^c^d,a,b,e,f,g)}function
k(a,b,c,d,e,f,g){return l(c^(b|~d),a,b,e,f,g)}function
n(a,b){var
g=b;a[g>>2]|=dg<<8*(g&3);for(g=(g&~3)+8;(g&63)<60;g+=4)a[(g>>2)-1]=0;a[(g>>2)-1]=b<<3;a[g>>2]=b>>29&536870911;var
l=[1732584193,4023233417,2562383102,271733878];for(g=0;g<a.length;g+=16){var
c=l[0],d=l[1],e=l[2],f=l[3];c=h(c,d,e,f,a[g+0],7,3614090360);f=h(f,c,d,e,a[g+1],12,3905402710);e=h(e,f,c,d,a[g+2],17,606105819);d=h(d,e,f,c,a[g+3],22,3250441966);c=h(c,d,e,f,a[g+4],7,4118548399);f=h(f,c,d,e,a[g+5],12,1200080426);e=h(e,f,c,d,a[g+6],17,2821735955);d=h(d,e,f,c,a[g+7],22,4249261313);c=h(c,d,e,f,a[g+8],7,1770035416);f=h(f,c,d,e,a[g+9],12,2336552879);e=h(e,f,c,d,a[g+10],17,4294925233);d=h(d,e,f,c,a[g+11],22,2304563134);c=h(c,d,e,f,a[g+12],7,1804603682);f=h(f,c,d,e,a[g+13],12,4254626195);e=h(e,f,c,d,a[g+14],17,2792965006);d=h(d,e,f,c,a[g+15],22,1236535329);c=i(c,d,e,f,a[g+1],5,4129170786);f=i(f,c,d,e,a[g+6],9,3225465664);e=i(e,f,c,d,a[g+11],14,643717713);d=i(d,e,f,c,a[g+0],20,3921069994);c=i(c,d,e,f,a[g+5],5,3593408605);f=i(f,c,d,e,a[g+10],9,38016083);e=i(e,f,c,d,a[g+15],14,3634488961);d=i(d,e,f,c,a[g+4],20,3889429448);c=i(c,d,e,f,a[g+9],5,568446438);f=i(f,c,d,e,a[g+14],9,3275163606);e=i(e,f,c,d,a[g+3],14,4107603335);d=i(d,e,f,c,a[g+8],20,1163531501);c=i(c,d,e,f,a[g+13],5,2850285829);f=i(f,c,d,e,a[g+2],9,4243563512);e=i(e,f,c,d,a[g+7],14,1735328473);d=i(d,e,f,c,a[g+12],20,2368359562);c=j(c,d,e,f,a[g+5],4,4294588738);f=j(f,c,d,e,a[g+8],11,2272392833);e=j(e,f,c,d,a[g+11],16,1839030562);d=j(d,e,f,c,a[g+14],23,4259657740);c=j(c,d,e,f,a[g+1],4,2763975236);f=j(f,c,d,e,a[g+4],11,1272893353);e=j(e,f,c,d,a[g+7],16,4139469664);d=j(d,e,f,c,a[g+10],23,3200236656);c=j(c,d,e,f,a[g+13],4,681279174);f=j(f,c,d,e,a[g+0],11,3936430074);e=j(e,f,c,d,a[g+3],16,3572445317);d=j(d,e,f,c,a[g+6],23,76029189);c=j(c,d,e,f,a[g+9],4,3654602809);f=j(f,c,d,e,a[g+12],11,3873151461);e=j(e,f,c,d,a[g+15],16,530742520);d=j(d,e,f,c,a[g+2],23,3299628645);c=k(c,d,e,f,a[g+0],6,4096336452);f=k(f,c,d,e,a[g+7],10,1126891415);e=k(e,f,c,d,a[g+14],15,2878612391);d=k(d,e,f,c,a[g+5],21,4237533241);c=k(c,d,e,f,a[g+12],6,1700485571);f=k(f,c,d,e,a[g+3],10,2399980690);e=k(e,f,c,d,a[g+10],15,4293915773);d=k(d,e,f,c,a[g+1],21,2240044497);c=k(c,d,e,f,a[g+8],6,1873313359);f=k(f,c,d,e,a[g+15],10,4264355552);e=k(e,f,c,d,a[g+6],15,2734768916);d=k(d,e,f,c,a[g+13],21,1309151649);c=k(c,d,e,f,a[g+4],6,4149444226);f=k(f,c,d,e,a[g+11],10,3174756917);e=k(e,f,c,d,a[g+2],15,718787259);d=k(d,e,f,c,a[g+9],21,3951481745);l[0]=m(c,l[0]);l[1]=m(d,l[1]);l[2]=m(e,l[2]);l[3]=m(f,l[3])}var
o=[];for(var
g=0;g<4;g++)for(var
n=0;n<4;n++)o[g*4+n]=l[g]>>8*n&X;return o}return function(a,b,c){var
h=[];if(a.array){var
f=a.array;for(var
d=0;d<c;d+=4){var
e=d+b;h[d>>2]=f[e]|f[e+1]<<8|f[e+2]<<16|f[e+3]<<24}for(;d<c;d++)h[d>>2]|=f[d+b]<<8*(d&3)}else{var
g=a.getFullBytes();for(var
d=0;d<c;d+=4){var
e=d+b;h[d>>2]=g.charCodeAt(e)|g.charCodeAt(e+1)<<8|g.charCodeAt(e+2)<<16|g.charCodeAt(e+3)<<24}for(;d<c;d++)h[d>>2]|=g.charCodeAt(d+b)<<8*(d&3)}return new
kI(n(h,c))}}();function
ahU(a){return a.data.array.length}function
zs(a){delete
aG.fds[a];return}function
pN(a){if(!a.opened)cv("Cannot flush a closed channel");if(a.buffer==c)return 0;if(a.output)switch(a.output.length){case
2:a.output(a,a.buffer);break;default:a.output(a.buffer)}a.buffer=c}var
h_=new
Array();function
ahV(a){pN(a);a.opened=false;delete
h_[a.fd];zs(a.fd);return 0}function
ahW(a,b,c,d){var
e=a.data.array.length-a.data.offset;if(e<d)d=e;pI(new
kI(a.data.array),a.data.offset,b,c,d);a.data.offset+=d;return d}function
aib(){pP(aG[5])}function
ahX(a){if(a.data.offset>=a.data.array.length)aib();if(a.data.offset<0||a.data.offset>a.data.array.length)kJ();var
b=a.data.array[a.data.offset];a.data.offset++;return b}function
ahY(a){var
b=a.data.offset,c=a.data.array.length;if(b>=c)return 0;while(true){if(b>=c)return-(b-a.data.offset);if(b<0||b>a.data.array.length)kJ();if(a.data.array[b]==10)return b-a.data.offset+1;b++}}function
zt(a){var
c=et(a),b=gk(c);return b
instanceof
es?1:0}function
pR(a){var
b=kO,d=et(a),e;for(var
c=0;c<d.length;c++){if(b.auto)e=b.auto;if(!(b.exists&&b.exists(d[c])))return e?e(d.join(dh)):0;b=b.get(d[c])}return 1}function
ib(a,b,c){if(aG.fds===undefined)aG.fds=new
Array();c=c?c:{};var
d={};d.array=b;d.offset=c.append?d.array.length:0;d.flags=c;aG.fds[a]=d;aG.fd_last_idx=a;return a}function
aio(a,b,c){var
d={};while(b){switch(b[1]){case
0:d.rdonly=1;break;case
1:d.wronly=1;break;case
2:d.append=1;break;case
3:d.create=1;break;case
4:d.truncate=1;break;case
5:d.excl=1;break;case
6:d.binary=1;break;case
7:d.text=1;break;case
8:d.nonblock=1;break}b=b[2]}var
f=a.toString(),h=et(a);if(d.rdonly&&d.wronly)cv(f+" : flags Open_rdonly and Open_wronly are not compatible");if(d.text&&d.binary)cv(f+" : flags Open_text and Open_binary are not compatible");if(pR(a)){if(zt(a))cv(f+" : is a directory");if(d.create&&d.excl)cv(f+o7);var
g=aG.fd_last_idx?aG.fd_last_idx:0,e=gk(h);if(d.truncate)e.truncate();return ib(g+1,e.content(),d)}else
if(d.create){var
g=aG.fd_last_idx?aG.fd_last_idx:0;zb(a,[]);var
e=gk(h);return ib(g+1,e.content(),d)}else
kN(a)}ib(0,[]);ib(1,[]);ib(2,[]);function
ahZ(a){var
b=aG.fds[a];if(b.flags.wronly)cv(x8+a+" is writeonly");return{data:b,fd:a,opened:true}}function
aix(a){if(a.charCodeAt(a.length-1)==10)a=a.substr(0,a.length-1);var
c=b.console;c&&c.log&&c.log(a)}function
aif(a,b){var
e=new
aS(b),d=e.getLen();for(var
c=0;c<d;c++)a.data.array[a.data.offset+c]=e.get(c);a.data.offset+=d;return 0}function
ah0(a){var
b;switch(a){case
1:b=aix;break;case
2:b=pS;break;default:b=aif}var
e=aG.fds[a];if(e.flags.rdonly)cv(x8+a+" is readonly");var
d={data:e,fd:a,opened:true,buffer:c,output:b};h_[d.fd]=d;return d}function
ah1(){var
a=0;for(var
b
in
h_)if(h_[b].opened)a=[0,h_[b],a];return a}function
zk(a,b,c,d){if(!a.opened)cv("Cannot output to a closed channel");var
f;if(c==0&&b.getLen()==d)f=b;else{f=za(d);pI(b,c,f,0,d)}var
e=f.toString(),g=e.lastIndexOf("\n");if(g<0)a.buffer+=e;else{a.buffer+=e.substr(0,g+1);pN(a);a.buffer+=e.substr(g+1)}}function
zm(a){return new
aS(a)}function
ah2(a,b){var
c=zm(String.fromCharCode(b));zk(a,c,0,1)}function
ah3(a,b){a.data.offset=b}function
ah4(a,b){a.output=b;return}function
ah5(a,b){if(b==0)zq();return a%b}function
ahR(a,b,c,d){for(;;){var
e=a.charCodeAt(b);b++;if(e==X)return;var
f=a.charCodeAt(b);b++;c[e+1]=f==X?d:c[f+1]}}function
zj(a,b,c){for(;;){var
d=a.charCodeAt(b);b++;if(d==X)return;var
e=a.charCodeAt(b);b++;c[d+1]=e==X?-1:c[e+1]}}function
ah7(a,b,c){var
u=2,v=3,B=5,f=6,j=7,i=8,o=9,k=10,s=1,q=2,z=3,C=4,w=5,t=6,r=7,A=8,D=9,x=10,y=11;if(!a.lex_default){a.lex_base=bs(a[s]);a.lex_backtrk=bs(a[q]);a.lex_check=bs(a[w]);a.lex_trans=bs(a[C]);a.lex_default=bs(a[z])}if(!a.lex_default_code){a.lex_base_code=bs(a[t]);a.lex_backtrk_code=bs(a[r]);a.lex_check_code=bs(a[x]);a.lex_trans_code=bs(a[D]);a.lex_default_code=bs(a[A])}if(a.lex_code==null)a.lex_code=a[y].getFullBytes();var
e,d=b,p=c[u].getArray();if(d>=0){c[j]=c[B]=c[f];c[i]=-1}else
d=-d-1;for(;;){var
h=a.lex_base[d];if(h<0){var
g=a.lex_base_code[d];zj(a.lex_code,g,c[k]);return-h-1}var
m=a.lex_backtrk[d];if(m>=0){var
g=a.lex_backtrk_code[d];zj(a.lex_code,g,c[k]);c[j]=c[f];c[i]=m}if(c[f]>=c[v])if(c[o]==0)return-d-1;else
e=cc;else{e=p[c[f]];c[f]++}var
l=d;d=a.lex_check[h+e]==d?a.lex_trans[h+e]:a.lex_default[d];if(d<0){c[f]=c[j];if(c[i]==-1)aA(yh);else
return c[i]}else{var
n=a.lex_base_code[l],g;g=a.lex_check_code[n+e]==l?a.lex_trans_code[n+e]:a.lex_default_code[l];if(g>0)ahR(a.lex_code,g,c[k],c[f]);if(e==cc)c[o]=0}}}function
ah8(a,b){return+(gj(a,b,false)!=0)}function
ah9(a,b){var
d=[a];for(var
c=1;c<=b;c++)d[c]=0;return d}function
ah_(a){return+(a
instanceof
Array)}function
ah$(a,b){a[0]=b;return 0}function
aia(a){return a
instanceof
Array?a[0]:yt}function
aid(a,b){aG[a+1]=b}var
zl={};function
aie(a,b){zl[a.toString()]=b;return 0}function
aig(a,b){return a.compare(b)}function
zr(a,b){var
c=a.fullBytes,d=b.fullBytes;if(c!=null&&d!=null)return c==d?1:0;return a.getFullBytes()==b.getFullBytes()?1:0}function
aih(a,b){return 1-zr(a,b)}function
aii(a){if(pR(a)&&zt(a)){var
b=et(a);b.push(c);pJ=b.join(dh)}else
kN(a)}function
aij(){return 32}function
aik(a){b.mezzo.returnCode=a}function
ail(){return[0,new
bq(kd),32,0]}function
aim(){return new
aS(pJ)}function
ain(){zo()}function
aip(){var
a=new
Date()^4294967295*Math.random();return{valueOf:function(){return a},0:0,1:a,length:2}}function
aic(a){a=a
instanceof
aS?a.toString():a;cv(a+": Not a directory")}function
aiq(a){var
c=gk(et(a));if(!(c
instanceof
es))aic(a);var
d=[0],e=c.list();for(var
b=0;b<e.length;b++)d.push(new
aS(e[b]));return d}function
air(a){var
b=et(a),c=gk(b.slice(0,-1));if(c.exists(b[b.length-1]))c.remove(b[b.length-1]);else
kN(a)}var
ahy=new
Date()*xK;function
ais(){return new
Date()*xK-ahy}function
ait(a){var
b=1;while(a&&a.joo_tramp){a=a.joo_tramp.apply(null,a.joo_args);b++}return a}function
aiu(a,b){return{joo_tramp:a,joo_args:b}}function
aiv(a,b){if(typeof
b===yn){a.fun=b;return 0}if(b.fun){a.fun=b.fun;return 0}var
c=b.length;while(c--)a[c]=b[c];return 0}function
ah6(a){return zl[a]}function
aiw(a){if(a
instanceof
Array)return a;if(b.RangeError&&a
instanceof
b.RangeError&&a.message&&a.message.match(/maximum call stack/i))return[0,aG[9]];if(b.InternalError&&a
instanceof
b.InternalError&&a.message&&a.message.match(/too much recursion/i))return[0,aG[9]];if(a
instanceof
b.Error)return[0,ah6(xm),a];return[0,aG[3],new
bq(String(a))]}function
aiC(){return 0}var
I=ahi,B=ahj,ov=ahk,cR=pI,wV=ahl,bI=ahm,ae=za,oz=ahn,av=aho,wZ=ahq,ow=ahr,ka=ahs,q=zb,cs=ahu,wR=ahv,wX=ahw,ga=zi,de=ahJ,ox=ahK,w6=ahL,w5=ahM,kb=ahN,or=ahO,wY=ahP,j$=ahQ,$=ahS,wT=ahV,j9=pN,j_=ahW,w3=ahX,os=ahZ,j8=ah0,wS=zk,wU=ah2,oy=ah5,hB=h$,f=zm,gb=ah8,w0=ah9,wW=ah_,cS=aia,dI=aid,ou=aie,hC=aig,W=zr,O=aih,w2=aii,hI=pR,hD=aim,e7=ain,ot=aio,w1=aiq,oD=air,w4=ais,y=ait,v=aiu,oA=aiv,m=aiw,kc=aiC;function
h(a,b){return a.length==1?a(b):br(a,[b])}function
j(a,b,c){return a.length==2?a(b,c):br(a,[b,c])}function
k(a,b,c,d){return a.length==3?a(b,c,d):br(a,[b,c,d])}function
A(a,b,c,d,e){return a.length==4?a(b,c,d,e):br(a,[b,c,d,e])}function
ej(a,b,c,d,e,f){return a.length==5?a(b,c,d,e,f):br(a,[b,c,d,e,f])}function
a1(a,b,c,d,e,f,g){return a.length==6?a(b,c,d,e,f,g):br(a,[b,c,d,e,f,g])}function
oR(a,b,c,d,e,f,g,h,i){return a.length==8?a(b,c,d,e,f,g,h,i):br(a,[b,c,d,e,f,g,h,i])}function
oE(a,b,c,d,e,f,g,h,i,j,k){return a.length==10?a(b,c,d,e,f,g,h,i,j,k):br(a,[b,c,d,e,f,g,h,i,j,k])}q("/corelib/array.mz","(* ------------------------------------------------------------------------ *)\n\n(* The primitive operations on arrays. *)\n\n(* WHEN IMPLEMENTING THESE OPERATIONS, DO NOT FORGET ABOUT THE ADOPTER\n   FIELD. *)\n\nval max_length : int =\n  builtin _mz_array_max_length\n\nval length : [a, m] array m a -> int =\n  builtin _mz_array_length\n\nval get : [a, m] duplicable a => (array m a, int) -> a =\n  builtin _mz_array_get\n\nval set : [a] (marray a, int, consumes a) -> () =\n  builtin _mz_array_set\n\nval unsafe_get : [a, m] duplicable a => (array m a, int) -> a =\n  builtin _mz_array_unsafe_get\n\nval unsafe_set : [a] (marray a, int, a) -> () =\n  builtin _mz_array_unsafe_set\n\nval create : [a, m] duplicable a => (int, a) -> array m a =\n  builtin _mz_array_create\n\n(* TEMPORARY the type of create is not quite general enough; the\n   discussion about [fill_segment] applies here too. For this reason,\n   in some cases, we will be forced to use [array::init] instead of\n   [array::create]. *)\n\nval unsafe_sub : [a, m1, m2] duplicable a => (array m1 a, int, int) -> array m2 a =\n  builtin _mz_array_unsafe_sub\n\nval append_prim : [a, m1, m2, m3] duplicable a => (array m1 a, array m2 a) -> array m3 a =\n  builtin _mz_array_append_prim\n\n(* OCaml's primitive operation [Array.concat] uses an OCaml list. We cannot\n   expose it in Mezzo unless a Mezzo list is an OCaml list. This will be\n   possible once we implement the keyword [slim]. *)\n\nval unsafe_blit : [a, m] duplicable a => (array m a, int, marray a, int, int) -> () =\n  builtin _mz_array_unsafe_blit\n\n(* ------------------------------------------------------------------------ *)\n\n(* [magic_get] is a version of [get] that does not carry the constraint\n   [duplicable a]. It is unsound, so it must be used with care. We use it,\n   below, to define a few operations which (we believe) are sound. *)\n\nval magic_get : [a, m] (array m a, int) -> a =\n  builtin _mz_array_get\n\n(* The following functions can be programmed using [get] and [set], but if we\n   do so, we end up with a constraint [duplicable a], which is in fact\n   unnecessary, because no value is duplicated in the process. Thus, we use\n   [magic_get] instead of [get]. *)\n\nval swap [a] (r: marray a, i: int, j: int) : () =\n  if i <> j then begin\n    let ri = magic_get (r, i) in\n    set (r, i, magic_get (r, j));\n    set (r, j, ri)\n  end\n\nval replace [a] (r: marray a, i: int, consumes v: a) : a =\n  let x = magic_get (r, i) in\n  set (r, i, v); x\n\nval borrow [a, m] (consumes r: array m a, i: int) :\n  focused::focused a (r @ array m a) =\n  let x = magic_get (r, i) in\n  let wand (|consumes (r @ array m a * x @ a)): (| r @ array m a) = () in\n  (x, wand)\n\nval consult [a, m, pre : perm, b] (\n  r: array m a, i: int,\n  f: (a | consumes pre) -> b\n  | consumes pre\n) : b =\n  f (magic_get (r, i))\n\nval update [a, pre : perm, post : perm] (\n  r: marray a, i: int,\n  f: (consumes a | consumes pre) -> (a | post)\n  | consumes pre\n) : (| post) =\n  set(r, i, f (magic_get (r, i)))\n\n(* [consult] is a particular use of [get], with delimited scope, that does\n   not require the element type to be duplicable. The function [f] does not\n   have access to the array, so using [consult] instead of [get] is a way\n   of ensuring that we only read one element at a time (and give it back). *)\n\n(* The type of [consult] advertises the fact that [consult] invokes [f]\n   exactly once. Indeed, [f] is invoked at least once, otherwise [consult]\n   would not be able to produce an element of type [b]. And [f] is invoked\n   at most once, because [f] requires and consumes the permission [pre],\n   which is not duplicable. *)\n\n(* Analogous comments hold about [update]. *)\n\n(* A drawback of this approach is that the user has to work in CPS style.\n   Could we somehow impose the same discipline and obtain the same effect\n   in direct style? We would need an abstract permission that represents\n   an array with a hole at a particular index and a particular value, and\n   we would need a coercion that fills the hole. I am afraid that it might\n   be just as cumbersome as using [consult] or [update]! *)\n\n(* ------------------------------------------------------------------------ *)\n\n(* The following are safe wrappers for the unsafe primitive operations.\n   They are implemented in the same manner as in OCaml. *)\n\nval sub [a, m1, m2] duplicable a => (r: array m1 a, ofs: int, len: int) : array\nm2 a =\n  if len < 0 || ofs > length r - len\n  then fail\n  else unsafe_sub (r, ofs, len)\n\nval copy [a, m1, m2] duplicable a => (r: array m1 a) : array m2 a =\n  (* OCaml's implementation contains a special case for an array\n     of length 0. We cannot keep this special case, due to the\n     fact that our arrays are exclusive and have an adopter field. *)\n  unsafe_sub (r, 0, length r)\n\nval freeze [a, m] (consumes r: array m a) : (| r @ iarray a) =\n  magic::magic ()\n\n(* Internal function used to freeze or not a mutable array, depending on the\n * returned permission *)\nval maybe_freeze [a, m] (consumes r: marray a) : (| r @ array m a) =\n  magic::magic ()\n\nval append [a, m1, m2, m3] duplicable a => (r1: array m1 a, r2: array m2 a) :\n  array m3 a =\n  let l1 = length r1 in\n  if l1 = 0 then copy r2\n  else if length r2 = 0 then unsafe_sub (r1, 0, l1)\n  else append_prim (r1, r2)\n\nval blit [a, m] duplicable a => (r1: array m a, ofs1: int, r2: marray a, ofs2: int, len: int) : () =\n  if len < 0 || ofs1 < 0 || ofs1 > length r1 - len\n             || ofs2 < 0 || ofs2 > length r2 - len\n  then fail\n  else unsafe_blit (r1, ofs1, r2, ofs2, len)\n\n(* ------------------------------------------------------------------------ *)\n\n(* The above copying functions are restricted to arrays of duplicable\n   elements. However, it also makes sense to copy an array (or an array\n   segment) of non-duplicable elements, provided the original array is\n   subsequently deprived of the ownership of its elements.  We provide an\n   experimental function, [steal], for this purpose.  *)\n\n(* Because we do not have permissions for an array segment, all of the\n   original array elements are lost, even if only a segment of the array is\n   copied. For simplicity, we force the entire array to be copied; we do not\n   allow copying a segment and losing the ownership of the rest (although we\n   could). *)\n\n(* The original array itself is not lost; it becomes an array of unknown data,\n   which can be re-used to store new data, if desired. *)\n\nval total_blit [a, m] duplicable a => (r1: array m a, r2: marray a, ofs2: int) : () =\n  blit (r1, 0, r2, ofs2, length r1)\n\nval steal : [a, m] (consumes r1: array m a, r2: marray a, ofs2: int) -> (| r1 @\narray m unknown) =\n  magic::magic total_blit\n\n(* [steal] is a variant of [blit]. One could also define variants of [sub],\n   [copy], [append], based on the same principle. *)\n\n(* ------------------------------------------------------------------------ *)\n\n(* Here is another variant of [blit], this time for the case where the\n   entire destination array is written. In this case, a strong update\n   is possible. *)\n\nval surjective_blit [a, m] duplicable a => (r1: array m a, ofs1: int, r2: marray a) : () =\n  blit (r1, ofs1, r2, 0, length r2)\n\nval overwrite : [a, m] duplicable a => (r1: array m a, ofs1: int, consumes r2:\n  marray unknown) -> (| r2 @ marray a) =\n  magic::magic surjective_blit\n\n(* ------------------------------------------------------------------------ *)\n\n(* The above two variants of [blit] can be combined! *)\n\nval bijective_blit [a, m] duplicable a => (r1: array m a, r2: marray a) : () =\n  let l2 = length r2 in\n  if length r1 <> l2\n  then fail\n  else blit (r1, 0, r2, 0, l2)\n\nval transfer : [a, m] (consumes r1: array m a, consumes r2: marray unknown) ->\n  (| r1 @ array m unknown * r2 @ marray a) =\n  magic::magic bijective_blit\n\n(* -------------------------------------------------------------------------- *)\n\n(* Generic loops over a semi-open interval. *)\n\nval rec fold_segment_up [a] (\n  i: int, j: int, consumes accu: a,\n  f: (int, consumes a) -> a\n) : a =\n  if i < j then\n    fold_segment_up (i + 1, j, f (i, accu), f)\n  else\n    accu\n\nval rec fold_segment_down [a] (\n  i: int, j: int, consumes accu: a,\n  f: (int, consumes a) -> a\n) : a =\n  if i < j then\n    fold_segment_down (i, j - 1, f (j - 1, accu), f)\n  else\n    accu\n\nval fold_segment [a] (\n  s: sense,\n  i: int, j: int, consumes accu: a,\n  f: (int, consumes a) -> a\n) : a =\n  match s with\n  | Up ->\n      fold_segment_up (i, j, accu, f)\n  | Down ->\n      fold_segment_down (i, j, accu, f)\n  end\n\nval rec iter_segment_up [p : perm] (\n  i: int, j: int,\n  f: (int | p) -> () \n  | p\n) : () =\n  if i < j then begin\n    f(i);\n    iter_segment_up (i + 1, j, f)\n  end\n\nval rec iter_segment_down [p : perm] (\n  i: int, j: int,\n  f: (int | p) -> () \n  | p\n) : () =\n  if i < j then begin\n    f(j - 1);\n    iter_segment_down (i, j - 1, f)\n  end\n\nval iter_segment [p : perm] (\n  s: sense,\n  i: int, j: int,\n  f: (int | p) -> () \n  | p\n) : () =\n  match s with\n  | Up ->\n      iter_segment_up (i, j, f)\n  | Down ->\n      iter_segment_down (i, j, f)\n  end\n\n(* Generic loops over an entire array. *)\n\nval fold_array [a, m, b] (\n  s: sense,\n  r: array m a, consumes seed: b,\n  f: (int, consumes b | r @ array m a) -> b\n) : b =\n  fold_segment [(b | r @ array m a)] (s, 0, length r, seed, f)\n  (* WISH could we get rid of this type application? *)\n\nval iter_array [a, m, p : perm] (\n  s: sense,\n  r: array m a,\n  f: (int | r @ array m a * p) -> ()\n  | p\n) : () =\n  iter_segment (s, 0, length r, f)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A variant of the above loops, where [f] receives not only an index [i],\n   but also the corresponding array element. *)\n\n(* Because the type [a] is not assumed duplicable, getting hold of the\n   element temporarily invalidates the array, which implies that [f]\n   cannot receive the permission [r @ array a]. This is unfortunate.\n   We could offer a variant of this function where [a] is assumed\n   duplicable and [f] receives this permission. (This also suggests\n   that conditional permissions, of the form (duplicable a => p),\n   might be useful! TEMPORARY *)\n\n(* Furthermore, we could define variants of these operations where\n   [f] changes the type of its argument, and the loop changes the\n   type of the array. TEMPORARY *)\n\nval foldi [a, m, b] (\n  s: sense,\n  r: array m a, consumes seed: b,\n  f: (int, a, consumes accu: b) -> b\n) : b =\n  fold_array (s, r, seed, fun (i: int, consumes accu: b | r @ array m a) : b =\n    consult (r, i, fun (v: a | consumes accu @ b) : b =\n      f (i, v, accu)\n    )\n  )\n\nval iteri [a, m, p : perm] (\n  s: sense,\n  r: array m a,\n  f: (int, a | p) -> ()\n  | p\n) : () =\n  iter_array (s, r, fun (i: int | r @ array m a * p) : () =\n    consult [a, m, p, (| p)] (r, i, fun (v: a | p) : () =\n      (* WISH could we get rid of this type application? *)\n      f (i, v)\n    )\n  )\n\n(* A degenerate variant of the above loops, where the function [f] has\n   access to the element, but not the index [i] or to the array [x]. *)\n\nval fold [a, m, b] (\n  s: sense,\n  r: array m a,\n  consumes seed: b,\n  f: (a, consumes accu: b) -> b\n) : b =\n  fold_array (s, r, seed, fun (i: int, consumes accu: b | r @ array m a) : b =\n    consult (r, i, fun (v: a | consumes accu @ b) : b =\n      f (v, accu)\n    )\n  )\n\nval iter [a, m, p : perm] (\n  s: sense,\n  r: array m a,\n  f: (a | p) -> ()\n  | p\n) : () =\n  iter_array (s, r, fun (i: int | r @ array m a * p) : () =\n    consult [a, m, p, (| p)] (r, i, fun (v: a | p) : () =\n      f v\n    )\n  )\n\n(* ------------------------------------------------------------------------ *)\n\n(* [transform] is an in-place version of [mapi]: if applies the function [f],\n   in place, to every element of the array. It can be used to perform a strong\n   update over the entire array. This strong update cannot be type-checked in\n   Mezzo today, so we cheat. *)\n\nval weak_transform [a, p : perm] (\n  s: sense,\n  r: marray a,\n  f: (int, consumes a | p) -> a\n  | p\n) : () =\n  iter_array (s, r, fun (i: int | r @ marray a * p) : () =\n    update (r, i, fun (consumes x: a | p) : a = f(i, x))\n  )\n\nval transform : [a, b, p : perm] (\n  s: sense,\n  consumes r: marray a,\n  f: (int, consumes a | p) -> b\n  | p\n) -> (| r @ marray b) =\n  magic::magic weak_transform\n\n(* One could imagine variants of this operation, e.g., an operation that\n   performs a strong update simultaneously over TWO arrays, etc., etc.\n   We cannot possibly think of all combinations. A truly general solution\n   involves permissions for array segments, which allow [transform] and\n   its variants to be programmed and type-checked. *)\n\n(* ------------------------------------------------------------------------ *)\n\n(* [init] is the composition of [create] and [transform]. *)\n\nval init [a, m, p : perm] (\n  s: sense,\n  n: int,\n  f: (int | p) -> a\n  | p)\n  : array m a\n=\n  (* Allocate an array and fill it with an arbitrary value, say 0.\n     Because the type [int] is duplicable, this is well-typed! *)\n  let r : marray int = create (n, 0) in\n  (* Transform the array. *)\n  transform (s, r, fun (i: int, int | p) : a =\n    f i\n  );\n  maybe_freeze r;\n  r\n\n(* Map. *)\n\nval map [a, m1, b, m2, p : perm] (\n  s: sense,\n  r: array m1 a,\n  f: (a | p) -> b\n  | p\n) : array m2 b =\n  init (s, length r, fun (i: int | r @ array m1 a * p) : b =\n    consult [a, m1, p, (b | p)] (r, i, f)\n  )\n\nval mapi [a, m1, b, m2, p : perm] (\n  s: sense,\n  r: array m1 a,\n  f: (int, a | p) -> b\n  | p\n) : array m2 b =\n  init (s, length r, fun (i: int | r @ array m1 a * p) : b =\n    consult [a, m1, p, (b | p)] (r, i, fun (v: a | p) : b =\n      f (i, v)\n    )\n  )\n\n(* By cheating, one could also offer versions of [map] and [mapi] that perform\n   a strong update on the original array. TEMPORARY *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Filling a segment with a value. *)\n\n(* TEMPORARY could also offer a version that steals the elements from the array\n   when they are not duplicable *)\n\n(* TEMPORARY there are situations where the type [a] is not duplicable, but the\n   value [v] is duplicable. This happens, for instance, when the type is [option a]\n   and the value is [None]. At the moment, we cannot express this scenario. Perhaps\n   we could distinguish two types, [a] and [b], require [r: array a] and [v: b],\n   where [b] is a duplicable subtype of [a]. But we do not have subtype constraints\n   (yet!). We could replace the subtype constraint with a function of type [b -> a],\n   but that would be less efficient (and cumbersome, in the common case where [a]\n   and [b] coincide). *)\n\nval rec fill_segment [a] duplicable a => (r: marray a, i: int, j: int, v: a) : () =\n  if i < j then begin\n    set (r, i, v);\n    fill_segment (r, i + 1, j, v)\n  end\n\nval fill [a] duplicable a => (r: marray a, i: int, len: int, v: a) : () =\n  fill_segment (r, i, i + len, v)\n\nval fill_array [a] duplicable a => (r: marray a, v: a) : () =\n  fill_segment (r, 0, length r, v)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Searching. *)\n\n(* [first_from (r, i, f)] returns the position j of the first element after the\n * [i]-th verifying [f r[j]]. *)\nval first_from [a, m, p: perm] (\n  r: array m a,\n  i: int,\n  f: (a | p) -> bool\n  | p\n) : int =\n  let rec loop (\n    i: int\n    | r @ array m a * p\n  ) : int =\n    if i = length r then length r\n    else if consult [b=(bool|p)] (r, i, f) then i\n    else loop (i + 1)\n  in loop i\n\n(* [last_from (s, i, f)] returns the position j of the last element before the\n * [i]-th verifying [f r[j]]. *)\nval last_from [a, m, p: perm] (\n  r: array m a,\n  i: int,\n  f: (a | p) -> bool\n  | p\n) : int =\n  let rec loop (\n    i: int\n    | r @ array m a * p\n  ) : int =\n    if i = -1 then -1\n    else if consult [b=(bool|p)] (r, i, f) then i\n    else loop (i - 1)\n  in loop i\n\n(* [first (r, f)] is [first_from (r, 0, f)]. *)\nval first [a, m, p: perm] (\n  r: array m a,\n  f: (a | p) -> bool\n  | p\n) : int =\n  first_from (r, 0, f)\n\n(* [last (r, f)] is [last_from (r, length r - 1, f)]. *)\nval last [a, m, p: perm] (\n  r: array m a,\n  f: (a | p) -> bool\n  | p\n) : int =\n  last_from (r, length r - 1, f)\n\n(* Auxiliary function for KMP. *)\nval build_table [a, m, p : perm] duplicable a => (\n  needle: array m a,\n  eq: (a, a | p) -> bool\n  | p\n) : iarray int =\n  let table = create (length needle, 0) in\n  set (table, 0, -1);\n\n  let rec loop (i: int, j: int | needle @ array m a * table @ marray int * p) : () =\n    if i >= length needle\n    then ()\n    else if eq (get (needle, i-1), get(needle, j))\n    then begin\n      set(table, i, j+1);\n      loop (i+1, j+1)\n    end\n    else if j > 0\n    then loop(i, get(table, j))\n    else begin\n      set(table, i, 0);\n      loop(i+1, 0)\n    end\n  in\n  loop (2, 0);\n  freeze table;\n  table\n\n(* [search (needle, haystack, eq)] returns the position of the first occurence\n * of [needle] in [haystack], using [eq] to compare elements of both arrays. *)\nval search [a, m1, m2, p : perm] duplicable a => (\n  needle: array m1 a,\n  haystack: array m2 a,\n  eq: (a, a | p) -> bool\n  | p\n) : int =\n  let table = build_table (needle, eq) in\n  let rec loop (\n    m: int, i: int \n    | needle @ array m1 a * haystack @ array m2 a * p)\n  : int =\n    if m + 1 >= length haystack\n    then length haystack\n    else if eq (get (needle, i), get(haystack, m + i))\n    then begin\n      if i == length needle - 1\n      then m\n      else loop(m, i+1)\n    end\n    else\n      loop(m + i - (get (table, i)), \n        if get (table, i) > -1\n        then get (table, i)\n        else 0)\n  in loop (0, 0)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Sorting. *)\n\n(* This is a port of OCaml's ternary heap sort. *)\n\n(* The three children of the node [i] are [i31], [i31+1], and [i31+2], where\n   [i31] stands for [i*3+1]. *)\n\n(* The parameter [l] can be thought of as the length of the array [r].\n   Actually, [l] may be less than the length of the array [r]; in that\n   case, only an initial segment of the array will be sorted. *)\n\nval sort_initial_segment [a, p : perm] duplicable a => (\n  cmp: (a, a | p) -> int,\n  r: marray a,\n  l: int\n  | p) : () =\n\n  (* The function [maxson] tells which of the children of the node [i] has\n     the greatest value. This node may have zero, one, two, or three children.\n     If there is at least one child, then the call returns the index of the\n     maximum child to the [normal] continuation. If there is zero child, then\n     the call returns the index [i] to the [bottom] continuation. This is a\n     double-barreled CPS encoding of the original OCaml code, which uses an\n     exception to signal that we have hit the bottom. *)\n\n  (* The [consumes] annotation on the three occurrences of [r @ array a] below\n     seems to be optional. I believe that it should in principle be present.\n     By omitting this annotation, we would be committing to preserving this\n     permission, so we would be fixing a more specific type for [maxson]. In\n     essence, we would be specializing the answer type [b] to a type of the\n     form [b | r @ array a]. *)\n\n  let maxson [b] (\n    l: int, i: int,\n    bottom: (int | consumes (p * r @ marray a)) -> b,\n    normal: (int | consumes (p * r @ marray a)) -> b\n                 | consumes (p * r @ marray a))  : b =\n    let i31 = i+i+i+1 in\n    if i31+2 < l then begin\n      (* If there are three children, find which one has the maximum value. *)\n      let max = newref i31 in\n      if cmp (get (r, i31),  get (r, i31+1)) < 0 then max := i31+1;\n      if cmp (get (r, !max), get (r, i31+2)) < 0 then max := i31+2;\n      normal !max\n    end\n    else if i31+1 < l then begin\n      (* If there are just two children, find which one has the maximum value. *)\n      let max = if cmp (get (r, i31), get (r, i31+1)) < 0 then i31+1 else i31 in\n      normal max\n    end\n    else if i31 < l then\n      (* If there is just one child, return it. *)\n      normal i31\n    else\n      (* If there are no children, we have hit the bottom. Return [i]\n        via the exceptional continuation. *)\n      bottom i\n  in\n\n  (* The function [trickledown] trickles the element [e] down node [i].\n     The normal continuation is specialized to an empty continuation. *)\n\n  let rec trickledown (\n    l: int, i: int, e: a,\n    bottom: (int | p * r @ marray a) -> ()\n    | p * r @ marray a\n  ) : () =\n    maxson [b = (| p * r @ marray a)] (l, i, bottom, fun (j: int | p * r @ marray a) : () =\n      (* [j] is the maximum son of [i]. If the element [e] is ? than the\n        element found at [j], then send it down, otherwise write [e] into\n        node [i]. *)\n      if cmp (get (r, j), e) > 0 then begin\n       set (r, i, get (r, j));\n       trickledown (l, j, e, bottom)\n      end\n      else\n       set (r, i, e)\n    )\n  in\n\n  (* The function [trickle] provides [trickledown] with a bottom continuation\n     that writes [e] into the childless node.  *)\n\n  let trickle (l: int, i: int, e: a | p * r @ marray a) : () =\n    trickledown (l, i, e, fun (i: int | p * r @ marray a) : () =\n      set (r, i, e)\n    )\n  in\n\n  (* The function [bubbledown] is analogous to [trickledown], but inserts a\n     a hole, rather than an element. It never terminates normally, i.e. it\n     always reaches a point where [maxson] invokes its bottom continuation.\n     For this reason, we can supply an identity continuation to [maxson]. *)\n\n  let identity (i: int | p * r @ marray a) : int =\n    i\n  in\n\n  let rec bubbledown (\n    l: int, i: int\n    | p * r @ marray a\n  ) : int =\n    maxson [b = (int | p * r @ marray a)] (l, i, identity, fun (j: int | p * r @\n    marray a) : int =\n      set (r, i, get (r, j));\n      bubbledown (l, j)\n    )\n  in\n\n  (* Trickle up... *)\n\n  let rec trickleup (i: int, e: a | p * r @ marray a) : () =\n    let father = (i - 1) / 3 in\n    if cmp (get (r, father), e) < 0 then begin\n      set (r, i, get (r, father));\n      if father > 0 then trickleup (father, e) else set (r, 0, e)\n    end\n    else\n      set (r, i, e)\n  in\n\n  (* The main algorithm. *)\n\n  if l < 0 || l > length r then\n    fail;\n  iter_segment_down (0, (l + 1) / 3, fun (i: int | p * r @ marray a) : () =\n    trickle (l, i, get (r, i))\n  );\n  iter_segment_down (2, l, fun (i: int | p * r @ marray a) : () =\n    let e = get (r, i) in\n    set (r, i, get (r, 0));\n    trickleup (bubbledown (i, 0), e)\n  );\n  if l > 1 then\n    swap (r, 0, 1)\n\nval sort [a, p : perm] duplicable a => (\n  cmp: (a, a | p) -> int,\n  r: marray a\n  | p) : () =\n  sort_initial_segment (cmp, r, length r)\n\nval sorted [a, m1, m2, p : perm] duplicable a => (\n  cmp: (a, a | p) -> int,\n  r: array m1 a\n  | p) : array m2 a =\n    let r = copy r in\n    sort (cmp, r);\n    maybe_freeze r;\n    r\n\n(* -------------------------------------------------------------------------- *)\n\n(* Sorting an array of non-duplicable elements. *)\n\n(* TEMPORARY this is just a demonstration; this code is currently limited to\n   a fixed adopter type, namely [pool a].\n   Ideally, it should be polymorphic in [t] and [a], where [t adopts a]. One\n   could simulate this by abstracting over [taking], or over [take] and [give],\n   but that would be a bit heavy. *)\n\nopen pool\n\nval nonduplicable_sort [a, s : perm] exclusive a => (\n  cmp: (a, a | s) -> int,\n  r: marray dynamic,\n  p : pool a\n  | s\n) : () =\n  (* Define a function that compares two elements at type [dynamic]. *)\n  let cmp (x: dynamic, y: dynamic | s * p @ pool a) : int =\n    if x == y then 0\n    else\n      taking x from p begin\n        taking y from p begin\n          cmp (x, y)\n        end\n      end\n  in\n  sort (cmp, r)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Miscellaneous. *)\n\nval rec above_pow (x: int, n: int) : int =\n  if x >= n then x\n  else if x * 2 > max_length then x\n  else above_pow (x * 2, n)\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo array.mz\"\nEnd:\n*)\n\n");q("/corelib/array.mzi","(* ------------------------------------------------------------------------ *)\n\n(* Basic operations over arrays. *)\n\n(* [create (n, v)] creates a new array of [n] elements, which are\n   initialized with the value [v]. Because [v] is copied, the type\n   [a] must be duplicable. *)\nval create : [a, m] duplicable a => (int, a) -> array m a\n\n(* [get (r, i)] reads the element at index [i] in the array [r].\n   Because the value is copied, the type [a] must be duplicable. *)\nval get : [a, m] duplicable a => (array m a, int) -> a\n\n(* [set (r, i, v)] sets the element at index [i] in the array [r]\n   to the value [v]. *)\nval set : [a] (marray a, int, consumes a) -> ()\n\n(* [length r] is the length of the array [r]. *)\nval length : [a, m] array m a -> int\n\n(* [max_length] is the maximum length of an array. *)\nval max_length : int\n\n(* ------------------------------------------------------------------------ *)\n\n(* Variants of the basic operations over arrays. *)\n\n(* [init (n, f)] creates a new array of [n] elements, where the element\n   at index [i] is initialized with the value [f i]. *)\n\nval init : [a, m, p : perm] (\n  s: sense,\n  n: int,\n  f: (int | p) -> a\n  | p\n) -> array m a\n\n(* The following functions are replacements for [get] in certain scenarios\n   where the constraint [duplicable a], imposed by [get], is unnecessary. *)\n\n(* [swap (r, i, j)] exchanges the elements at indices [i] and [j] in the\n   array [r]. *)\n\nval swap : [a] (r: marray a, i: int, j: int) -> ()\n\n(* [replace (r, i, v)] sets the element at index [i] in the array [r]\n   to the value [v] and returns the previous element at this index. *)\nval replace : [a] (marray a, int, consumes a) -> a\n\n(* [borrow (r, i)] returns the element at index [i] in the array [r],\n * along with a wand that allows to lose the element and get the array back. *)\nval borrow : [a, m] (consumes r: array m a, i: int) ->\n  focused::focused a (r @ array m a)\n\n(* [consult (r, i, f)] is [f r[i]]. *)\n\nval consult : [a, m, pre : perm, b] (\n  r: array m a, i: int,\n  f: (a | consumes pre) -> b\n  | consumes pre\n) -> b\n\n(* [update (r, i, f)] is [r[i] <- f r[i]]. *)\n\nval update : [a, pre : perm, post : perm] (\n  r: marray a, i: int,\n  f: (consumes a | consumes pre) -> (a | post)\n  | consumes pre\n) -> (| post)\n\n(* ------------------------------------------------------------------------ *)\n\n(* Transformations of arrays. *)\n\n(* [transform (s, r, f)] applies the function [f], in place, to every element\n   of the array [r]. It can perform a strong update over the entire array: the\n   types [a] and [b] need not coincide. *)\n\nval transform : [a, b, p : perm] (\n  s: sense,\n  consumes r: marray a,\n  f: (int, consumes a | p) -> b\n  | p\n) -> (| r @ marray b)\n\n(* [map (r, f)] produces a new array whose contents are obtained by applying\n   [f], pointwise, to the array [r]. *)\n\nval map : [a, m1, b, m2, p : perm] (\n  s: sense,\n  r: array m1 a,\n  f: (a | p) -> b\n  | p\n) -> array m2 b\n\n(* [mapi] is analogous to [map], but applies [f] to the index and element. *)\n\nval mapi : [a, m1, b, m2, p : perm] (\n  s: sense,\n  r: array m1 a,\n  f: (int, a | p) -> b\n  | p\n) -> array m2 b\n\n(* ------------------------------------------------------------------------ *)\n\n(* Making copies of arrays or array segments. *)\n\n(* [sub (r, ofs, len)] copies the array segment defined by [r], [ofs], and\n   [len] into a new array. *)\nval sub : [a, m1, m2] duplicable a =>\n  (r: array m1 a, ofs: int, len: int) ->\n  array m2 a\n\n(* [copy r] copies the array [r] into a new array. *)\nval copy : [a, m1, m2] duplicable a =>\n  (r: array m1 a) ->\n  array m2 a\n\n(* [freeze r] makes an array immutable. *)\nval freeze : [a, m]\n  (consumes r: array m a) ->\n  (| r@iarray a)\n\n(* [append (r1, r2)] concatenates the arrays [r1] and [r2] into a new array. *)\nval append : [a, m1, m2, m3] duplicable a =>\n  (r1: array m1 a, r2: array m2 a) ->\n  array m3 a\n\n(* [blit (r1, ofs1, r2, ofs2, len)] copies the array segment defined by [r1],\n   [ofs1], and [len] into the array segment defined by [r2], [ofs2], and [len]. *)\nval blit : [a, m] duplicable a =>\n  (r1: array m a, ofs1: int, r2: marray a, ofs2: int, len: int) -> ()\n\n(* The following three functions are special cases of [blit] that can be\n   assigned more general types. *)\n\n(* [steal (r1, r2, ofs2)] copies the array [r1] into the array segment defined\n   by [r2], [ofs2], and [length r1]. The array [r1] is deprived of the ownership\n   of its elements, which is transferred to [r2]. *)\n\nval steal : [a, m]\n  (consumes r1: array m a, r2: marray a, ofs2: int) ->\n  (| r1 @ array m unknown)\n\n(* [overwrite (r1, ofs1, r2)] copies the array segment defined by [r1], [ofs1],\n   and [length r2] into the array [r2], whose previous contents is completely\n   lost. This operation performs a strong update over [r2]: the types [a] and\n   [b] need not coincide. *)\n\nval overwrite : [a, m] duplicable a =>\n  (r1: array m a, ofs1: int, consumes r2: marray unknown) ->\n  (| r2 @ marray a)\n\n(* [transfer (r1, r2)] copies the array [r1] into the array [r2]. The two\n   arrays must have the same length. [transfer] is a combination of [steal]\n   and [overwrite]: that is, the array [r1] is deprived of the ownership of\n   its elements, which is transferred to [r2]; and the previous contents of\n   [r2] is completely lost, so a strong update of [r2] is possible. *)\n\nval transfer : [a, m]\n  (consumes r1: array m a, consumes r2: marray unknown) ->\n  (| r1 @ array m unknown * r2 @ marray a)\n\n(* ------------------------------------------------------------------------ *)\n\n(* Filling a segment with a value. *)\n\nval fill_segment : [a] duplicable a => (r: marray a, i: int,   j: int, v: a) -> ()\nval fill         : [a] duplicable a => (r: marray a, i: int, len: int, v: a) -> ()\nval fill_array   : [a] duplicable a => (r: marray a, v: a) -> ()\n\n(* ------------------------------------------------------------------------ *)\n\n(* Generic loops over a semi-open interval. *)\n\n(* We use semi-open intervals of the form [i, j). That is, the index [i] is\n   part of the interval, and the index [j] is not part of it. The interval\n   is non-empty if and only if [i < j] holds. *)\n\n(* The following four functions actually do not read (or write) any array\n   elements. They deal only with the management of the current index. *)\n\nval fold_segment : [a] (\n  s: sense,\n  i: int, j: int, consumes accu: a,\n  f: (int, consumes a) -> a\n) -> a\n\nval iter_segment : [p : perm] (\n  s: sense,\n  i: int, j: int,\n  f: (int | p) -> ()\n  | p) -> ()\n\n(* Generic loops over an entire array. *)\n\nval fold_array : [a, m, b] (\n  s: sense,\n  r: array m a, consumes seed: b,\n  f: (int, consumes b | r @ array m a) -> b\n) -> b\n\nval iter_array : [a, m, p : perm] (\n  s: sense,\n  r: array m a,\n  f: (int | r @ array m a * p) -> ()\n  | p) -> ()\n\n(* ------------------------------------------------------------------------ *)\n\n(* A variant of the above loops, where [f] receives not only an index [i],\n   but also the corresponding array element. Note that [f] does not have\n   permission to access the array [r]. *)\n\nval foldi : [a, m, b] (\n  s: sense,\n  r: array m a,\n  consumes seed: b,\n  f: (int, a, consumes accu: b) -> b\n) -> b\n\nval iteri : [a, m, p : perm] (\n  s: sense,\n  r: array m a,\n  f: (int, a | p) -> ()\n  | p) -> ()\n\n(* A degenerate variant of the above loops, where [f] has access to the\n   element, but not the index [i]. Note that [f] does not have permission\n   to access the array [r]. *)\n\nval fold : [a, m, b] (\n  s: sense,\n  r: array m a,\n  consumes seed: b,\n  f: (a, consumes accu: b) -> b\n) -> b\n\nval iter : [a, m, p : perm] (\n  s: sense,\n  r: array m a,\n  f: (a | p) -> ()\n  | p) -> ()\n\n(* -------------------------------------------------------------------------- *)\n\n(* Searching. *)\n\n(* [first_from (r, i, f)] returns the position j of the first element after the\n * [i]-th verifying [f r[j]]. *)\nval first_from : [a, m, p: perm] (array m a, int, (a | p) -> bool | p) -> int\n\n(* [last_from (r, i, f)] returns the position j of the last element before the\n * [i]-th verifying [f r[j]]. *)\nval last_from : [a, m, p: perm] (array m a, int, (a | p) -> bool | p) -> int\n\n(* [first (r, f)] is [first_from (r, 0, f)]. *)\nval first : [a, m, p: perm] (array m a, (a | p) -> bool | p) -> int\n\n(* [last (r, f)] is [last_from (r, length r - 1, f)]. *)\nval last : [a, m, p: perm] (array m a, (a | p) -> bool | p) -> int\n\n(* [search (needle, haystack, eq)] returns the position of the first occurence\n * of [needle] in [haystack], using [eq] to compare elements of both arrays.\n * It returns [length haystack] if [needle] is not in [haystack]. *)\nval search : [a, m1, m2, p : perm] duplicable a =>\n  (array m1 a, array m2 a, (a, a | p) -> bool | p) -> int\n\n(* -------------------------------------------------------------------------- *)\n\n(* Sorting. *)\n\nval sort : [a, p : perm] duplicable a => (\n  cmp: (a, a | p) -> int,\n  r: marray a\n  | p) -> ()\n\nval sort_initial_segment : [a, p : perm] duplicable a => (\n  cmp: (a, a | p) -> int,\n  r: marray a,\n  l: int\n  | p) -> ()\n\nval sorted : [a, m1, m2, p : perm] duplicable a => (\n  cmp: (a, a | p) -> int,\n  r: array m1 a\n  | p) -> array m2 a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Miscellaneous. *)\n\n(* [above_pow] repeatedly multiplies [x] by 2 until either [x >= n] holds\n   or [2 * x] exceeds the maximum array length. *)\n\nval above_pow: (x: int, n: int) -> int\n\n");q("/corelib/autoarray.mz","(* ------------------------------------------------------------------------ *)\n\n(* The type of arrays is axiomatized. *)\n\n(* Arrays can be either mutable or immutable. *)\nabstract mut : type\nfact exclusive mut\n\nabstract immut : type\nfact duplicable immut\n\n(* Arrays are mutable if the first type parameter is exclusive, immutable\n * otherwise. *)\nabstract array m +a : type\nfact duplicable m => duplicable a => duplicable (array m a)\nfact exclusive m => exclusive (array m a)\n\n(* Aliases for immutable and mutable arrays. *)\nalias iarray a = array immut a\nalias marray a = array mut a \n\n(* A Mezzo array is implemented as an OCaml array. Because Mezzo arrays\n   are exclusive, they include an adopter field. We use the first slot\n   of the array for this purpose, so a Mezzo array of length [n] is\n   represented as an OCaml array of length [n+1]. *)\n\n(* ------------------------------------------------------------------------ *)\n\n(* This type (which is isomorphic to [bool]) is used to indicate the\n   direction of iterations over arrays. *)\n\ndata sense =\n  | Down\n  | Up\n\n");q("/corelib/autoarray.mzi","(* ------------------------------------------------------------------------ *)\n\n(* The type of arrays. *)\n\n(* Arrays can be either mutable or immutable. *)\nabstract mut : type\nfact exclusive mut\n\nabstract immut : type\nfact duplicable immut\n\n(* Arrays are mutable if the first type parameter is exclusive, immutable\n * otherwise. *)\nabstract array m +a : type\nfact duplicable m => duplicable a => duplicable (array m a)\nfact exclusive m => exclusive (array m a)\n\n(* Aliases for immutable and mutable arrays. *)\nalias iarray a = array immut a\nalias marray a = array mut a \n\n(* ------------------------------------------------------------------------ *)\n\n(* This type (which is isomorphic to [bool]) is used to indicate the\n   direction of iterations over arrays. *)\n\ndata sense =\n  | Down\n  | Up\n\n");q("/corelib/autoload","# This is the name of the various modules that should be auto-loaded when\n# type-checking any given Mezzo file. Warning: this file should be Unix-style\n# (i.e. only \\n separators).\ninfo\nbool\nphysical\nint\noption\nref\nprint\nautoarray\n");q("/corelib/bool.mz",'(* This module comes first. Although the type of Booleans is defined in\n   a library, it is essential, because some of the primitive operations\n   produce a Boolean result. The evaluation of these operations by the\n   interpreter will fail unless the data constructors [True] and [False]\n   appear in the environment; so, this module must have been evaluated\n   first. *)\n\n(* This module is currently in a preliminary state. We have two types of\n   Boolean, without or with permission indices, which is unsatisfactory.\n   Furthermore, the treatment of the lazy Boolean connectives (conjunction,\n   etc.) is yet to be invented. TEMPORARY *)\n\n(* Ideally, immutable types should be slim, which will allow a Mezzo\n   boolean to coincide with an ocaml Boolean. TEMPORARY *)\n\n(* The type [rich_bool] of Booleans indexed with permissions. *)\n\ndata rich_bool (p : perm) (q: perm) =\n  | False { | p }\n  | True { | q }\n\n(* The type [bool] of Booleans. *)\n\nalias bool = rich_bool empty empty\n\n(* Constants. *)\n\nval false : bool = False\nval true : bool = True\n\n(* Negation. *)\n\nval not [p : perm, q : perm] (consumes b : rich_bool p q) : rich_bool q p =\n  match b with\n  | False -> True\n  | True -> False\n  end\n\n(* Conjunction and disjunction. *)\n\nval conjunction\n  [q : perm, p1 : perm, p2 : perm, s : perm]\n  (\n    consumes b1 : rich_bool q p1,\n    b2: (| s * consumes p1) -> rich_bool q p2\n  | s\n  ) : rich_bool q p2 =\n  match b1 with\n  | False ->\n      False\n  | True ->\n      b2()\n  end\n\nval disjunction\n  [q1 : perm, q2 : perm, p : perm, s : perm]\n  (\n    consumes b1 : rich_bool q1 p,\n    b2: (| s * consumes q1) -> rich_bool q2 p\n  | s\n  ) : rich_bool q2 p =\n  match b1 with\n  | False ->\n      b2()\n  | True ->\n      True\n  end\n\n(* Conversion to a bare Boolean. *)\n\nval strip [p : perm, q : perm] (b: rich_bool p q) : bool =\n  if b then true else false\n\n(*\nLocal Variables:\ncompile-command: "../mezzo bool.mz"\nEnd:\n*)\n');q("/corelib/bool.mzi",'(* The type [rich_bool] of Booleans indexed with permissions. *)\n\ndata rich_bool (p : perm) (q: perm) =\n  | False { | p }\n  | True { | q }\n\n(* The type [bool] of Booleans. *)\n\nalias bool = rich_bool empty empty\n\n(* Constants. *)\n\n(* We put concrete types here. Having "false @ bool" makes it impossible to\n * derive "false @ bool * p <= false @ rich_bool p empty", which is sometimes\n * convenient. *)\nval false : False\nval true : True\n\n(* Negation. *)\n\nval not : [p : perm, q : perm] (consumes rich_bool p q) -> rich_bool q p\n\n(* Conjunction and disjunction. *)\n\nval conjunction :\n  [q : perm, p1 : perm, p2 : perm, s : perm]\n  (\n    consumes b1 : rich_bool q p1,\n    b2: (| s * consumes p1) -> rich_bool q p2\n  | s\n  ) -> rich_bool q p2\n\nval disjunction :\n  [q1 : perm, q2 : perm, p : perm, s : perm]\n  (\n    consumes b1 : rich_bool q1 p,\n    b2: (| s * consumes q1) -> rich_bool q2 p\n  | s\n  ) -> rich_bool q2 p\n\n(* Conversion to a bare Boolean. *)\n\nval strip: [p : perm, q : perm] (b: rich_bool p q) -> bool\n\n');q("/corelib/info.mz","val info [a] (x: a): () = ()\n");q("/corelib/info.mzi","(* A special function that does nothing at run-time but that is caught by the\n * type-checker so as to dump information about a variable. *)\nval info: [a] a -> ()\n");q("/corelib/int.mz","(* The primitive type [int] of integers. *)\n\nabstract int\nfact duplicable int\n\n(* Primitive arithmetic operations on integers. *)\n\nval ( + ) : (int, int) -> int = builtin _mz_iadd\nval ( - ) : (int, int) -> int = builtin _mz_isub\nval ( * ) : (int, int) -> int = builtin _mz_imul\nval ( / ) : (int, int) -> int = builtin _mz_idiv\n\n(* Primitive bitwise operations on integers. *)\n\nval ( & )  : (int, int) -> int  = builtin _mz_iand\n\n(* Primitive comparison operators on integers. *)\n\nval ( = )  : (int, int) -> bool = builtin _mz_ieq\nval ( <> ) : (int, int) -> bool = builtin _mz_ine\nval ( < )  : (int, int) -> bool = builtin _mz_ilt\nval ( <= ) : (int, int) -> bool = builtin _mz_ile\nval ( > )  : (int, int) -> bool = builtin _mz_igt\nval ( >= ) : (int, int) -> bool = builtin _mz_ige\n\n(* Defined operations on integers. *)\n\nval min (x: int, y: int) : int =\n  if x <= y then x else y\n\nval max (x: int, y: int) : int =\n  if x <= y then y else x\n\n");q("/corelib/int.mzi","(* The primitive type [int] of integers. *)\n\nabstract int\nfact duplicable int\n\n(* Primitive arithmetic operations on integers. *)\n\nval ( + ) : (int, int) -> int\nval ( - ) : (int, int) -> int\nval ( * ) : (int, int) -> int\nval ( / ) : (int, int) -> int\n\n(* Primitive bitwise operations on integers. *)\n\nval ( & )  : (int, int) -> int\n\n(* Primitive comparison operators on integers. *)\n\nval ( = )  : (int, int) -> bool\nval ( <> ) : (int, int) -> bool\nval ( < )  : (int, int) -> bool\nval ( <= ) : (int, int) -> bool\nval ( > )  : (int, int) -> bool\nval ( >= ) : (int, int) -> bool\n\n(* Defined operations on integers. *)\n\nval max : (int, int) -> int\nval min : (int, int) -> int\n\n");q("/corelib/lock.mz",'abstract lock (p: perm)\nfact duplicable (lock p)\n\n(* A lock is currently implemented as a mutable Boolean block.\n   Of course, this implementation is safe only in a sequential\n   setting, and will have to be modified if/when Mezzo receives\n   a concurrent execution scheme. *)\n\n(* Encoding the invariant that [p] is available when the lock\n   is free is of course non-essential, but allows saving a few\n   type casts. *)\n\ndata mutable private_lock (p : perm) =\n | Free {| p }\n | Taken\n\n(* Defining [locked] as a synonym for [Taken] is again non-essential\n   and allows saving a few type casts. *)\n\nalias locked =\n    Taken\n\n(* Creation. *)\n\nval new [p: perm] (| consumes p) : lock p =\n  let l : private_lock p = Free in\n  (* This unsafe type cast causes the permission [l @ lock p] to appear. *)\n  magic::magic l\n\n(* To acquire a lock, we check that it is currently [Free], and\n   change it to [Taken]. *)\n\nval try_acquire [p: perm] (l: lock p) : rich_bool empty (p * l @ locked) =\n  (* This unsafe type cast causes the permission [l @ private_lock p] to appear. *)\n  let () : (| l @ private_lock p) = magic::magic () in\n  (* This allows us to inspect the lock. *)\n  match l with\n  | Free ->\n      tag of l <- Taken;\n      True\n  | Taken ->\n      False\n  end\n\nval acquire [p: perm] (l: lock p) : (| p * l @ locked) =\n  if not (try_acquire l) then fail\n\nval release [p: perm] (l: lock p | consumes (p * l @ locked)) : () =\n  (* The lock is known to be [Taken]. Change its tag back to [Free]. *)\n  tag of l <- Free\n\n(* [borrow] is a well-parenthesized [acquire/release] pair. *)\n\nval borrow [p: perm, q: perm, b] (\n  l: lock p,\n  f: (| p * consumes q) -> b\n| consumes q\n) : b =\n  acquire l;\n  (* We could pass [l @ locked] to [f], but we don\'t, so [f] cannot\n     release the lock, either intentionally or by mistake. *)\n  let x = f() in\n  release l;\n  x\n\n(*\nLocal Variables:\ncompile-command: "../mezzo lock.mz"\nEnd:\n*)\n');q("/corelib/lock.mzi","(* A lock protects a permission [p], which usually is not duplicable.\n   The lock itself is duplicable, so multiple threads may simultaneously\n   attempt to acquire it. *)\n\nabstract lock (p: perm)\nfact duplicable (lock p)\n\n(* The permission [l @ locked], where [l] is a lock, is a witness that the\n   lock [l] is held. This permission is not duplicable. This allows\n   the type system to prevent calling [release l] unless the lock [l]\n   is held. *)\n\nabstract locked\n\n(* Creation. *)\n\n(* The invariant [p] is fixed at creation time. *)\n\n(* When the lock is created, it is available; for this reason, [new]\n   consumes the permission [p]. One could offer a variant of [new]\n   where the lock is initially held; this variant would not require\n   [p], and would produce [l @ locked]. *)\n\nval new: [p: perm] (| consumes p) -> lock p\n\n(* Acquisition. *)\n\nval acquire:     [p: perm] (l: lock p) -> (| p * l @ locked)\nval try_acquire: [p: perm] (l: lock p) -> rich_bool empty (p * l @ locked)\n\n(* Release. *)\n\nval release: [p: perm] (l: lock p | consumes (p * l @ locked)) -> ()\n\n(* A well-balanced acquire/release pair. *)\n\nval borrow: [p: perm, q: perm, b] (\n  l: lock p,\n  f: (| p * consumes q) -> b\n| consumes q\n) -> b\n\n");q("/corelib/magic.mz","(* An unsafe cast. *)\n\n(* It is recommended to always explicitly instantiate the type\n   parameters [a] and [b] when using this cast, as otherwise,\n   the permissions that are consumed and produced would not be\n   clearly controlled. *)\n\nval magic : [a, b] (consumes x: a) -> b =\n  builtin _mz_magic\n\n");q("/corelib/magic.mzi","(* An unsafe cast. *)\n\n(* It is recommended to always explicitly instantiate the type\n   parameters [a] and [b] when using this cast, as otherwise,\n   the permissions that are consumed and produced would not be\n   clearly controlled. *)\n\nval magic : [a, b] (consumes a) -> b\n\n");q("/corelib/nest.mz",'(* Nesting requires no runtime support; its implementation is trivial. *)\n\nabstract nests (x : value) (p : perm) : perm\nfact duplicable (nests x p)\n\nval nest [x : value, p : perm, a] exclusive a => (| x @ a * consumes p) : (| nests x p) =\n  magic::magic ()\n\nabstract punched (a : type) (p : perm) : type\n\nval focus [x : value, p : perm, a] exclusive a => (| consumes x @ a * nests x p) : (| x @ punched a p * p) =\n  magic::magic ()\n\nval defocus [x : value, p : perm, a] (| consumes (x @ punched a p * p)) : (| x @ a) =\n  magic::magic ()\n\nval nest_punched [x : value, p : perm, a, q : perm] (| x @ punched a q * consumes p) : (| nests x p) =\n  magic::magic ()\n\n(* TEMPORARY it is not very elegant to have both [nest] and [nest_punched].\n   A more general approach, allowing multi-focusing, would be more elegant,\n   but would need to be built into the system at a more primitive level. *)\n\nval consult [x : value, p : perm, a, pre : perm, b] exclusive a => (\n  f: (| p * consumes pre) -> b\n| x @ a * nests x p * \n  consumes pre\n) : b =\n  focus ();\n  let y = f() in\n  defocus [x, p, a] ();\n  y\n\n(*\nLocal Variables:\ncompile-command: "../mezzo nest.mz"\nEnd:\n*)\n');q("/corelib/nest.mzi",'(* Boyland\'s nesting is available in Mezzo, thanks to the following primitive\n   types and operations. *)\n\n(* A nesting witness, [nests x p], is a duplicable permission, which guarantees\n   that an exclusive permission for [x] implies the permission [p]. Because\n   nesting is monotonic (it cannot be undone), a nesting witness is duplicable. *)\n\nabstract nests (x : value) (p : perm) : perm\nfact duplicable (nests x p)\n\n(* Nesting consumes the permission [p] and produces a nesting witness [nests x p].\n   The instruction [nest [x, p] ()] is somewhat analogous to an adoption\n   instruction, [give p to x]. The permission [p] becomes implicitly associated\n   with the address [x]. *)\n\nval nest: [x : value, p : perm, a] exclusive a => (| x @ a * consumes p) -> (| nests x p)\n\n(* A punched type [punched a p] is used to keep track of the fact that a nested\n   permission [p] has been temporarily recovered by focusing on [x]. This type\n   is not duplicable. It cannot be considered exclusive either; this prevents\n   double focusing. *)\n\nabstract punched (a : type) (p : perm) : type\n\n(* Focusing allows temporarily recovering a permission [p] that was nested in [x].\n   It requires an exclusive permission for [x], as well a nesting witness. It\n   produces a punched permission for [x]. The syntax is [focus [x, p] ()]. *)\n\nval focus: [x : value, p : perm, a] exclusive a => (| consumes x @ a * nests x p) -> (| x @ punched a p * p)\n\n(* Defocusing is the reverse operation. The syntax is [defocus [x] ()]. *)\n\nval defocus: [x : value, p : perm, a] (| consumes (x @ punched a p * p)) -> (| x @ a)\n\n(* Nesting is permitted also while a region is punched. *)\n\nval nest_punched: [x : value, p : perm, a, q : perm] (| x @ punched a q * consumes p) -> (| nests x p)\n\n(* [consult] is a short-hand for a well-parenthesized use of [focus] and [defocus].\n   Its type is quite heavy, due to the higher-order pattern used here. *)\n\nval consult: [x : value, p : perm, a, pre : perm, b] exclusive a => (\n  f: (| p * consumes pre) -> b\n| x @ a * nests x p * \n  consumes pre\n) -> b\n\n(*\nLocal Variables:\ncompile-command: "../mezzo nest.mz"\nEnd:\n*)\n');q("/corelib/option.mz",'data option a =\n  | None\n  | Some { contents: a }\n\nval none =\n  None\n\nval some (consumes contents: unknown) : Some { contents } =\n  Some { contents }\n\nval force [a] (consumes o: option a) : a =\n  match o with\n  | Some ->\n      o.contents\n  | None ->\n      fail\n  end\n\n(*\nLocal Variables:\ncompile-command: "../mezzo option.mz"\nEnd:\n*)\n\n');q("/corelib/option.mzi","(* The type [option]. *)\n\ndata option a =\n  | None\n  | Some { contents: a }\n\n(* Constructors. *)\n\n(* We could assign precise types to the constructors: [none] has type [None],\n   and [some x] has type [Some { contents: a }] if [x] has type [a]. For the\n   moment, let's try and see if we can work with the following more abstract\n   types. *)\n\nval none : None\nval some : (contents: unknown) -> Some { contents }\n\n(* A destructor, which can fail at runtime. *)\n\nval force: [a] (consumes option a) -> a\n");q("/corelib/physical.mz","(* Physical equality. *)\n\n(* Physical equality could be restricted to exclusive types. On the one\n   hand, this may sound like a good idea, because it means that equality\n   or disequality of immutable structures would be unobservable, and the\n   compiler would be free to share (or not share) them. On the other hand,\n   it would be a bad idea, because it would prevent the programmer from\n   explicitly implementing sharing optimizations (such as hash-consing)\n   over immutable structures. *)\n\nval ( == ) : (x: unknown, y: unknown) -> rich_bool empty (x = y) =\n  builtin _mz_address_eq\n\nval ( != ) (x: unknown, y: unknown) : rich_bool (x = y) empty =\n  not (x == y)\n\n");q("/corelib/physical.mzi","(* Physical equality, a primitive operation, returns a rich Boolean value.\n   Deconstructing [x == y] yields, in the [RichTrue] branch, an equality\n   between [x] and [y]. *)\n\nval ( == ) : (x: unknown, y: unknown) -> rich_bool empty (x = y)\nval ( != ) : (x: unknown, y: unknown) -> rich_bool (x = y) empty\n\n");q("/corelib/pool.mz",yc);q("/corelib/print.mz","val print : [a] a -> () =\n  builtin _mz_print_value\n");q("/corelib/print.mzi","(* This magic polymorphic [print] function is provided mainly for\n   testing purposes. The Mezzo interpreter and the Mezzo compiler\n   may implement it in different ways. Furthermore, this function\n   is not guaranteed to be protected against cyclic values. Use\n   with caution. *)\n\nval print : [a] a -> ()\n");q("/corelib/ref.mz",'data mutable ref a =\n    Ref { contents: a }\n\nval newref [a] (consumes x: a) : ref a =\n  Ref { contents = x }\n\nval (!) [y : value] (x: ref (=y)): =y =\n  x.contents\n\nval (:=) [a, b] (consumes x: ref a, consumes y: b): (| x @ ref b) =\n  x.contents <- y\n\nval incr (r : ref int) : () =\n  r := !r + 1\n\nval decr (r : ref int) : () =\n  r := !r - 1\n\nval preincr (r : ref int) : int =\n  let x = !r in\n  let x = x + 1 in\n  r := x;\n  x\n\nval predecr (r : ref int) : int =\n  let x = !r in\n  let x = x - 1 in\n  r := x;\n  x\n\nval postincr (r : ref int) : int =\n  let x = !r in\n  r := x + 1;\n  x\n\nval postdecr (r : ref int) : int =\n  let x = !r in\n  r := x - 1;\n  x\n\n(*\nLocal Variables:\ncompile-command: "../mezzo ref.mz"\nEnd:\n*)\n\n');q("/corelib/ref.mzi","data mutable ref a =\n    Ref { contents: a }\n\nval newref  : [a] (consumes a) -> ref a\nval (!)     : [y : value] (ref (=y)) -> =y\nval (:=)    : [y1: value, y2: value] (consumes x: ref (=y1), =y2)\n  -> (| x @ ref (=y2))\n\nval incr    : ref int -> ()\nval decr    : ref int -> ()\n\nval preincr : ref int -> int\nval predecr : ref int -> int\nval postincr: ref int -> int\nval postdecr: ref int -> int\n");q("/corelib/thread.mz","(* TEMPORARY these built-in operations are currently not implemented! *)\n\nval spawn: [p: perm] (\n  f: (| consumes p) -> ()\n| consumes p\n) -> () =\n  builtin __mz_thread_spawn\n\n");q("/corelib/thread.mzi","(* This operation spawns a new thread. The permission [p] is transferred to\n   the new thread. This operation offers no way of waiting for the thread to\n   finish and recovering [p], but this can be done by using channels. *)\n\nval spawn: [p: perm] (\n  f: (| consumes p) -> ()\n| consumes p\n) -> ()\n\n");q("/corelib/tube.mz","(* A tube is a channel that is shared by only two participants.\n   This allows messages of heterogeneous types to be sent over the\n   tube. *)\n\n(* A tube is initially inert. *)\n\nabstract inert\nfact exclusive inert\n\nval new: () -> inert =\n  builtin _mz_tube_new\n\n(* A tube can be prepared for a single message exchange. The\n   type of the message is fixed at this point. This gives rise\n   to two dual permissions, for sending and for receiving. The\n   two ends of the tube are known as the outlet and inlet. This\n   operation does nothing at runtime. *)\n\nabstract outlet -a\nabstract inlet +a\n\nval setup: [a] (consumes c: inert) -> (| c @ outlet a * c @ inlet a) =\n  builtin _mz_tube_setup\n\n(* One permission allows sending, while the other allows receiving. *)\n\n(* We adopt the convention that the receiver recovers the full\n   ownership over the inert tube. This allows the tube to be\n   re-used for further interactions. If [send] is asynchronous,\n   then only the receiver can recover the full permission --\n   it would be unsound for the sender to recover it, as it\n   would then be possible to obtain two [inlet] permissions\n   and use them in the wrong order. If [send] was synchronous,\n   we could decide for either the receiver or the sender to\n   receive full permission; these scenarios can probably be\n   encoded in terms of asynchronous tubes anyway. *)\n\nval send:    [a] (consumes outlet a, consumes a) -> () =\n  builtin _mz_tube_send\n\nval receive: [a] (consumes c: inlet a) -> (a | c @ inert) =\n  builtin _mz_tube_receive\n\n(* This notion of tube is less expressive than Lozes and Villard's\n   automata, because the sender always loses all knowledge of the\n   tube, and it is up to the receiver to establish a new convention\n   (the type of the next message) and somehow transmit it to the\n   other party. In other words, not much useful work can be done\n   with just one tube; one always needs several tubes, or a tube\n   and a standard channel. In contrast, Lozes and Villard are able\n   to impose a complex protocol on a single channel. *)\n\n(* If one is willing to perform a lot of ugly and costly dynamic\n   checks, one might be able to encode any Lozes/Villard protocol\n   as a system composed of two participants, a mediator, channels\n   between each of the participants and the mediator, and tubes\n   (distributed by the mediator) between the participants. The\n   mediator would maintain the state of the automaton and set up\n   the tubes for the next interaction. The participants would need\n   to check at runtime that the state published by the mediator is\n   indeed the state that they expect to be in. *)\n\n");q("/corelib/tube.mzi","(* A tube is a channel that is shared by only two participants.\n   This allows messages of heterogeneous types to be sent over the\n   tube. *)\n\n(* A tube is initially inert. *)\n\nabstract inert\nfact exclusive inert\n\nval new: () -> inert\n\n(* A tube can be prepared for a single message exchange. The\n   type of the message is fixed at this point. This gives rise\n   to two dual permissions, for sending and for receiving. The\n   two ends of the tube are known as the outlet and inlet. This\n   operation does nothing at runtime. *)\n\nabstract outlet -a\nabstract inlet +a\n\nval setup: [a] (consumes c: inert) -> (| c @ outlet a * c @ inlet a)\n\n(* One permission allows sending, while the other allows receiving. *)\n\n(* We adopt the convention that the receiver recovers the full\n   ownership over the inert tube. This allows the tube to be\n   re-used for further interactions. If [send] is asynchronous,\n   then only the receiver can recover the full permission --\n   it would be unsound for the sender to recover it, as it\n   would then be possible to obtain two [inlet] permissions\n   and use them in the wrong order. If [send] was synchronous,\n   we could decide for either the receiver or the sender to\n   receive full permission; these scenarios can probably be\n   encoded in terms of asynchronous tubes anyway. *)\n\nval send:    [a] (consumes outlet a, consumes a) -> ()\nval receive: [a] (consumes c: inlet a) -> (a | c @ inert)\n\n(* This notion of tube is less expressive than Lozes and Villard's\n   automata, because the sender always loses all knowledge of the\n   tube, and it is up to the receiver to establish a new convention\n   (the type of the next message) and somehow transmit it to the\n   other party. In other words, not much useful work can be done\n   with just one tube; one always needs several tubes, or a tube\n   and a standard channel. In contrast, Lozes and Villard are able\n   to impose a complex protocol on a single channel. *)\n\n(* If one is willing to perform a lot of ugly and costly dynamic\n   checks, one might be able to encode any Lozes/Villard protocol\n   as a system composed of two participants, a mediator, channels\n   between each of the participants and the mediator, and tubes\n   (distributed by the mediator) between the participants. The\n   mediator would maintain the state of the automaton and set up\n   the tubes for the next interaction. The participants would need\n   to check at runtime that the state published by the mediator is\n   indeed the state that they expect to be in. *)\n\n");q("/stdlib/bfs.mz","open list\nopen pool\nopen queue\n\nval traverse\n  [unvisited, visiting, visited, p : perm]\n  exclusive visited =>\n  (\n    (* A pool of all nodes. *)\n    nodes: pool unvisited,\n    (* A list of the root nodes. *)\n    roots: list dynamic,\n    (* A function that changes the state of a node from [unvisited] to [visiting]. *)\n    pre: (consumes node: unvisited | p) -> (| node @ visiting),\n    (* A function that changes the state of a node from [visiting]\n       to [visited] and returns its successors. *)\n    post: (consumes node: visiting | p) -> (list dynamic | node @ visited)\n    (* The permission [p] required by [pre] and [post]. *)\n    | p\n  ) \n:\n  (* A new pool of the visited nodes. *)\n  pool visited\n  =\n\n  (* Create a new pool. *)\n  let completed = Pool in\n\n  (* Create a waiting queue of the discovered, but not completed, nodes. *)\n  let waiting = queue::create () in\n\n  (* Examining a node. If it is new, we change its state to [visiting]\n     and enqueue it. *)\n  let examine (node: dynamic |\n    nodes @ pool unvisited *\n    waiting @ fifo visiting *\n    completed @ pool visited *\n    p\n  ) : () =\n    (* Perform a dynamic ownership test. *)\n    if nodes owns node then begin\n      (* This node has not been reached yet. *)\n      take node from nodes;\n      (* Change its state to [visiting]. *)\n      pre node;\n      (* Enqueue it. *)\n      queue::insert (node, waiting)\n    end\n  in\n\n  (* The main loop. *)\n  let rec loop (|\n    nodes @ pool unvisited *\n    waiting @ queue::fifo visiting *\n    completed @ pool visited *\n    p\n  ) : () =\n    (* Take a node off the queue. *)\n    match queue::retrieve waiting with\n    | None ->\n        ()\n    | Some { contents = node } ->\n        (* Change its state to [visited]. *)\n        let successors = post node in\n        (* Place it in the final pool. *)\n        give node to completed;\n       (* Examine its successors. *)\n       list::iter (successors, examine);\n       (* Continue. *)\n       loop()\n    end\n  in\n\n  (* Examine each of the roots, and enter the main loop. *)\n  list::iter (roots, examine);\n  loop();\n\n  (* Return the new pool. *)\n  completed\n");q("/stdlib/bfs.mzi","open list\nopen pool\n\n(* Generic breadth-first search. *)\n\nval traverse:\n  [unvisited, visiting, visited, p : perm]\n  exclusive visited =>\n  (\n    (* A pool of all nodes. *)\n    nodes: pool unvisited,\n    (* A list of the root nodes. *)\n    roots: list dynamic,\n    (* A function that changes the state of a node from [unvisited] to [visiting]. *)\n    pre: (consumes node: unvisited | p) -> (| node @ visiting),\n    (* A function that changes the state of a node from [visiting]\n       to [visited] and returns its successors. *)\n    post: (consumes node: visiting | p) -> (list dynamic | node @ visited)\n    (* The permission [p] required by [pre] and [post]. *)\n    | p\n  ) \n->\n  (* A new pool of the visited nodes. *)\n  pool visited\n");q("/stdlib/bucket.mz",'(* This module is used by the [hashtable] module, but could also be useful\n   per se. It offers mutable lists of key-value pairs. *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A bucket is a mutable list of entries. Each entry holds a key and a value. *)\n\ndata bucket k a =\n  | BNil\n  | mutable BCons { key: k; value_: a; tail: bucket k a }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Search. *)\n\nval rec mem [k, a] (\n  equal: (k, k) -> bool,\n  x: k,\n  b: bucket k a\n) : bool =\n  match b with\n  | BNil ->\n      false\n  | BCons { key; tail } ->\n      equal (x, key) || mem (equal, x, tail)\n  end\n\nval rec assoc [k, a, p : perm] duplicable a => (\n  equal: (k, k | p) -> bool,\n  x: k,\n  b: bucket k a\n  | p\n) : option a =\n  match b with\n  | BNil ->\n      none\n  | BCons { key; value_; tail } ->\n      if equal (x, key) then some value_ else assoc (equal, x, tail)\n  end\n\nval rec assoc_all [k, a, p : perm] duplicable a => (\n  equal: (k, k | p) -> bool,\n  x: k,\n  b: bucket k a\n  | p\n) : list::list a =\n  match b with\n  | BNil ->\n      list::nil\n  | BCons { key; value_; tail } ->\n      if equal (x, key) then list::cons (value_, assoc_all (equal, x, tail)) else assoc_all (equal, x, tail)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Removal of a cell. *)\n\n(* [remove (b, ok)] looks for the first cell whose key satisfies the predicate\n   [ok] and (if it finds one) removes it. It returns a pair of the new list\n   head and the value that was found, if one was found. *)\n\nval remove [k, a, p : perm] (\n  consumes b: bucket k a,\n  ok: (k | p) -> bool\n  | p\n) : (bucket k a, option a) =\n\n  (* Write a loop that works over two consecutive cells. We work under the\n     assumption that [prev] does not satisfy [ok], so it remains the list\n     head after the removal. The loop returns the value that was found, if\n     one was found. *)\n  let rec loop (\n    consumes prev: BCons { key: k; value_: a; tail = this },\n    consumes this: bucket k a\n  | p) : (option a | prev @ bucket k a) =\n    match this with\n    | BNil ->\n        none\n    | BCons { key; value_ } ->\n        if ok key then begin\n         prev.tail <- this.tail;\n         some value_\n       end\n       else\n         loop (this, this.tail)\n    end\n  in\n\n  match b with\n  | BNil ->\n      (* If the list is empty, return it. *)\n      b, none\n  | BCons { key; value_ } ->\n      if ok key then\n       (* If the first cell matches, return the list tail. *)\n       b.tail, some value_\n      else\n       (* Otherwise, enter the above loop, and return the list head. *)\n       b, loop (b, b.tail)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* The following two functions serve in the definition of [update] below. *)\n\n(* Optional insertion. *)\n\nval insert [k, a] (\n  consumes x: k,\n  consumes ov: option a,\n  consumes b: bucket k a\n) : bucket k a =\n  (* There is a merge warning here; this is because we\'re actually merging [ov]\n   * into [option unknown]. Indeed, we first perform a subtraction (when the\n   * context provides a type annotation), and then we try to merge the remaining\n   * pieces. This allows the user to provide partial hints for merge situations.\n   * *)\n  match ov with\n  | None ->\n      b\n  | Some { contents = v } ->\n      BCons { key = x; value_ = v; tail = b }\n  end\n\n(* Update or removal of the list head. *)\n\nval update_or_remove [k, a] (\n  consumes b: BCons { key: k; value_: unknown; tail: bucket k a },\n  consumes ov: option a\n) : bucket k a =\n  match ov with\n  | None ->\n      b.tail\n  | Some { contents = v } ->\n      b.value_ <- v;\n      b\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Update. *)\n\n(* [update (equal, b, x, f)] looks for an entry whose key is [equal] to [x]\n   in the bucket [b]. It calls the user-supplied function [f] exactly once,\n   and passes it either the value [v] that is associated with the key [x],\n   or nothing, if the key [x] does not appear in the bucket. The function\n   [f] returns either a new value, or nothing. In the former case, the new\n   value replaces the value [v]. In the latter case, the key [x] is removed\n   (if it was there at all). An updated bucket is returned. *)\n\nval update [k, a, pre : perm, post : perm] (\n  equal: (k, k) -> bool,\n  consumes b: bucket k a,\n  consumes x: k,\n  f: (consumes (option a | pre)) -> (option a | post)\n  | consumes pre\n) : (bucket k a | post) =\n\n  (* Write a loop that works over two consecutive cells. We work under the\n     assumption that [prev] does not satisfy [ok], so it remains the list\n     head after the loop. *)\n  let rec loop (\n    consumes prev: BCons { key: k; value_: a; tail = this },\n    consumes this: bucket k a\n  | consumes x @ k * consumes pre\n  ) : (| prev @ bucket k a | post) =\n    match this with\n    | BNil ->\n        (* The desired key was not found. Invoke [f] with argument [none]. *)\n        prev.tail <- insert (x, f none, this)\n    | BCons { key; value_ } ->\n        if equal (x, key) then\n         (* The desired key was found. Invoke [f] with argument [some value]. *)\n         prev.tail <- update_or_remove (this, f (some value_))\n       else\n         loop (this, this.tail)\n    end\n  in\n\n  match b with\n  | BNil ->\n      (* The desired key was not found. Invoke [f] with argument [none]. *)\n      insert (x, f none, b)\n  | BCons { key; value_ } ->\n      if equal (x, key) then\n       (* The desired key was found. Invoke [f] with argument [some value]. *)\n       update_or_remove (b, f (some value_))\n      else begin\n       (* Otherwise, enter the above loop. The list head does not change. *)\n       loop (b, b.tail);\n       b\n      end\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* Non-destructive iteration over the elements of a bucket. *)\n\n(* For simplicity, we assign [fold] a type that does not allow performing\n   a strong update on the keys or values. A more general type exists. *)\n\nval rec fold [k, a, b] (\n  this: bucket k a,\n  consumes accu: b,\n  f: (k, a, consumes b) -> b\n) : b =\n  match this with\n  | BNil ->\n      accu\n  | BCons { key; value_; tail } ->\n      fold (tail, f (key, value_, accu), f)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Destructive iteration over the cells of a bucket. Each cell is presented in\n   turn to the function [f]. Note that the cells that are presented to [f] are\n   detached, i.e., their [tail] field is garbage. *)\n\nval rec iter_bucket_down [k, a, p : perm] (\n  consumes b: bucket k a,\n  f: (consumes b: BCons { key: k; value_: a; tail: unknown } | p) -> ()\n  | p\n) : () =\n  match b with\n  | BNil ->\n      ()\n  | BCons ->\n      (* Iteration from the end down to the beginning of the list. *)\n      iter_bucket_down (b.tail, f);\n      f b\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Length. *)\n\nval length [k, a] (b: bucket k a) : int =\n  let rec loop (b: bucket k a, accu: int) : int =\n    match b with\n    | BNil ->\n       accu\n    | BCons ->\n       loop (b.tail, accu + 1)\n    end\n  in\n  loop (b, 0)\n\n(*\nLocal Variables:\ncompile-command: "../mezzo bucket.mz"\nEnd:\n*)\n');q("/stdlib/bucket.mzi","(* This module is used by the [hashtable] module, but could also be useful\n   per se. It offers mutable lists of key-value pairs. *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A bucket is a mutable list of entries. Each entry holds a key and a value. *)\n\ndata bucket k a =\n  | BNil\n  | mutable BCons { key: k; value_: a; tail: bucket k a }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Search. *)\n\nval mem : [k, a] (\n  equal: (k, k) -> bool,\n  x: k,\n  b: bucket k a\n) -> bool\n\nval assoc: [k, a, p : perm] duplicable a => (\n  equal: (k, k | p) -> bool,\n  x: k,\n  b: bucket k a\n  | p\n) -> option a\n\nval assoc_all: [k, a, p : perm] duplicable a => (\n  equal: (k, k | p) -> bool,\n  x: k,\n  b: bucket k a\n  | p\n) -> list::list a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Removal and update. *)\n\n(* [remove (b, ok)] looks for the first cell whose key satisfies the predicate\n   [ok] and (if it finds one) removes it. It returns a pair of the new list\n   head and the value that was found, if one was found. *)\n\nval remove : [k, a, p : perm] (\n  consumes b: bucket k a,\n  ok: (k | p) -> bool\n  | p\n) -> (bucket k a, option a)\n\n(* [update (equal, b, x, f)] looks for an entry whose key is [equal] to [x]\n   in the bucket [b]. It calls the user-supplied function [f] exactly once,\n   and passes it either the value [v] that is associated with the key [x],\n   or nothing, if the key [x] does not appear in the bucket. The function\n   [f] returns either a new value, or nothing. In the former case, the new\n   value replaces the value [v]. In the latter case, the key [x] is removed\n   (if it was there at all). An updated bucket is returned. *)\n\nval update : [k, a, pre : perm, post : perm] (\n  equal: (k, k) -> bool,\n  consumes b: bucket k a,\n  consumes x: k,\n  f: (consumes (option a | pre)) -> (option a | post)\n  | consumes pre\n) -> (bucket k a | post)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* Non-destructive iteration over the elements of a bucket. *)\n\nval fold : [k, a, b] (\n  bucket k a,\n  consumes b,\n  f: (k, a, consumes b) -> b\n) -> b\n\n(* Destructive iteration over the cells of a bucket. Each cell is presented in\n   turn to the function [f]. Note that the cells that are presented to [f] are\n   detached, i.e., their [tail] field is garbage. *)\n\nval iter_bucket_down : [k, a, p : perm] (\n  consumes b: bucket k a,\n  f: (consumes b: BCons { key: k; value_: a; tail: unknown } | p) -> ()\n  | p\n) -> ()\n\n(* -------------------------------------------------------------------------- *)\n\n(* Length. *)\n\nval length: [k, a] bucket k a -> int\n\n");q("/stdlib/channel.mz",'open lock\nopen queue\nopen condition\n\n(* An implementation of an unbounded-capacity channel based on a FIFO queue,\n   a lock, and a condition variable. *)\n\n(* A channel is a triple of a queue [q], a lock [l] that yields exclusive\n   access to [q], and a condition variable for [l]. A channel is duplicable:\n   multiple threads may simultaneously attempt to send or receive. *)\n\nalias channel a =\n  (q: unknown, l: lock (q @ fifo a), condition l)\n\n(* Channel creation. *)\n\n(* A queue [q] is created and its exclusive permission is straight away\n   hidden by a lock. *)\n\nval new [a] () : channel a =\n  let q = queue::create () in\n  let l : lock (q @ fifo a) = lock::new () in\n  let cond = condition::new l in\n  q, l, cond\n\n(* Sending. *)\n\n(* Acquire the lock, insert the element, wake up any waiting receivers,\n   release the lock. *)\n\nval send [a] (c: channel a, consumes x: a) : () =\n  let q, l, cond = c in\n  acquire l;\n  insert (x, q);\n  if length q = 1 then\n    signal (cond, SignalMany);\n  release l\n\n(* Receiving. *)\n\n(* If there is no message in the queue, wait on the condition variable. *)\n\nval receive [a] (c : channel a) : a =\n  let q, l, cond = c in\n  acquire l;\n\n  (* A call to [loop] requires the lock [l] to be held. The lock is released\n     when the reception finally succeeds. According to the semantics of\n     [wait], the lock is temporarily released while the thread is suspended. *)\n\n  let rec loop (| consumes (q @ fifo a * l @ locked)) : a =\n    match retrieve q with\n    | None ->\n        wait cond;\n        loop()\n    | Some { contents = x } ->\n        release l;\n        x\n    end \n  in\n  loop()\n\n(*\nLocal Variables:\ncompile-command: "../mezzo channel.mz"\nEnd:\n*)\n');q("/stdlib/channel.mzi","(* The type [channel a] describes a channel that can be used to send and\n   receive messages of type [a]. This type is duplicable, so there can be an\n   arbitrary number of senders and receivers. The type [a] need not be\n   duplicable, so a message can imply a transfer of ownership. *)\n\nabstract channel a\nfact duplicable (channel a)\n\nval new:     [a] () -> channel a\nval send:    [a] (channel a, consumes a) -> ()\nval receive: [a] channel a -> a\n\n");q("/stdlib/condition.mz","open lock\n\n(* A condition variable is associated with a lock [l]. It is\n   duplicable: multiple threads may simultaneously attempt to\n   send or receive a signal via this condition variable. *)\n\nabstract condition (l: value)\nfact duplicable (condition l)\n\n(* Creation. *)\n\n(* Creation does not require holding the lock. *)\n\nval new: [p : perm] (l: lock p) -> condition l =\n  builtin _mz_condition_new\n\n(* Waiting for a signal to be sent via a condition variable. *)\n\n(* The call [wait c] requires the lock [l] to be held. The call\n   atomically suspends the current thread and releases the lock.\n   The thread can be awakened at any time (hopefully, this occurs\n   when a signal is received). Then, [wait] re-acquires the lock,\n   and returns, so that, from the point of view of the current\n   thread, the lock is still held when [wait] returns. *)\n\nval wait: [l: value] (condition l | l @ locked) -> () =\n  builtin _mz_condition_wait\n\n(* Sending a signal via a condition variable. *)\n\n(* This call does not require that the lock be held. *)\n\ndata signal_whom =\n  | SignalOne  (* try to awaken just one waiting thread *)\n  | SignalMany (* try to awaken all waiting threads *)\n\nval signal: [l: value] (condition l, signal_whom) -> () =\n  builtin _mz_condition_signal\n\n");q("/stdlib/condition.mzi","open lock\n\n(* A condition variable is associated with a lock [l]. It is\n   duplicable: multiple threads may simultaneously attempt to\n   send or receive a signal via this condition variable. *)\n\nabstract condition (l: value)\nfact duplicable (condition l)\n\n(* Creation. *)\n\n(* Creation does not require holding the lock. *)\n\nval new: [p : perm] (l: lock p) -> condition l\n\n(* Waiting for a signal to be sent via a condition variable. *)\n\n(* The call [wait c] requires the lock [l] to be held. The call\n   atomically suspends the current thread and releases the lock.\n   The thread can be awakened at any time (hopefully, this occurs\n   when a signal is received). Then, [wait] re-acquires the lock,\n   and returns, so that, from the point of view of the current\n   thread, the lock is still held when [wait] returns. *)\n\nval wait: [l: value] (condition l | l @ locked) -> ()\n\n(* Sending a signal via a condition variable. *)\n\n(* This call does not require that the lock be held. *)\n\ndata signal_whom =\n  | SignalOne  (* try to awaken just one waiting thread *)\n  | SignalMany (* try to awaken all waiting threads *)\n\nval signal: [l: value] (condition l, signal_whom) -> ()\n\n");q("/stdlib/control.mz","(* A VERY EXPERIMENTAL pseudo-library for playing with delimited\n   continuations. This library relies on two primitive operations\n   which for the moment are NOT IMPLEMENTED. Furthermore, it is\n   probably not type-safe -- at the very least, I believe that we\n   should forbid storing the permission [answer t] in the heap. *)\n\n(* A pseudo-permission which represents the current answer type. *)\n\nabstract answer (t : type) : perm\n\n(* The primitive operation [reify] turns a suspended computation [f],\n   whose result type [a] and whose control effect is to change the\n   answer type from [b] to [c], into an ordinary function, in CPS\n   style, which expects a continuation of type [a -> b] and produces\n   a final result of type [c]. *)\n\nval reify:\n  [a, b, c]\n  (f: (| consumes answer b) -> (a | answer c)) ->\n  (a -> b) -> c\n=\n  builtin _mz_reify\n\n(* [reset] is implemented in terms of [reify], simply by passing an\n   identity continuation to the reified CPS computation. *)\n\nval reset\n  [a, c]\n  duplicable a => (* because [x] appears under a lambda *)\n  (f: (| consumes answer a) -> (a | answer c)) :\n  c\n=\n  reify f (fun (x: a) : a = x)\n\n(* The primitive operation [shift] captures the current continuation,\n   up to the nearest enclosing [reify], and makes it accessible to\n   the function [f]. It is the exact opposite of [reify]. *)\n\nval shift:\n  [a, b, c]\n  (f: (a -> b) -> c |\n  consumes answer b) -> (a | answer c)\n=\n  builtin _mz_shift\n\n(* [abort] can be defined in terms of [shift], but could also be implemented\n   as a primitive operation. It is potentially more efficient than [shift],\n   as the continuation is not captured: it is thrown away. *)\n\nval abort\n  [a, b, c]\n  duplicable c => (* because [v] appears under a lambda *)\n  (v : c | consumes answer b) : (a | answer c)\n=\n  shift (fun (_ : a -> b) : c = v)\n\n(* TEMPORARY need to understand the duplicable constraints\n   in reset and abort *)\n\n");q("/stdlib/dfs.mz","open list\nopen pool\n\n(* In this approach, we do not need each node to carry a Boolean mark.\n   Instead, we use the hidden [adopter] field for this purpose. If a node is\n   currently adopted by the old pool, then it has not been visited yet. If it\n   is adopted by the new pool, then it has been visited. This technique\n   presents several advantages with respect to a more na\xc3\xafve approach based on\n   Boolean marks: 1- it re-uses the space taken up by the [adopter] field; 2-\n   it does not a priori require the marks to be re-initialized after (or\n   before) each traversal; 3- it allows a strong update, i.e. the nodes that\n   have been visited do not have the same type as the nodes that have not yet\n   been visited. *)\n\nval preorder\n  [unvisited, visited, p : perm]\n  exclusive visited =>\n  (\n    (* A pool of all nodes. *)\n    nodes: pool unvisited,\n    (* A list of the root nodes. *)\n    roots: list dynamic,\n    (* A function that visits a node, changing its state from\n       [unvisited] to [visited], and returns its successors. *)\n    visit: (consumes node: unvisited | p) -> (list dynamic | node @ visited)\n    (* The permission [p] required by [visit]. *)\n    | p\n  ) \n    (* We return a new pool of the visited nodes. *)\n    : pool visited\n  =\n\n  (* Create a new pool that adopts the visited nodes. *)\n  let reached = Pool in\n  \n  let rec dfs (node: dynamic |\n    nodes @ pool unvisited *\n    reached @ pool visited *\n    p\n  ) : () =\n    (* Perform a dynamic ownership test. *)\n    if nodes owns node then begin\n      (* This node has not been visited yet. *)\n      take node from nodes;\n      (* Visit it, and obtain a list of its successors. *)\n      let successors = visit node in\n      (* Mark this node visited by placing it in the new pool. *)\n      give node to reached;\n      (* Examine the successors. *)\n      iter (successors, dfs)\n    end\n  in\n\n  (* Examine each of the roots. *)\n  iter (roots, dfs);\n\n  (* Return the new pool. *)\n  reached\n\n(* For a postorder traversal, our requirements must be slightly different.\n   The action of marking a node as discovered and the action of visiting\n   the node are performed at distinct instants in time. As a result, we\n   need three node states instead of two. *)\n\nval prepostorder\n  [unvisited, visiting, visited, p : perm]\n  exclusive visited =>\n  (\n    (* A pool of all nodes. *)\n    nodes: pool unvisited,\n    (* A list of the root nodes. *)\n    roots: list dynamic,\n    (* A flag that indicates whether we should abort when a cycle is\n       detected. *)\n    detect: bool,\n    (* A function that changes the state of a node from [unvisited]\n       to [visiting] and returns its successors. *)\n    pre: (consumes node: unvisited | p) -> (list dynamic | node @ visiting),\n    (* A function that changes the state of a node from [visiting]\n       to [visited]. *)\n    post: (consumes node: visiting | p) -> (| node @ visited)\n    (* The permission [p] required by [pre] and [post]. *)\n    | p\n  ) \n: (\n  (* A new pool of the visited nodes. *)\n  pool visited,\n  (* An option that indicates: 1. whether a cycle was detected and 2. if so,\n     the list of nodes that were in the state [visiting] when the cycle was\n     detected. These nodes form a path in the graph that ends in a cycle. *)\n  option (list visiting)\n)\n  =\n\n  (* One might think that we need two new pools, which adopt the\n     nodes in the [visiting] and [visited] states. Actually, we\n     only need one pool, which adopts [visited] nodes. The nodes\n     in the [visiting] state can simply be framed out. In short,\n     the [null] adopter pointer serves as the mark for these nodes. *)\n  let completed = Pool in\n\n  (* This reference is used when we have detected a cycle and are\n     building a list on the way back. *)\n  let path = newref nil in\n\n  (* The Boolean value returned by [dfs] is [true] if everything\n     went well and [false] is a cycle was detected. *)\n  let rec dfs (node: dynamic |\n    nodes @ pool unvisited *\n    completed @ pool visited *\n    path @ ref (list visiting) *\n    p\n  ) : bool =\n    (* Perform a dynamic ownership test. *)\n    if nodes owns node then begin\n      (* This node has not been reached yet. *)\n      take node from nodes;\n      (* Change its state to [visiting] and obtain its successors. *)\n      let successors = pre node in\n      (* At this point, the node is not a member of any of the two pools. We\n        own it. Examine its successors, stopping the loop early if a cycle\n        is detected. *)\n      let ok = for_all (dfs, successors) in\n      (* After the recursive call, we still own this node, so we\n        know that its state has not changed: it is still [visiting]. *)\n      if ok then begin\n        (* Change its state to [visited]. *)\n        post node;\n        (* We can now place this node in the final pool. *)\n        give node to completed\n      end\n      else\n       (* If a cycle was detected during the recursive call, push\n          this node onto the path. *)\n       path := cons (node, !path);\n      (* In either case, propagate the result. *)\n      ok\n    end\n    else if completed owns node then\n      (* There is nothing to do. *)\n      true\n    else\n      (* There is a cycle. *)\n      not detect\n  in\n\n  (* Examine each of the roots. *)\n  let ok = for_all (dfs, roots) in\n\n  (* Return a pair of the new pool and (if a cycle was detected)\n     the path that was constructed. *)\n  let outcome : option (list visiting) =\n    if ok then none else some !path\n  in\n  completed, outcome\n\n(* TEMPORARY getting rid of the type annotation on [outcome]\n   would be nice. *)\n\n");q("/stdlib/dfs.mzi","open list\nopen pool\n\n(* A depth-first preorder traversal of a graph. *)\n\n(* The code is polymorphic in the type of the graph nodes. Furthermore,\n   the code allows the type of a node to change as the node is visited.\n   The unvisited nodes have type [unvisited], while the visited nodes\n   have type [visited]. Both of these types are assumed to be exclusive. *)\n\n(* We assume that all nodes are initially adopted by the object [nodes],\n   which has type [pool unvisited]. When a node is visited, it is taken\n   away from this pool; its type changes from [unvisited] to [visited];\n   and it is then adopted by a new pool, which has type [pool visited].\n   At the end of the traversal, the original pool contains the unreachable\n   nodes, while the new pool contains the reachable nodes. *)\n\n(* We require a list [roots] of the root nodes for the traversal. We also\n   require a function [visit], which changes the state of its node argument\n   from [unvisited] to [visited], and returns a list of this node's\n   successors. *)\n\n(* The function [visit] may require a permission [p]. We echo this\n   requirement. *)\n\nval preorder:\n  [unvisited, visited, p : perm]\n  exclusive visited =>\n  (\n    (* A pool of all nodes. *)\n    nodes: pool unvisited,\n    (* A list of the root nodes. *)\n    roots: list dynamic,\n    (* A function that visits a node, changing its state from\n       [unvisited] to [visited], and returns its successors. *)\n    visit: (consumes node: unvisited | p) -> (list dynamic | node @ visited)\n    (* The permission [p] required by [visit]. *)\n    | p\n  ) \n    (* We return a new pool of the visited nodes. *)\n    -> pool visited\n\n(* A more general traversal function, which allows a pre- and a post-action,\n   and optionally detects a cycle in the graph. *)\n\n(* Because the pre- and post-action are distinguished, there are three node\n   states: [unvisited], [visiting], and [visited]. *)\n\nval prepostorder:\n  [unvisited, visiting, visited, p : perm]\n  exclusive visited =>\n  (\n    (* A pool of all nodes. *)\n    nodes: pool unvisited,\n    (* A list of the root nodes. *)\n    roots: list dynamic,\n    (* A flag that indicates whether we should abort when a cycle is\n       detected. *)\n    detect: bool,\n    (* A function that changes the state of a node from [unvisited]\n       to [visiting] and returns its successors. *)\n    pre: (consumes node: unvisited | p) -> (list dynamic | node @ visiting),\n    (* A function that changes the state of a node from [visiting]\n       to [visited]. *)\n    post: (consumes node: visiting | p) -> (| node @ visited)\n    (* The permission [p] required by [pre] and [post]. *)\n    | p\n  ) \n->(\n  (* A new pool of the visited nodes. *)\n  pool visited,\n  (* An option that indicates: 1. whether a cycle was detected and 2. if so,\n     the list of nodes that were in the state [visiting] when the cycle was\n     detected. These nodes form a path in the graph that ends in a cycle. *)\n  option (list visiting)\n)\n");q("/stdlib/doublylinked.mz","(* ---------------------------------------------------------------------------- *)\n\n(* A cell has [prev] and [next] pointers, as well as a payload of type [a].\n   We maintain the invariant that, when a cell is not part of a region, its\n   [prev] and [next] fields point to itself. *)\n\ndata mutable cell a =\n| Cell { prev: dynamic; next: dynamic; payload: a }\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A region adopts a group of cells. We maintain the invariant that the [prev]\n   function is a permutation of the cells in the region (i.e., it is bijective)\n   and that the [next] function is its inverse (hence, also a permutation). *)\n\ndata mutable region a =\n  Region\n  adopts cell a\n\n(* Convenient abbreviation to hide the fact that [dynamic] is used. *)\n\n(* TEMPORARY We would like to quantify over a term to state the fact that\n * a given cell is attached to some region, but that's not really possible\n * for now. *)\nalias point a = dynamic\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Creating a region. *)\n\nval new [a] () : region a =\n  Region\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Creating and destroying cells. *)\n\n(* When a new cell is created, it is given to the region [r]. When a cell is\n   taken from [r], it is destroyed. We could offer lower-level, finer-grained\n   operations, but this is simpler. *)\n\nval create [a] (r: region a, consumes x: a) : dynamic =\n  let c = Cell { prev = (); next = (); payload = x } in\n  c.prev <- c;\n  c.next <- c;\n  give c to r;\n  c\n\nval consult [a, b, pre : perm] (\n  r: region a,\n  c: dynamic,\n  f: (a | consumes pre) -> b\n| consumes pre\n) : b =\n  taking c from r begin\n    f c.payload\n  end\n\nval destroy [a] (r: region a, c: dynamic) : a =\n  take c from r;\n  if c.next != c then\n    fail\n  else\n    c.payload\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Walking. *)\n\nval next [a] (r: region a, x: dynamic) : dynamic =\n  taking x from r begin x.next end\n\nval prev [a] (r: region a, x: dynamic) : dynamic =\n  taking x from r begin x.prev end\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following three functions are unused, but are kept for the sake of\n   clarity of exposition. *)\n\n(* The transposition [transpose_next (r, w, y)] exchanges the [next] pointers of\n   the cells [w] and [y]. We assume that [w] and [y] are distinct. This function\n   clearly preserves the fact that the [next] function forms a permutation. It\n   returns a pair of [x] and [z], where [x] and [z] are the successors of [w]\n   and [x] before the transposition took place (hence, [x] and [z] are distinct). *)\n\nval transpose_next [a] (r: region a, w: dynamic, y: dynamic) : (x: dynamic, z: dynamic) =\n  taking w from r begin\n    taking y from r begin\n      let x = w.next\n      and z = y.next in\n      w.next <- z;\n      y.next <- x;\n      x, z\n    end\n  end\n\n(* The transposition [transpose_prev] is symmetric. *)\n\nval transpose_prev [a] (r: region a, x: dynamic, z: dynamic) : (w: dynamic, y: dynamic) =\n  taking x from r begin\n    taking z from r begin\n      let w = x.prev\n      and y = z.prev in\n      x.prev <- y;\n      z.prev <- w;\n      w, y\n    end\n  end\n\n(* By combining [transpose_next] and [transpose_prev], we preserve the fact\n   that [prev] and [next] are inverses of each other. This formulation is\n   elegant (in my opinion) and uses four [take] instructions, which in the\n   general case is optimal. *)\n\nval transpose [a] (r: region a, w: dynamic, y: dynamic) : () =\n  let x, z = transpose_next (r, w, y) in\n  let _ = transpose_prev (r, x, z) in\n  ()\n\n(* ---------------------------------------------------------------------------- *)\n\n(* In the special case where [w] and/or [y] is its own successor, the above\n   definition of [transpose] performs a redundant [take]. Let's fix this by\n   inlining [transpose_prev] inside [transpose_next] and explicitly checking\n   for equality -- this is a form of valid double take, in a sense. This\n   formulation of the code uses an optimal number of [take] instructions. *)\n\n(* We assume that [w] and [y] are distinct, but do not assume that [w] and\n   [y] belong to distinct cycles. Thus, we cannot assume [w != z] or [y != x].\n   This costs us a couple of extra equality checks, but makes [transpose] more\n   versatile: it can be used not only to meld two cycles, but also to split\n   a cycle. *)\n\nval transpose_internal [a] (r: region a, w: cell a, y: cell a) : () =\n  (* Begin as in [transpose_next]. *)\n  let x = w.next\n  and z = y.next in\n  w.next <- z;\n  y.next <- x;\n  (* Continue as in [transpose_prev], but without giving up\n     [w] and [y]. Thus, the [take] instruction for [x] and\n     is required (and permitted!) only if the equality checks\n     [x == w] and [x == y] have failed. *)\n  (* We take advantage of the fact that [x.prev] and [z.prev]\n     are known already -- they are [w] and [y] -- so we only\n     have two write instructions to perform, and each of them\n     needs its own [take] -- that is, the two [take] instructions\n     need not be nested. This reduces the code duplication. *)\n  if x == w then\n    x.prev <- y\n  else if x == y then\n    x.prev <- y\n  else taking x from r begin\n    x.prev <- y\n  end;\n  if z == w then\n    z.prev <- w\n  else if z == y then\n    z.prev <- w\n  else taking z from r begin\n    z.prev <- w\n  end\n\nval transpose [a] (r: region a, w: dynamic, y: dynamic) : () =\n  (* Begin as in [transpose_next]. *)\n  taking w from r begin\n    taking y from r begin\n      transpose_internal (r, w, y)\n    end\n  end\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [meld (r, w, y)] requires [w] and [y] to be part of two distinct cycles,\n   and melds these cycles. The successors of [w] and [y] are exchanged. *)\n\nval meld =\n  transpose\n\n(* ---------------------------------------------------------------------------- *)\n\n(* If [w] and [y] are distinct cells and are part of a single cycle, then the\n   effect of [transpose (r, w, y)] is to split this cycle into two smaller\n   cycles. This is more technical, and the result is dependent on the order of\n   the elements in the original cycle. For these reasons, we do not publish\n   this function; but it could be interesting. We do use it to isolate an\n   element, as follows. *)\n\nval isolate [a] (r: region a, y: dynamic) : () =\n  taking y from r begin\n    let w = y.prev in\n    if w != y then\n      taking w from r begin\n       transpose_internal (r, w, y)\n       (* The successors of [w] and [y] are swapped, so the successor\n          of [w] is the former successor of [y], and the successor of\n          [y] is [y] itself. Thus, [y] is isolated, as desired. *)\n      end\n  end\n\nval is_isolated [a] (r: region a, y: dynamic) : bool =\n  taking y from r begin\n    bool::strip (y == y.next)\n  end\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* [iter_next (r, x, f)] presents the elements [x], [x.next], etc. to [f]. *)\n\nval iter_next [p : perm, a] (r: region a, x: dynamic, f: (dynamic | p) -> () | p) : () =\n  let rec loop (y: dynamic | p * r @ region a) : () =\n    (* Process [y]. *)\n    f y;\n    (* Stop if [y.next] is the starting point [x]. *)\n    let y = next (r, y) in\n    if y != x then\n      loop y\n  in\n  loop x\n\n(* [iter_prev (r, x, f)] presents the elements [x], [x.prev], etc. to [f]. *)\n\nval iter_prev [p : perm, a] (r: region a, x: dynamic, f: (dynamic | p) -> () | p) : () =\n  let rec loop (y: dynamic | p * r @ region a) : () =\n    f y;\n    (* Stop if [y.prev] is the starting point [x]. *)\n    let y = prev (r, y) in\n    if y != x then\n      loop y\n  in\n  loop x\n\nval iter =\n  iter_next\n\n\n(* Folds over the elements of a cycle. It presents the payloads to [f], not the\n * cells. *)\n\nval fold [a, b] (r: region a, x: dynamic, consumes seed: b, f: (a, consumes b) -> b) : b =\n  let rec loop (y: dynamic, consumes accu: b | r @ region a) : b =\n    let accu = taking y from r begin f (y.payload, accu) end in\n    let y = next (r, y) in\n    if y == x then\n      accu\n    else loop (y, accu)\n  in\n  loop (x, seed)\n\n(* [elements (r, x)] returns the elements of the cycle represented by [x]. *)\n\n(* The list is returned in the order [x], [x.next], etc. *)\n\nval elements [a] (r: region a, x: dynamic) : list::list dynamic =\n  let xs = newref list::nil in\n  iter_prev (r, prev (r, x), fun (x: dynamic | xs @ ref (list::list dynamic)) : () =\n    (* Note that this anonymous function has access to [r @ region a], but\n       does not need it, so we frame it out by not taking it as an argument.\n       This works! *)\n    xs := list::cons (x, !xs)\n  );\n  !xs\n\n(* ---------------------------------------------------------------------------- *)\n\n(* As noted by Knuth, when a cell is taken out of a doubly-linked list,\n   if the cell's [prev] and [next] pointers are preserved, then the\n   cell's former location in the list is recorded, and the cell can\n   later be re-inserted. Our current implementation does not allow this.\n   Should it? *)\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo doublylinked.mz\"\nEnd:\n*)\n");q("/stdlib/doublylinked.mzi","(* A cell contains a payload of type [a]. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A region contains many cells, organized in disjoint, non-empty cycles. *)\n\nabstract region +a\nfact exclusive (region a)\n\nabstract point +a\nfact duplicable (point a)\n\n(* [new()] creates a new region. *)\n\nval new: [a] () -> region a\n\n(* [create (r, x)] creates a new cell and places it in the region [r].\n   The cell is isolated: that is, it forms a one-element cycle. *)\n\nval create: [a] (r: region a, consumes x: a) -> point a\n\n(* [consult (r, c, f)] applies the function [f] to the payload carried\n   by the cell [c]. *)\n\nval consult: [a, b, pre : perm] (\n  r: region a,\n  c: point a,\n  f: (a | consumes pre) -> b\n| consumes pre\n) -> b\n\n(* [destroy (r, c)] destroys the cell [c]. The cell must be isolated:\n   that is, it must form a one-element cycle. *)\n\nval destroy: [a] (r: region a, c: point a) -> a\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Transforming cycles. *)\n\n(* [meld (r, w, y)] requires [w] and [y] to be part of two distinct cycles,\n   and melds these cycles. *)\n\nval meld: [a] (region a, point a, point a) -> ()\n\n(* [isolate (r, y)] ensures that [y] is isolated. If [y] is part of a cycle\n   of length greater than one, then [y] is taken out of this cycle, and is\n   made to form a cycle of length one. *)\n\nval isolate: [a] (region a, point a) -> ()\n\n(* [is_isolated (r, y)] tells whether [y] is isolated. *)\n\nval is_isolated: [a] (region a, point a) -> bool\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Walking. *)\n\n(* [next (r, x)] returns the element that follows [x] along its cycle.\n   [prev (r, x)] returns the element that precedes [x] along its cycle. *)\n\nval next: [a] (region a, point a) -> point a\nval prev: [a] (region a, point a) -> point a\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* [iter (r, x, f)] presents the elements of the cycle represented by [x] to\n   the function [f]. The function does not have access to [r], so it cannot\n   modify the region. (We could expose [iter] at a type that does provide\n   access to the region, but that would be somewhat dangerous.) *)\n\nval iter: [p : perm, a] (\n  r: region a,\n  x: point a,\n  f: (point a | p) -> ()\n| p) -> ()\n\n\nval fold: [a, b] (\n  r: region a,\n  x: point a,\n  consumes seed: b,\n  f: (a, consumes b) -> b\n) -> b\n\n(* [elements (r, x)] returns the elements of the cycle represented by [x]. *)\n\nval elements: [a] (r: region a, point a) -> list::list (point a)\n\n");q("/stdlib/either.mz","data either a b =\n  | Left  { contents: a }\n  | Right { contents: b }\n\n(* Constructors *)\n\nval left [a] (consumes x: a): Left { contents: a } =\n  Left { contents = x }\n\nval right [a] (consumes x: a): Right { contents: a } =\n  Right { contents = x }\n");q("/stdlib/either.mzi","data either a b =\n  | Left  { contents: a }\n  | Right { contents: b }\n\n(* Constructors *)\n\nval left  : [a] (consumes x: a) -> Left { contents: a }\nval right : [a] (consumes x: a) -> Right { contents: a }\n\n");q("/stdlib/fix.mz","open list\n\n(* -------------------------------------------------------------------------- *)\n\n(* Properties. *)\n\n(* The following record type can be understood as a parameterized module\n   signature. The parameter [property] is the type of properties, and the\n   fields are the operations on properties that we need. *)\n\ndata properties property =\n  Properties {\n    bottom: property;\n    equal: (property, property) -> bool;\n    is_maximal: property -> bool;\n  }\n\n(* -------------------------------------------------------------------------- *)\n\n(* The dynamic dependency graph. *)\n\n(* The types of nodes and edges. *)\n\ndata mutable node info =\n  Node {\n    (* The client data associated with this node. *)\n    info: info;\n    (* The node's incoming and outgoing edges. *)\n    outgoing: list dynamic; (* edge *)\n    incoming: list dynamic; (* edge *)\n    (* A transient mark, always set to [false], except when checking for\n       duplicate elements in a list of nodes. Here, using an adopter to\n       encode does not appear possible. *)\n    marked: bool;\n  }\n\ndata mutable edge info =\n  Edge {\n    (* This edge's nodes. *)\n    node1, node2: dynamic; (* node *)\n    (* In the OCaml version, each edge carries a boolean field [destroyed].\n       Here, we encode this information in the implicit adopter field. *)\n  }\n\n(* Adopters for nodes and edges. *)\n\ndata mutable nodes info =\n  Nodes adopts node info\n\ndata mutable edges info =\n  Edges adopts edge info\n\ndata graph info =\n  Graph {\n    nodes: nodes info;\n    edges: edges info;\n  }\n\n(* Node creation. *)\n\nval create [info] (consumes i: info) : node info =\n  Node {\n    info = i;\n    outgoing = nil;\n    incoming = nil;\n    marked = false;\n  }\n\n(* Following an edge. *)\n\nval follow [info] (src: dynamic (* node *), e: edge info) : dynamic (* node *) =\n  if e.node1 == src then\n    e.node2\n  else\n    e.node1\n\n(* Finding a node's predecessors. *)\n\nval predecessors [info] (g: graph info, n: node info) : list dynamic (* node *) =\n  (* Clean up the list of predecessor edges by removing the edges that have been\n     previously destroyed by [clear_successors]. They are identified by the fact\n     that they are no longer adopted by [es]. *)\n  let predecessors : list dynamic (* edge *) =\n    list::filter (n.incoming, fun (e: dynamic (* edge *) | g @ graph info) : bool =\n      g.edges owns e\n    )\n  in\n  n.incoming <- predecessors;\n  (* For each remaining (valid) predecessor edge, find its endpoint other than [n]. *)\n  list::rev_map (predecessors, fun (e: dynamic (* edge *) | n @ node info * g @ graph info) : dynamic (* node *) =\n    taking e from g.edges begin\n      follow (n, e)\n    end\n  )\n\n(* Edge creation. *)\n\nval link [info] (g: graph info, src: dynamic (* node *), dst: dynamic (* node *)) : () =\n  let e = Edge {\n    node1 = src;\n    node2 = dst;\n  } in\n  give e to g.edges;\n  taking src from g.nodes begin src.outgoing <- cons (e, src.outgoing) end;\n  taking dst from g.nodes begin dst.incoming <- cons (e, dst.incoming) end\n\n(* Setting a node's successors. *)\n\nval set_successors [info] (g: graph info, src: dynamic (* node *), dsts: list dynamic (* node *)) : () =\n  let rec loop (dsts : list dynamic (* node *) | g @ graph info) : () =\n    match dsts with\n    | Nil ->\n        ()\n    | Cons { head = dst; tail = dsts } ->\n        if taking dst from g.nodes begin dst.marked end then\n         (* Skip this duplicate node. *)\n         loop dsts\n       else begin\n         taking dst from g.nodes begin dst.marked <- True end;\n         (* Create a link. *)\n         link (g, src, dst);\n         (* Continue. *)\n         loop dsts;\n         (* Clear the mark. *)\n         taking dst from g.nodes begin dst.marked <- False end;\n       end\n    end\n  in\n  loop dsts\n\n(* Removing a node's outgoing edges. *)\n\nval clear_successors [info] (g: graph info, n: node info) : () =\n  list::iter (n.outgoing, fun (e: dynamic | g @ graph info) : () =\n    (* The edges are marked as destroyed by taking them away from their adopter. *)\n    take e from g.edges\n  );\n  n.outgoing <- nil\n\n(* -------------------------------------------------------------------------- *)\n\n(* We now specialize the above types of nodes and edges with a fixed\n   type [info]. Everything is parameterized over the types [variable]\n   and [property]. *)\n\n(* Each record of type [info] stands for one particular variable [v]\n   in the equation system. *)\n\ndata mutable info variable property =\n  Info {\n    (* The right-hand side of the equation associated with the variable [v]. *)\n    rhs: (variable -> property) -> property;\n    (* The current property at [v]. It evolves in a monotonic manner. *)\n    property: property;\n  }\n\n(* -------------------------------------------------------------------------- *)\n\n(* The main function. *)\n\nval lfp\n  [variable, property]\n  (* TEMPORARY probably duplicable variable => duplicable property => *)\n  (\n    (* We need notions of hashing and equality over variables. *)\n    hash: variable -> int,\n    equal: (variable, variable) -> bool,\n    (* We need the following operations over properties. *)\n    p: properties property,\n    (* We need a system of equations. *)\n    eqs: variable -> (variable -> property) -> property\n  )\n  : variable -> property =\n\n  (* We will work with nodes of type [node (info variable property)].\n     A type abbreviation would be very handy! *)\n\n  (* Create an empty graph. *)\n  \n  let g : graph (info variable property) =\n    Graph {\n      nodes = Nodes;\n      edges = Edges;\n    } in\n\n  (* Create a workset, whose elements are nodes. *)\n\n  let workset : queue::fifo dynamic (* node *) =\n    queue::create ()\n  in\n\n  (* A signal is broadcast by a variable to its predecessors. *)\n\nfail\n\n(* TEMPORARY if I wish to encode modules as records, then we will probably\n   wish to have local algebraic data type definitions. *)\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo fix.mz\"\nEnd:\n*)\n");q("/stdlib/focused.mz",yq);q("/stdlib/focused.mzi",yq);q("/stdlib/hashtable.mz","open bucket\n(* TEMPORARY ultimately, might wish not to open bucket *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* The definition of a hash table. *)\n\ndata mutable table k a =\n  Table {\n    (* The table's current number of elements. *)\n    cardinal: int;\n    (* The bucket array, whose length is always a power of 2. *)\n    buckets: marray (bucket k a);\n    (* The hash function. *)\n    hash: k -> int;\n    (* The equality function. *)\n    equal: (k, k) -> bool\n  }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Creation. *)\n\n(* [create_buckets] rounds up its [capacity] argument to the nearest power of\n   2 above [n], then allocates a new bucket array. *)\n\nval create_buckets [k, a] (capacity: int) : marray (bucket k a) =\n  array::init (Up, array::above_pow (16, capacity), fun (i: int) : bucket k a = BNil)\n\n(* Creation. *)\n\nval create [k, a] (capacity: int, hash: k -> int, equal: (k, k) -> bool) : table k a =\n  Table {\n    cardinal = 0;\n    buckets = create_buckets capacity;\n    hash = hash;\n    equal = equal\n  }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Internal functions. *)\n\n(* [key_index] computes the array index that corresponds to the key [x]. *)\n\n(* The type assigned to [key_index] is much more complex than I would like:\n   we have been forced to expand the permission [t @ table k a] and assign\n   the name [buckets] to the value contained in the [buckets] field of [t].\n   This allows us to express the fact that [t.buckets] is *not* modified by\n   [key_index]. This fact, in turn, is required in order to type-check some\n   clients. If we wrote just [t @ table k a], we would know that [t] remains\n   a table, but we would not know that [t.buckets] is unmodified, so a client\n   that reads [t.buckets] *before* invoking [key_index] and uses this value\n   *after* invoking [key_index] would be ill-typed. *)\n\n(* TEMPORARY a \"const\" permission would be useful here *)\n\nval key_index [k, a, buckets : value] (\n  t: Table { cardinal: int; buckets = buckets; hash: k -> int; equal: (k, k) -> bool },\n  x: k\n  | buckets @ marray (bucket k a)\n) : int =\n  t.hash x & (array::length t.buckets - 1)\n\n(* [push] inserts a detached entry, which contains a valid key-value pair,\n   into the table [t]. *)\n\nval push [k, a] (\n  t: table k a,\n  consumes entry: BCons { key: k; value_: a; tail: unknown }\n) : () =\n  let i = key_index (t, entry.key) in\n  array::update (t.buckets, i,\n    fun (consumes b: bucket k a | consumes entry @ BCons { key: k; value_: a; tail: unknown }) : bucket k a =\n      entry.tail <- b;\n      entry\n  )\n\n(* [push_bucket t (_, b)] inserts the whole bucket [b] (that is, a list of\n   entries), which contain valid key-value pairs, into the table [t]. For\n   convenience, this function is curried. *)\n\n(* TEMPORARY a more lightweight/intuitive syntax for currying would be welcome! *)\n\nval push_bucket [k, a]\n  (t: unknown) :\n  (int, consumes bucket k a | t @ table k a) -> () =\n  fun (_: int, consumes b: bucket k a | t @ table k a) : () =\n    iter_bucket_down (b, fun (consumes entry: BCons { key: k; value_: a; tail: unknown } | t @ table k a) : () =\n      push (t, entry)\n    )\n\n(* [resize] doubles the size of the hash table. A new buckets array is allocated.\n   The existing entries are re-used: they are not re-allocated. *)\n\nval resize [k, a] (t: table k a) : () =\n  let old_buckets = t.buckets in\n  let new_size = array::length old_buckets * 2 in\n  if new_size < array::max_length then begin\n    (* Update [t.buckets] immediately, so that [key_index] sees the new\n       bucket count. *)\n    t.buckets <- array::init (Up, new_size, fun (i: int) : bucket k a = BNil);\n    (* The array [old_buckets] is consumed by the following loop. This allows\n       us to grab the entries that we find in it and move them (without copy)\n       to the new array [t.buckets]. *)\n    array::transform (Up, old_buckets, push_bucket t)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging one table into another. *)\n\nval merge [k, a] (consumes t1: table k a, t2: table k a) : () =\n  (* Update the cardinal of [t2]. *)\n  t2.cardinal <- t2.cardinal + t1.cardinal;\n  (* Add the entries of [t1] are added into [t2], without any memory\n     allocation. *)\n  array::transform (Up, t1.buckets, push_bucket t2);\n  (* Now, [t2] may need to be resized, possibly multiple times. It\n     would be preferable to resize [t2] just once, and to do it up\n     front, before transferring [t1] into [t2]. TEMPORARY *)\n  let rec loop (| t2 @ table k a) : () =\n    if t2.cardinal > 2 * array::length t2.buckets then begin\n      resize t2;\n      loop()\n    end\n  in\n  loop()\n\n(* TEMPORARY we could return a permission for t1 as an empty table. *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Clearing. *)\n\nval clear [k, a] (t: table k a) : () =\n  t.cardinal <- 0;\n  array::transform (Up, t.buckets, fun (i: int, _: bucket k a) : bucket k a = BNil)\n\nval reset [k, a] (t: table k a, capacity: int) : () =\n  t.cardinal <- 0;\n  t.buckets <- create_buckets capacity\n\n(* -------------------------------------------------------------------------- *)\n\n(* Insertion. *)\n\nval add [k, a] (consumes x: k, consumes v: a, t: table k a) : () =\n  push (t, BCons { key = x; value_ = v; tail = () });\n  t.cardinal <- t.cardinal + 1;\n  if t.cardinal > 2 * array::length t.buckets then\n    resize t\n\n(* -------------------------------------------------------------------------- *)\n\n(* Removal. *)\n\n(* In an earlier version of this code, instead of using an auxiliary reference\n   cell [r], we updated [t.cardinal] directly inside the function\n   [ok]. Type-checking this version of the code was more tricky, because [ok]\n   needed read/write access to [t.cardinal] at a moment when the ownership of\n   [t.buckets] had been taken away from [t] by [array::update]. This forced\n   [ok] to request (and preserve) a precise description of [t], so that the\n   type system could tell that [ok] did not modify the field [t.buckets]. *)\n\nval remove [k, a] (x: k, t: table k a) : option a =\n\n  let equal = t.equal in\n\n  (* Define an [ok] predicate that can be passed to [bucket::remove]. *)\n  let ok (key: k | x @ k) : bool =\n    equal (key, x)\n  in\n\n  (* Allocate a reference to store the second result of [bucket::remove]. *)\n  let r = newref none in\n\n  (* Partially apply [bucket::remove] to [ok]. Arrange for the second\n     result of [bucket::remove] to be stored in [r], so [remove] returns\n     just one result and is a suitable argument for [array::update]. *)\n  let remove (consumes b: bucket k a | x @ k * r @ ref (option a)) : bucket k a =\n    let b, v = bucket::remove (b, ok) in\n    r := v;\n    b\n  in\n\n  (* Apply [remove] at the desired array index. *)\n  array::update\n    [post = (x @ k * r @ ref (option a))] (* WISH get rid of this *)\n    (t.buckets, key_index (t, x), remove);\n\n  (* If the desired entry has been found and removed, update the table's\n     cardinal. Then, return the value that was removed. *)\n  if !r then\n    t.cardinal <- t.cardinal - 1;\n  !r\n\n(* TEMPORARY we need also [remove_all]? does ocaml offer it? *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Lookup. *)\n\nval mem [k, a] (x: k, t: table k a) : bool =\n  let equal = t.equal in\n  array::consult\n    [b = (bool | x @ k)]\n    (* WISH could we get rid of this type application? *)\n    (t.buckets, key_index (t, x), fun (b: bucket k a | x @ k) : bool =\n      bucket::mem (equal, x, b)\n    )\n\n(* We first define an internal version of [find] which locates the appropriate\n   bucket and passes it to a function [f]. *)\n\nval internal_find [k, a, answer] duplicable a => (\n  f: (bucket k a | x @ k) -> answer,\n  x: k,\n  t: table k a\n) : answer =\n  (* We use [array::consult] instead of [array::get] because [k] is not\n     duplicable. *)\n  array::consult\n    [pre = (x @ k), b = (answer | x @ k)] (* WISH get rid of this *)\n    (t.buckets, key_index (t, x), f)\n\n(* By instantiating [f] with a function that stops at the first match,\n   we obtain [find]. *)\n\nval find [k, a] duplicable a => (x: k, t: table k a) : option a =\n  let equal = t.equal in\n  let f (b: bucket k a | x @ k) : option a =\n    bucket::assoc (equal, x, b)\n  in\n  internal_find (f, x, t)\n\n(* By instantiating [f] with a function that searches for all matches,\n   we obtain [find_all]. *)\n\nval find_all [k, a] duplicable a => (x: k, t: table k a) : list::list a =\n  let equal = t.equal in\n  let f (b: bucket k a | x @ k) : list::list a =\n    bucket::assoc_all (equal, x, b)\n  in\n  internal_find (f, x, t)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Update. *)\n\n(* [update (t, x, f)] looks for the key [x] in the table [t]. It calls the\n   user-supplied function [f] exactly once, and passes it either the value [v]\n   that is associated with the key [x], or nothing, if the key [x] does not\n   appear in the table. The function [f] returns either a new value, or\n   nothing. In the former case, the new value replaces the value [v]. In the\n   latter case, the key [x] is removed (if it was there at all). *)\n\nval option_cardinal [a] (o: option a) : int =\n  match o with\n  | None -> 0\n  | Some -> 1\n  end\n\nval update [k, a, pre : perm, post : perm] (\n  t: table k a,\n  consumes x: k,\n  f: (consumes (option a | pre)) -> (option a | post)\n  | consumes pre\n) : (| post) =\n\n  (* Wrap [f] so as to record the increase or decrease in the table's cardinal. *)\n  let delta = newref () in\n  let f (consumes ov: option a | consumes (pre * delta @ ref ())) :\n        (option a | post * delta @ ref int) =\n    let decrease = option_cardinal ov in\n    let ov = f ov in\n    let increase = option_cardinal ov in\n    delta := increase - decrease;\n    ov\n  in\n\n  (* Adapt [bucket::update]. *)\n  let equal = t.equal in\n  let update (consumes b: bucket k a | consumes (x @ k * pre * delta @ ref ())) : (bucket k a | post * delta @ ref int) =\n    bucket::update [post = (post * delta @ ref int)] (equal, b, x, f)\n    (* WISH could we get rid of this type application? without it, I get an error *)\n  in\n\n  (* Call [array::update]. *)\n  array::update [post = (post * delta @ ref int)]\n    (t.buckets, key_index (t, x), update);\n    (* WISH could we get rid of this type application?\n       without it, the call to array::update succeeds\n       but we lose the permission for [delta] and the cardinal update (below) fails *)\n\n  (* Update the table's cardinal. *)\n  t.cardinal <- t.cardinal + !delta\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* For simplicity, we assign [fold] a type that does not allow performing a\n   strong update on the keys or values. If we used a primitive operation on\n   arrays that allows performing a strong update on an array, then we could\n   do better. TEMPORARY *)\n\nval fold [k, a, b] (\n  t: table k a,\n  consumes seed: b,\n  f: (k, a, consumes b) -> b\n) : b =\n  array::fold (Up, t.buckets, seed, fun (bck: bucket k a, consumes accu: b) : b =\n    bucket::fold (bck, accu, f)\n  )\n\nval iter [k, a, p : perm] (\n  t: table k a,\n  f: (k, a | p) -> ()\n  | p\n) : () =\n  fold [b=(| p)] (t, (), fun (x: k, v: a, (| p)) : () =\n    f (x, v)\n  )\n  (* WISH could we get rid of this type application? *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Statistics. *)\n\nval cardinal [k, a] (t: table k a) : int =\n  t.cardinal\n\ndata statistics = Statistics {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: marray int\n}\n\nval stats [k, a] (t: table k a) : statistics =\n  (* Compute the maximum bucket length. *)\n  let mbl =\n    array::fold (Up, t.buckets, 0, fun (b: bucket k a, accu: int) : int =\n      max (bucket::length b, accu)\n    )\n  in\n  (* Build a histogram, which maps bucket lengths to bucket counts. *)\n  let histo = array::create (mbl + 1, 0) in\n  array::iter (Up, t.buckets, fun (b: bucket k a | histo @ marray int) : () =\n    let l = bucket::length b in\n    array::set (histo, l, array::get (histo, l) + 1)\n  );\n  (* Return a statistics record. *)\n  Statistics {\n    num_bindings = t.cardinal;\n    num_buckets  = array::length t.buckets;\n    max_bucket_length = mbl;\n    bucket_histogram = histo\n  }\n\n(*\n  Local Variables:\n  compile-command: \"../mezzo hashtable.mz\"\n  End:\n*)\n");q("/stdlib/hashtable.mzi","abstract table k +a\nfact exclusive (table k a)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Creation. *)\n\nval create : [k, a] (\n  capacity: int,\n  hash: k -> int,\n  equal: (k, k) -> bool\n) -> table k a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Clearing. *)\n\nval clear : [k, a] table k a -> ()\nval reset : [k, a] (table k a, capacity: int) -> ()\n\n(* -------------------------------------------------------------------------- *)\n\n(* Insertion. *)\n\nval add : [k, a] (consumes k, consumes a, table k a) -> ()\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging. *)\n\n(* [merge (t1, t2)] does not require the two tables to use the same notions\n   of equality of hashing. It is equivalent to successively inserting each\n   element of [t1] into [t2]. *)\n\nval merge: [k, a] (consumes table k a, table k a) -> ()\n\n(* -------------------------------------------------------------------------- *)\n\n(* Removal. *)\n\nval remove : [k, a] (x: k, t: table k a) -> option a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Lookup. *)\n\nval mem : [k, a] (x: k, t: table k a) -> bool\n\nval find     : [k, a] duplicable a => (x: k, t: table k a) -> option a\nval find_all : [k, a] duplicable a => (x: k, t: table k a) -> list::list a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Update. *)\n\n(* [update (t, x, f)] looks for the key [x] in the table [t]. It calls the\n   user-supplied function [f] exactly once, and passes it either the value [v]\n   that is associated with the key [x], or nothing, if the key [x] does not\n   appear in the table. The function [f] returns either a new value, or\n   nothing. In the former case, the new value replaces the value [v]. In the\n   latter case, the key [x] is removed (if it was there at all). *)\n\nval update : [k, a, pre : perm, post : perm] (\n  t: table k a,\n  consumes x: k,\n  f: (consumes (option a | pre)) -> (option a | post)\n  | consumes pre\n) -> (| post)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\nval fold : [k, a, b] (\n  t: table k a,\n  consumes seed: b,\n  f: (k, a, consumes b) -> b\n) -> b\n\nval iter : [k, a, p : perm] (\n  t: table k a,\n  f: (k, a | p) -> ()\n  | p\n) -> ()\n\n(* -------------------------------------------------------------------------- *)\n\n(* Statistics. *)\n\nval cardinal : [k, a] (t: table k a) -> int\n\ndata statistics = Statistics {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: marray int\n}\n\nval stats : [k, a] (t: table k a) -> statistics\n");q("/stdlib/hide.mz",'open lock\n\n(* A function\'s internal state can be hidden using a lock. *)\n\n(* This function is not as generic as I would like: it is parametric\n   in the types [a] and [b], but it cannot be applied in the situation\n   where [f] is a polymorphic function and we would like [hide f] to\n   be polymorphic as well (assuming the quantified variable does not\n   occur in [s]). In that situation, the user will have to copy/paste\n   the code below. *)\n\nval hide [a, b, s : perm] (\n  f : (a | s) -> b\n| consumes s\n) : (a -> b)\n=\n  (* Allocate a new lock. *)\n  let l : lock s = new () in\n  (* Encapsulate [f] within an acquire/release pair. *)\n  fun (x : a) : b =\n    acquire l;\n    let y = f x in\n    release l;\n    y\n\n(*\nLocal Variables:\ncompile-command: "../mezzo hide.mz"\nEnd:\n*)\n');q("/stdlib/hide.mzi","(* If [f] has type [(a | s) -> b], which means that [f] modifies\n   the state [s], then [hide f] has type [a -> b], which advertises\n   no side effect. The internal state is protected by an internal\n   lock, and becomes (forever) hidden. *)\n\nval hide : [a, b, s : perm] (\n  f : (a | s) -> b\n| consumes s\n) -> (a -> b)\n");q("/stdlib/iterator.mz",'open either\nopen osf\nopen focused\n\n(* Generic OO-style iterators *)\n\ndata iterator_s (s : perm) a (post : perm) =\n  Iterator {\n    next: (| consumes s) -> either (focused a s) (| post);\n    stop: (| consumes s) -> (| post)\n  | s }\n\nalias iterator a (post : perm) =\n  { s : perm } iterator_s s a post\n\n\n(* Wrapping an ADT-style iterator into a generic (OO-style) iterator. *)\n\nval wrap [a, i, post: perm] (\n  consumes it: i,\n  next: (consumes it: i) -> either (focused a (it @ i)) (| post),\n  stop: (consumes it: i) -> (| post)\n): iterator a post =\n\n  (* A convenient abbreviation. *)\n  let alias s: perm = it @ i in\n\n  (* Perform the application of the ADT functions to the iterator [i],\n     so as to obtain an object whose internal state is inaccessible. *)\n  Iterator {\n    next = (fun (| consumes s): either (focused a s) (| post) = next it);\n    stop = (fun (| consumes s): (| post) = stop it)\n  }\n\n(* ------------------------------------------------------------------------------ *)\n\n\n(* Calls [f] on each element of the iterator [it]. *)\n\nval rec iter [a, post: perm, p: perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> bool\n| p\n) : (bool | post)\n=\n  match it.next () with\n  | Right ->\n      true\n  | Left { contents = (x, surrender) } ->\n      let continue : bool = f x in\n      surrender ();\n      if continue then\n        iter (it, f)\n      else begin\n        it.stop();\n        false\n      end\n  end \n\n(* [iter] can be specialized to a non-interruptible version. This function\n   is not exported, in order to avoid polluting the interface with too\n   many variants, but is kept here as a test of the type-checker. *)\nval iter_uninterruptibly [a, post: perm, p : perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> ()\n| p\n) : (| post)\n=\n  let _ = iter (it, fun (x: a | p) : bool = f x; true) in\n  ()\n\n(* Printing. *)\n\nval print [a, post : perm] (\n  consumes it: iterator a post\n) : (| post) =\n  iter_uninterruptibly (it, print)\n\n(* Comparison of two generic iterators. *)\n\nval rec compare [a, post1 : perm, post2 : perm, p : perm] (\n  cmp: (a, a | p) -> int,\n  consumes i1: iterator a post1,\n  consumes i2: iterator a post2\n| p\n) : (int | post1 * post2) =\n\n  match i1.next(), i2.next() with\n  | Right, Right ->\n      0\n  | Left { contents = (x1, surrender1) }, Left { contents = (x2, surrender2) } ->\n      let e = cmp (x1, x2) in\n      surrender1 ();\n      surrender2 ();\n      if e = 0 then\n        compare (cmp, i1, i2)\n      else begin\n        i1.stop ();\n        i2.stop ();\n        e\n      end\n  | Left { contents = (_, surrender1) }, Right ->\n    (* The sequence [i1] is longer. *)\n      surrender1 ();\n      i1.stop ();\n      1\n  | Right, Left { contents = (_, surrender2) } ->\n    (* The sequence [i2] is longer. *)\n      surrender2 ();\n      i2.stop ();\n      -1\n  end\n\n(* Equality between two generic iterators *)\n\nval equal [a, post1: perm, post2: perm, p: perm] (\n  eq: (a, a | p) -> bool,\n  consumes i1: iterator a post1,\n  consumes i2: iterator a post2\n| p\n) : (bool | post1 * post2) =\n\n  let cmp (x: a, y: a | p): int =\n    if eq (x, y) then\n      0\n    else\n      1 (* dummy non-zero value *)\n  in\n  compare (cmp, i1, i2) = 0\n\n\n(* A [filter] function on generic iterators.\n\n   Constructs a new iterator, which returns only the elements of [it] that match\n   the predicate [f]\n*)\nval filter [a, p: perm, post: perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> bool\n| consumes p) : iterator a (p * post)\n=\n\n  (* A name for the (unpacked) internal state of the underlying iterator. *)\n  let flex underlying: perm in\n  assert it @ iterator_s underlying a post;\n\n  (* An abbreviation for the internal state of the new iterator.\n     It contains the underlying iterator and the permission [p],\n     which represents the internal state of [f]. The underlying\n     iterator is in an unpacked state. *)\n  let alias s : perm = p * underlying in\n\n  let rec next (| consumes s) : either (focused a s) (| post * p) =\n    let e = it.next() in\n    match e with\n    | Right ->\n        (* The underlying iterator is finished. We are finished as well. *)\n        e\n    | Left { contents = (x, surrender) } ->\n        (* The underlying iterator produces [x], together with a magic\n           wand [surrender], which we must use to signal that we are done\n           with [x]. *)\n        if f x then begin\n          (* We would like to keep [x]. *)\n          (* There are several ways of convincing the type-checker that\n             [surrender] has type [wand (x @ a) s]. One is via the following\n             three lines: *)\n          (*\n          let flex q: perm in\n          assert q * surrender @ (| consumes (q * x @ a)) -> (| underlying);\n          pack surrender @ wand (x @ a) s witness p * q;\n          *)\n          (* The other is via the following single line. This line forces\n             the type-checker to auto-pack [q], and from there, it can\n             auto-pack [p]. It is unable to auto-pack [p * q] in one go. *)\n          assert p * surrender @ wand (p * x @ a) s;\n          e\n        end\n        else begin\n          (* We would like to skip [x]. Signal that we are done with it,\n             and look for the next element. *)\n          surrender();\n          next()\n        end\n    end\n  in\n\n  Iterator { next; stop = it.stop }\n\n\n(* A [map] function on generic iterators.\n\n   Constructs a new iterator, returning [f x] for each element [x] of [it]. Note\n   that [f] cannot consume the elements of [it] so that [post] can be finally\n   returned.\n*)\nval map [a, b, p: perm, post: perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> b\n| consumes p): iterator b (p * post)\n=\n  let flex underlying: perm in\n  assert it @ iterator_s underlying a post;\n\n  let alias s: perm = underlying * p in\n\n  let next (| consumes s):\n      either (focused b s) (| post * p) =\n\n    match it.next () with\n    | Right ->\n      right ()\n    | Left { contents = (x, surrender) } ->\n      let flex q: perm in\n      assert surrender @ (| consumes (q * x @ a)) -> (| underlying);\n\n      let y = f x in\n      pack surrender @ wand (y @ b) s witness p * q * x @ a;\n      left (y, surrender)\n    end\n  in\n\n  Iterator { next; stop = it.stop }\n\n(* [zip] combines two generic iterators. *)\n\nval zip [a1, a2, post1 : perm, post2: perm] (\n  consumes it1: iterator a1 post1,\n  consumes it2: iterator a2 post2\n) : iterator (a1, a2) (post1 * post2)\n=\n\n  (* Name the unpacked internal states of the underlying iterators. *)\n  let flex s1: perm in\n  assert it1 @ iterator_s s1 a1 post1;\n  let flex s2: perm in\n  assert it2 @ iterator_s s2 a2 post2;\n  (* Define the internal state, result type, and postcondition of the\n     new iterator. *)\n  let alias s : perm = s1 * s2 in\n  let alias a = (a1, a2) in\n  let alias post : perm = post1 * post2 in\n\n  let rec next (| consumes s) : either (focused a s) (| post) =\n    let e1 = it1.next()\n    and e2 = it2.next() in\n    match e1, e2 with\n    | Right, Right ->\n        (* The underlying iterators are finished. We are finished as well. *)\n        e1\n    | Left { contents = (x1, surrender1) }, Left { contents = (x2, surrender2) } ->\n        (* The underlying iterators produce [x1] and [x2]. *)\n        let x = (x1, x2) in\n        let flex q1 : perm in\n        let flex q2 : perm in\n        (* The following two assertions are superfluous. *)\n        assert surrender1 @ (| consumes (q1 * x1 @ a1)) -> (| s1);\n        assert surrender2 @ (| consumes (q2 * x2 @ a2)) -> (| s2);\n        let surrender (| consumes (q1 * q2 * x @ a)) : (| s) =\n          surrender1();\n          surrender2()\n        in\n        (* The following assertion is superfluous. *)\n        assert surrender @ wand (x @ a) s;\n        Left { contents = (x, surrender) }\n    | Left { contents = (_, surrender1) }, Right ->\n        (* One of the iterators is finished. Stop the other, and we are done. *)\n        surrender1();\n        it1.stop();\n        e2\n    | Right, Left { contents = (_, surrender2) } ->\n        surrender2();\n        it2.stop();\n        e1\n    end\n  in\n\n  let stop (| consumes s) : (| post) =\n    it1.stop();\n    it2.stop()\n  in\n\n  Iterator { next; stop }\n\n(* [concat] returns the concatenation of two iterators.\n\n   The returned iterator will give first the elements of [it1], then\n   those of [it2].\n*)\nval concat [a, post1: perm, post2: perm] (\n  consumes it1: iterator a post1,\n  consumes it2: iterator a post2\n): iterator a (post1 * post2) =\n\n  let flex s1: perm in\n  let flex s2: perm in\n  assert it1 @ iterator_s s1 a post1;\n  assert it2 @ iterator_s s2 a post2;\n\n  let alias s_ty =\n    (rich_bool post1 s1 (* Is it1 alive? *)\n    | s2)\n  in\n\n  let state : ref s_ty = newref True in\n\n  let alias s: perm = state @ ref s_ty in\n\n  let rec next (| consumes s): either (focused a s) (| post1 * post2) =\n    match !state with\n    | True ->\n      (* [it1] is not consumed yet *)\n      match it1.next () with\n      | Right ->\n        (* No more elements in [it1]. [state] is now a Right { ... } *)\n        state := False;\n        next ()\n      | Left { contents = (x, surrender) } ->\n        let flex p: perm in\n        assert surrender @ (| consumes (p * x @ a)) -> (| s1);\n        pack surrender @ wand (x @ a) s witness p * s2 * state @ ref True;\n        left (x, surrender)\n      end\n    | False ->\n      (* We are iterating of [it2] *)\n      match it2.next () with\n      | Right ->\n        (* No more elements it [it2]. Return [post1 * post2] *)\n        right ()\n      | Left { contents = (x, surrender) } ->\n        let flex p: perm in\n        assert surrender @ (| consumes (p * x @ a)) -> (| s2);\n        pack surrender @ wand (x @ a) s witness post1 * p * state @ ref False;\n        left (x, surrender)\n      end\n    end\n  in\n\nlet stop (| consumes s): (| post1 * post2) =\n  match !state with\n  | True ->\n    it1.stop ();\n    it2.stop ();\n    ()\n  | False ->\n    it2.stop ();\n    ()\n  end\n  in\n\n  let it = Iterator { next; stop } in\n  (* pack it @ iterator a (post1 * post2) *)\n  (*   witness s; *)\n\n  it\n\n(* A fold function where the iteration can be interrupted by the user.\n\n   If the boolean returned by [f] with the new accumulator is [true],\n   the iteration continues. Otherwise, the iterator is stopped and the\n   current accumulator is returned.\n*)\nval fold [a, b, post: perm] (\n  consumes it: iterator a post,\n  consumes accu: b,\n  f: (consumes b, a) -> (b, bool)\n) : (b, bool | post)\n=\n  let accu = newref accu in\n  let outcome = iter (it, fun (x: a | accu @ ref b) : bool =\n    let new_accu, continue = f (!accu, x) in\n    accu := new_accu;\n    continue\n  ) in\n  !accu, outcome\n\n(* [fold] can be specialized to a non-interruptible version. This function\n   is not exported, in order to avoid polluting the interface with too\n   many variants, but is kept here as a test of the type-checker. *)\nval fold_uninterruptibly [a, b, post: perm] (\n  consumes it: iterator a post,\n  consumes accu: b,\n  f: (consumes b, a) -> b\n) : (b | post)\n=\n  let accu, outcome =\n    fold [a, b, post] (it, accu, fun (consumes accu: b, x: a) : (b, bool) =\n      f(accu, x), true\n    )\n  in\n  accu\n\n(* Drops the [n] first elements of the iterator - that is, [drop]\n   calls [it.next ()] [n] times *)\nval rec drop [a, post: perm] (\n  consumes it: iterator a post,\n  n: int\n): either (| it @ iterator a post) (| post)\n  =\n  if n <= 0 then\n    left ()\n  else\n    match it.next () with\n    | Right ->\n      right ()\n    | Left { contents = (_, surrender) } ->\n      surrender ();\n      drop (it, n-1)\n    end\n\n(* Drops elements of [it] of the iterator while the predicate [pred]\n   evaluates to [True] on them *)\nval rec dropWhile [a, post: perm, p: perm] (\n  consumes it: iterator a post,\n  pred: (a | p) -> bool\n| p): either (focused a (it @ iterator a post)) (| post)\n=\n  match it.next () with\n  | Right ->\n    right ()\n  | Left { contents = (x, surrender) } ->\n    if not (pred x) then (\n      left (x, surrender)\n    ) else (\n      surrender ();\n      dropWhile (it, pred)\n    )\n  end\n\n(* Turning a generic iterator into a stream. A bit trivial, because this\n   works only when the elements are duplicable, and in that case, there\n   is little reason to create an iterator in the first place. Also, this\n   consumes the iterator, so the underlying collection can never be\n   recovered. But it should be a good test of the type-checker. *)\n\nval to_stream [a, post : perm] duplicable a => (\n  consumes it: iterator a post\n) : stream::stream a\n=\n\n  let alias s : perm = it @ iterator a post in\n  stream::produce (fun (| consumes s) : option (a | s) =\n    match it.next() with\n    | Right ->\n        none\n    | Left { contents = (x, surrender) } ->\n        surrender(); (* [x] is duplicable! *)\n        some x\n    end\n  )\n\n(*\nLocal Variables:\ncompile-command: "../mezzo iterator.mz"\nEnd:\n*)\n');q("/stdlib/iterator.mzi","open either\nopen osf\nopen focused\n\n(* Generic OO-style iterators *)\n\ndata iterator_s (s: perm) a (post: perm) =\n  Iterator {\n    next: (| consumes s) -> either (focused a s)\n                                   (| post);\n    stop: (| consumes s) -> (| post)\n| s }\n\nalias iterator a (post: perm) =\n  {s: perm} iterator_s s a post\n\n(* Wrapping an ADT-style iterator into a generic (OO-style) iterator. *)\n\nval wrap: [a, i, post: perm] (\n  consumes it: i,\n  next: (consumes it: i) -> either (focused a (it @ i)) (| post),\n  stop: (consumes it: i) -> (| post)\n) -> iterator a post\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Interruptible iteration. *)\n\n(* [iter(it, f)] invokes [f] on each element of the iterator [it]. The\n   function [f] must return a Boolean result that indicates whether iteration\n   should continue. The final outcome of [iter] indicates whether iteration\n   did continue all the way to the end, or was aborted.\n*)\nval iter: [a, post: perm, p: perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> bool\n| p) -> (bool | post)\n\n\n(* [fold] is analogous to [iter], but maintains an explicit accumulator.\n*)\nval fold: [a, b, post: perm] (\n  consumes it: iterator a post,\n  consumes accu: b,\n  f: (consumes b, a) -> (b, bool)\n) -> (b, bool | post)\n\n\n(* Equality between two generic iterators.\n*)\nval equal: [a, post1 : perm, post2 : perm, p : perm] (\n  eq: (a, a | p) -> bool,\n  consumes i1: iterator a post1,\n  consumes i2: iterator a post2\n| p\n) -> (bool | post1 * post2)\n\n\n(* Comparison of two generic iterators.\n*)\nval compare: [a, post1 : perm, post2 : perm, p : perm] (\n  cmp: (a, a | p) -> int,\n  consumes i1: iterator a post1,\n  consumes i2: iterator a post2\n| p\n) -> (int | post1 * post2)\n\n\n(* A [filter] function on generic iterators.\n\n   Constructs a new iterator, which returns only the elements of [it] that match\n   the predicate [f]\n*)\nval filter: [a, p: perm, post: perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> bool\n| consumes p) -> iterator a (p * post)\n\n\n(* A [map] function on generic iterators.\n\n   Constructs a new iterator, returning [f x] for each element [x] of [it]. Note\n   that [f] cannot consume the elements of [it] so that [post] can be finally\n   returned.\n*)\nval map: [a, b, p: perm, post: perm] (\n  consumes it: iterator a post,\n  f: (a | p) -> b\n| consumes p) -> iterator b (p * post)\n\n\n(* [zip] combines two generic iterators.\n*)\nval zip: [a1, a2, post1 : perm, post2: perm] (\n  consumes it1: iterator a1 post1,\n  consumes it2: iterator a2 post2\n) -> iterator (a1, a2) (post1 * post2)\n\n\n(* [concat] returns the concatenation of two iterators.\n\n   The returned iterator will give first the elements of [it1], then\n   those of [it2].\n*)\nval concat: [a, post1: perm, post2: perm] (\n  consumes it1: iterator a post1,\n  consumes it2: iterator a post2\n) -> iterator a (post1 * post2)\n\n(* Drops the [n] first elements of the iterator - that is, [drop]\n   calls [it.next ()] [n] times\n*)\nval drop: [a, post: perm] (\n  consumes it: iterator a post,\n  n: int\n) -> either (| it @ iterator a post) (| post)\n\n\n(* Drops elements of [it] of the iterator while the predicate [pred]\n   evaluates to [True] on them\n*)\nval dropWhile: [a, post: perm, p: perm] (\n  consumes it: iterator a post,\n  pred: (a | p) -> bool\n| p) -> either (focused a (it @ iterator a post)) (| post)\n\n\n(* Turning a generic iterator into a stream. A bit trivial, because this\n   works only when the elements are duplicable, and in that case, there\n   is little reason to create an iterator in the first place. Also, this\n   consumes the iterator, so the underlying collection can never be\n   recovered. But it should be a good test of the type-checker.\n*)\nval to_stream: [a, post : perm] duplicable a => (\n  consumes it: iterator a post\n) -> stream::stream a\n\n(* Printing. *)\n\nval print: [a, post : perm] (\n  consumes it: iterator a post\n) -> (| post)\n");q("/stdlib/lazy.mz",'open wref\n\n(* The identity function. We use a permission of the form [id @ b -> a]\n   to encode the fact that [b] is a subtype of [a], and we use the\n   function application [id x] when we wish to exploit this fact.\n   This is a clumsy encoding, but it provides a proof-of-concept. *)\n\n(* No consumes keyword is required here, because we are dealing with\n   duplicable types. *)\n\nval id [a] (consumes x: a) : a =\n  x\n\n(* A suspension is either evaluated already or still suspended.\n   In the former case, it contains just a result, of type [a].\n   In the latter case, it contains the function [f] that was\n   passed to [create], together with the permission [p] that\n   [f] needs. This permission is existentially quantified. In\n   other words, [f] is a one-shot function. *)\n\ndata state a =\n  | Evaluated { result: a }\n  | Suspended { computation: {p: perm} ((|consumes p) -> a | p) }\n\n(* The state of a suspension is stored in a weak reference. The\n   lock (which is part of the weak reference) ensures that the\n   state of the suspension remains consistent even in the face\n   of concurrent accesses. It also allows us to implement waiting\n   until a result becomes available. *)\n\n(* The existential quantification over [b], which is a subtype of\n   [a], is used to make [thunk] covariant in its parameter [a]. *)\n\n(* We might wish to store the information [duplicable a] as part\n   of the definition of [thunk a]. This would allow us to remove\n   the assumption [duplicable a => ...] in the type of [force].\n   However, if we do that, [thunk] is no longer covariant in [a]!\n   Subtle. But, actually, the constraint [id @ b -> a] encodes\n   the fact that [b] is duplicable! So we can get rid of this\n   assumption in the type of [force]. *)\n\nalias thunk +a =\n  {b} (wref (state b) | id @ b -> a)\n\n(* Creation. *)\n\n(* The constraint [duplicable a] is required at construction time\n   in order to construct a witness of [id @ a -> a]. *)\n\nval create [a, p : perm] duplicable a => (\n  f: (|consumes p) -> a\n| consumes p\n) : thunk a =\n  let s = Suspended { computation = f } in\n  new [state a] s\n\n(* It is sometimes convenient to be able to build a thunk that is\n   already evaluated. *)\n\nval constant [a] duplicable a => (x: a) : thunk a =\n  let s = Evaluated { result = x } in\n  new [state a] s\n\n(* Evaluation. *)\n\n(* Using [wref::update] means that we hold the lock while the call to\n   [s.computation] is in progress. As a result, if two calls to [force]\n   occur concurrently, the second call will block until the first call\n   is finished and has produced a result. This is the desired behavior. *)\n\n(* We do not need to explicitly require [duplicable a] because the\n   constraint [id @ b -> a] actually encodes the fact that [b] is\n   duplicable! Subtle. *)\n\nval force [a] (t: thunk a) : a =\n  (* Unpack the existential, and let [b] stand for the witness. *)\n  let flex b in\n  assert t @ wref (state b) * id @ b -> a;\n  (* We get access to [t], under the name [x], at type\n     [wref (state b)], where [b] is an unknown subtype of [a],\n     as witnessed by the permission [id @ b -> a]. *)\n  update (t, fun (consumes s: state b) : (state b, a) =\n    (* We will now possibly update [x], by writing a new value\n      of type [state b] into it, and return a result of type\n      [b], which, by applying [id], we coerce to type [a]. *)\n    match s with\n    | Evaluated ->\n        s, (id s.result)\n    | Suspended ->\n        let result : b = s.computation() in\n        Evaluated { result = result }, id result\n    end\n  )\n\n(* A utility for creating a cyclic suspension. *)\n\n(* Note: this code is somewhat unsafe, insofar as the client could\n   misbehave and have [f] force [x], which is a dummy thunk. One\n   might wish to say that [f] should have type\n     (x: =x | consumes p) -> (y: =y | wand (x @ thunk a) (y @ a))\n   i.e. [f] cannot assume that [x] is a thunk, and must return a\n   value [y] such that, once it becomes known that [x] is a thunk,\n   [y] can be proven to have type [a]. This might work, but seems\n   complex. *)\n\nval cyclic [a, p : perm] duplicable a => (\n  f: (thunk a | consumes p) -> a\n| consumes p\n) : thunk a =\n  (* Create a dummy function. *)\n  let dummy () : a = fail in\n  (* Create a dummy initial state. *)\n  let s : state a = Suspended { computation = dummy } in\n  (* Allocate the suspension. *)\n  let x : wref (state a) = new [state a] s in\n  (* Now, [x] is a thunk. (The following assertion is superfluous.)\n     It also has type [wref (state a)], which is more precise, and\n     is required for the following update to make sense. *)\n  assert x @ thunk a;\n  (* Apply [f] to the thunk. If the client misbehaves and tries to\n     force the thunk, the [fail] instruction above will be executed.\n     One could also obtain a deadlock, instead of a failure, by\n     invoking [f] within the [update] block below. Failure seems\n     preferable. *)\n  let result = f x in\n  update (x, fun (consumes s: state a) : (state a, thunk a) =\n    Evaluated { result }, x\n  )\n\n(*\nLocal Variables:\ncompile-command: "../mezzo lazy.mz"\nEnd:\n*)\n');q("/stdlib/lazy.mzi","(* A suspension, or thunk, is a delayed computation. A thunk is duplicable:\n   multiple threads may request its result. The type system guarantees that\n   the delayed computation is performed at most once. *)\n\nabstract thunk +a\nfact duplicable (thunk a)\n\n(* Creation. *)\n\n(* The delayed computation, represented by the function [f], may need a\n   permission [p] in order to run. This permission must be passed to\n   [create] when the thunk is created. Because [f] consumes [p] and\n   [create] is given only one copy of [p], we know that [f] will be\n   invoked at most once. In other words, [f] is a one-shot function. *)\n\nval create: [a, p: perm] duplicable a => (\n  f: (| consumes p) -> a\n| consumes p\n) -> thunk a\n\n(* It is sometimes convenient to be able to build a thunk that is\n   already evaluated. *)\n\nval constant: [a] duplicable a => a -> thunk a\n\n(* Creating a recursive thunk, i.e., a suspended computation that\n   refers to itself. When one invokes [cyclic f], the function [f]\n   is invoked immediately. It is applied to the thunk [self] that\n   is being created, and must return a value, of type [a], for this\n   thunk. Of course it must not attempt to force this thunk; it is\n   allowed only to take its address. If it did attempt to force the\n   thunk, a runtime failure would occur. *)\n\nval cyclic: [a, p : perm] duplicable a => (\n  f: (thunk a | consumes p) -> a\n| consumes p\n) -> thunk a\n\n(* Demand. *)\n\nval force: [a] thunk a -> a\n\n");q("/stdlib/list.mz","(* -------------------------------------------------------------------------- *)\n\n(* The standard definition of immutable lists. *)\n\n(* LIST_DEF *)\ndata list a =\n  | Nil\n  | Cons { head: a; tail: list a }\n(* LIST_DEF *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A definition for a list cell whose [tail] field has not yet been\n   initialized. Such a cell is mutable, and can be frozen (turned\n   into an immutable list cell) via a tag update instruction. *)\n\n(* XLIST_DEF *)\ndata mutable xlist a =\n  | XNil\n  | XCons { head: a; tail: () }\n\nalias xcons a =\n    XCons { head: a; tail: () }\n(* XLIST_DEF *)\n\n(* The following function writes [xs] into [c.tail] and declares\n   that [c] is now immutable. *)\n\n(* Note: in order to ensure that the tag update instruction does\n   nothing at runtime and can be erased, we need [XCons] and [Cons]\n   to translate to the same tag number. This explains why we define\n   a tag [XNil], even though we never use it. *)\n\nval freeze [a] (consumes c: xcons a, xs: unknown) : (| c @ Cons { head: a; tail = xs }) =\n  c.tail <- xs;\n  tag of c <- Cons\n\n(* The type assigned to [freeze] faithfully reflects its behavior.\n   We could think of a more readable type:\n   val freeze [a] (consumes c: cell a, xs: list a) : (| c @ list a)\n   This type is also valid, but is strictly less general, and it turns\n   out that the extra generality is needed: when [xs] is written into\n   [c.tail], [xs] is usually not yet a list. *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Short-hands for constructing lists. *)\n\nval nil =\n  Nil\n\nalias cons_t a b = Cons { head: a; tail: b }\n\nval cons [a] (consumes x: a, consumes xs: list a) : cons_t a (list a) =\n  Cons { head = x; tail = xs }\n\nval two [a] (consumes x1: a, consumes x2: a) : cons_t a (cons_t a Nil) =\n  Cons { head = x1; tail = Cons { head = x2; tail = Nil }}\n\nval three [a] (consumes x1: a, consumes x2: a, consumes x3: a) :\n  cons_t a (cons_t a (cons_t a Nil)) =\n  Cons { head = x1; tail = Cons { head = x2; tail = Cons { head = x3; tail = Nil }}}\n\nval init [a, p : perm] (n : int, f : (int | p) -> a | p) : list a =\n  let rec loop (i : int | p) : list a =\n    if i = n then\n      Nil\n    else\n      Cons { head = f i; tail = loop (i + 1) }\n  in\n  loop 0\n \n(* -------------------------------------------------------------------------- *)\n\n(* List length. *)\n\n(* I am sure that not everybody will like this use of [if xs then ...]. I find\n   it cute. Note that the access to [xs.tail] is safe! *)\n\nval rec length_aux [a] (accu: int, xs: list a) : int =\n  if xs then length_aux (accu + 1, xs.tail) else accu\n\nval length [a] (xs: list a) : int =\n  length_aux (0, xs)\n\n(* -------------------------------------------------------------------------- *)\n\n(* List head and tail. *)\n\n(* These functions are likely to be of little use, but at least they are safe,\n   unlike their ocaml counterparts. *)\n\nval hd [a] (consumes xs: Cons { head: a; tail: unknown }) : a =\n  xs.head\n\nval tl [a] (consumes xs: Cons { head: unknown; tail: list a }) : list a =\n  xs.tail\n\n(* -------------------------------------------------------------------------- *)\n\n(* Indexing operations. *)\n\nval rec nth_aux [a] (consumes xs: list a, n: int) : a =\n  if xs then\n    if n = 0 then xs.head else nth_aux (xs.tail, n - 1)\n  else\n    fail\n\nval nth [a] (consumes xs: list a, n: int) : a =\n  if n < 0 then fail else nth_aux (xs, n)\n\nval rec chop [a] (k: int, consumes xs: list a) : list a =\n  if k = 0 then xs\n  else if xs then chop (k - 1, xs.tail)\n  else fail\n\n(* This conventional, non-tail-recursive version of splitAt is here as a\n   test of the type-checker. *)\n\nval rec splitAt [a] (k: int, consumes xs: list a) : (list a, list a) =\n  if k = 0 then\n    Nil, xs\n  else if xs then begin\n    let prefix, suffix = splitAt (k - 1, xs.tail) in\n    Cons { head = xs.head; tail = prefix }, suffix\n  end\n  else fail\n\n(* This is a tail-recursive, destination-passing-style version of splitAt. *)\n\nval rec splitAtAux [a] (k: int, consumes xs: list a, consumes c: xcons a) : (list a | c @ list a) =\n  if k = 0 then begin\n    freeze (c, Nil);\n    xs\n  end\n  else if xs then begin\n    let d = XCons { head = xs.head; tail = () } in\n    freeze (c, d);\n    splitAtAux (k - 1, xs.tail, d)\n  end\n  else fail\n\nval splitAt [a] (k: int, consumes xs: list a) : (list a, list a) =\n  if k = 0 then\n    Nil, xs\n  else if xs then begin\n    let ys = XCons { head = xs.head; tail = () } in\n    let zs = splitAtAux (k - 1, xs.tail, ys) in\n    ys, zs\n  end\n  else fail\n  (* TEMPORARY maybe it would be nice to also offer a version of splitAt\n     that does not fail when [length xs] is smaller than [k] *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* List concatenation and reversal. *)\n\n(* A non-tail-recursive version of [append]. *)\n\n(* LIST_APPEND *)\nval rec append [a] (\n  consumes xs: list a,\n  consumes ys: list a\n) : list a =\n  if xs then\n    Cons { head = xs.head; tail = append (xs.tail, ys) }\n  else\n    ys\n(* LIST_APPEND *)\n\n(* A tail-recursive version of [append], which uses auxiliary storage. *)\n\nval rec rev_append [a] (consumes xs: list a, consumes ys: list a) : list a =\n  if xs then\n    rev_append (xs.tail, Cons { head = xs.head; tail = ys })\n  else\n    ys\n\nval rev [a] (consumes xs: list a) : list a =\n  rev_append (xs, Nil)\n\nval append [a] (consumes xs: list a, consumes ys: list a) : list a =\n  rev_append (rev xs, ys)\n\n(* A tail-recursive version of [append], using no auxiliary storage, in\n   destination-passing-style. *)\n\n(* LIST_TAILREC_AUX_APPEND *)\nval rec appendAux [a] (consumes (dst: xcons a, xs: list a, ys: list a))\n: (| dst @ list a)\n  =\n  match xs with\n  | Cons ->\n      let dst' = XCons { head = xs.head; tail = () } in\n      freeze (dst, dst');\n      appendAux (dst', xs.tail, ys)\n  | Nil ->\n      freeze (dst, ys)\n  end\n(* LIST_TAILREC_AUX_APPEND *)\n\n(* LIST_TAILREC_APPEND *)\nval append [a] (consumes (xs: list a, ys: list a)) : list a =\n  match xs with\n  | Cons ->\n      let dst = XCons { head = xs.head; tail = () } in\n      appendAux (dst, xs.tail, ys);\n      dst\n  | Nil ->\n      ys\n  end\n(* LIST_TAILREC_APPEND *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Flattening a list of lists. *)\n\nval rec flatten [a] (consumes xss : list (list a)) : list a =\n  if xss then\n    append (xss.head, flatten xss.tail)\n  else\n    Nil\n\n(* -------------------------------------------------------------------------- *)\n\n(* Map. *)\n\n(* The following type does allow the function [f] to perform a strong update\n   on the argument list, whose type changes from [list a1] to [list a2]. A\n   new list of type [list b] is produced. *)\n\nval rec map [a1, a2, b, p : perm] (\n      consumes xs: list a1,\n  f: (consumes  x:      a1 | p) -> (     b |  x @      a2)\n                        | p)  : (list b | xs @ list a2)\n=\n  if xs then\n    Cons { head = f xs.head; tail = map (xs.tail, f) }\n  else\n    Nil\n\nval rev_map [a1, a2, b, p : perm] (\n      consumes xs: list a1,\n  f: (consumes  x:      a1 | p) -> (     b |  x @      a2)\n                        | p)  : (list b | xs @ list a2)\n=\n  let rec rev_map_aux (consumes accu: list b, consumes xs: list a1 | p) : (list b | xs @ list a2) =\n    if xs then\n      rev_map_aux (Cons { head = f xs.head; tail = accu }, xs.tail)\n    else\n      accu\n  in\n  rev_map_aux (Nil, xs)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* The following type allows the function [f] to perform a strong update\n   on the argument list, whose type changes from [list a1] to [list a2].\n   It also allows [f] to have a side effect at [p]. *)\n \nval rec iter [a1, a2, p : perm] (\n  consumes xs: list a1,\n  f: (consumes x:  a1 | p)\n         -> (| x @ a2)\n| p\n)    : (| xs @ list a2)\n=\n  if xs then begin\n    f xs.head;\n    iter (xs.tail, f)\n  end\n\n(* The following function should not be useful to the client, who can just\n   use [iter], but it is a good test of the type-checker. *)\n\nval simpler_iter [a, p : perm] (xs: list a, f: (a | p) -> () | p) : () =\n  iter (xs, f)\n\nval yet_simpler_iter [a] (xs: list a, f: a -> ()) : () =\n  iter (xs, f)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Fold. *)\n\n(* The following type allows the function [f] to perform a strong update\n   on the argument list, whose type changes from [list a1] to [list a2]. An\n   accumulator of type [b] is maintained. *)\n\n(* It is not necessary to explicitly thread a permission [p], because the\n   type [b] already serves this purpose. *)\n \nval rec fold_left [a1, a2, b] (\n  f: (consumes       b, consumes  x:      a1) -> (b |  x @      a2),\n      consumes accu: b, consumes xs: list a1)  : (b | xs @ list a2)\n=\n  if xs then\n    fold_left (f, f (accu, xs.head), xs.tail)\n  else\n    accu\n\nval rec fold_right [a1, a2, b] (\n  f: (consumes  x:      a1, consumes       b) -> (b |  x @      a2),\n      consumes xs: list a1, consumes accu: b)  : (b | xs @ list a2)\n=\n  if xs then\n    f (xs.head, fold_right (f, xs.tail, accu))\n  else\n    accu\n\n(* -------------------------------------------------------------------------- *)\n\n(* Various flavors of list search. *)\n\n(* Note that these are not instances of [fold], because we need to bail out\n   early when the search is successful. *)\n\nval rec for_all [a, p : perm] (ok: (a | p) -> bool, xs: list a | p) : bool =\n  if xs then\n    if ok xs.head then for_all (ok, xs.tail) else False\n  else\n    True\n\nval rec rich_for_all\n  [a, p : perm, q : perm] (ok: (a | p) -> rich_bool q empty, xs: list a | p) : rich_bool q empty =\n  match xs with\n  | Nil ->\n      True\n  | Cons { head; tail } ->\n      conjunction (\n        ok head,\n        fun (| p * tail @ list a) : rich_bool q empty =\n          rich_for_all (ok, tail)\n      )\n  end\n\nval rec rich_for_all_with_inlined_conjunction\n  [a, p : perm, q : perm] (ok: (a | p) -> rich_bool q empty, xs: list a | p) : rich_bool q empty =\n  match xs with\n  | Nil ->\n      True\n  | Cons { head; tail } ->\n      ok head && rich_for_all_with_inlined_conjunction (ok, tail)\n  end\n\nval rec exists [a, p : perm] (ok: (a | p) -> bool, xs: list a | p) : bool =\n  if xs then\n    if ok xs.head then True else exists (ok, xs.tail)\n  else\n    False\n\nval rec rich_exists_with_inlined_disjunction\n  [a, p : perm, q : perm] (ok: (a | p) -> rich_bool empty q, xs: list a | p) : rich_bool empty q =\n  match xs with\n  | Nil ->\n      False\n  | Cons { head; tail } ->\n      ok head || rich_exists_with_inlined_disjunction (ok, tail)\n  end\n\n(* The function [find] cannot raise an exception, as it does in OCaml.\n   Instead, it returns a sub-list, which either is empty or begins with\n   the desired element. This is more general than returning an option,\n   since it allows repeated searches, and is more efficient, since it\n   does not require memory allocation! *)\n\nval rec find [a, p : perm] (ok: (a | p) -> bool, consumes xs: list a | p) : list a =\n  if xs then\n    if ok xs.head then xs else find (ok, xs.tail)\n  else\n    xs\n\n(* The call [remove (ok, xs)] produces the list [xs], deprived of the first\n   element that satisfies the predicate [ok], if there is one. *)\n\nval rec remove [a, p : perm] (ok : (a | p) -> bool, consumes xs: list a | p) : list a =\n  if xs then\n    if ok xs.head then xs.tail else Cons { head = xs.head; tail = remove (ok, xs.tail) }\n  else\n    xs\n\n(* The function [mem] is parameterized with a notion of equality. It is just a\n   variant of [find] that does not require the function [equal] to be\n   partially applied to [x] ahead of time. *)\n\nval mem [a, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list a | p) : list a =\n  let ok (y : a | x @ a * p) : bool =\n    equal (x, y)\n  in\n  find (ok, xs)\n\nval rec mem [a, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list a | p) : list a =\n  if xs then\n    if equal (x, xs.head) then xs else mem (equal, x, xs.tail)\n  else\n    Nil\n\n(* Consuming the list can be problematic when it is not duplicable. Here is a\n   variant that does not consume the list and only returns a Boolean value. *)\n\nval rec member [a, p : perm] (\n  equal: (a, a | p) -> bool,\n  x: a, xs: list a\n| p) : bool =\n  if xs then equal(x, xs.head) || member(equal, x, xs.tail) else false\n\n(* [assoc] is a version of [find]. It is specialized with a notion of equality\n   of key-value pairs as equality of keys. *)\n\nval assoc [a, b, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list (a, b) | p) : list (a, b) =\n  let ok (y: a, _: b | x @ a * p) : bool =\n    equal (x, y)\n  in\n  find (ok, xs)\n\n(* TEMPORARY\n   mem   should be called find_equal\n   assoc should be called find_equal_key\n   remove could be specialized in the same ways as find *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Filtering. *) \n\nval filter [a, p : perm] (consumes xs: list a, ok: (a | p) -> bool | p) : list a =\n  let f (consumes accu: list a, consumes x: a | p) : list a =\n    if ok x then Cons { head = x; tail = accu } else accu\n  in\n  rev (fold_left [a, unknown, (list a | p)] (f, Nil, xs))\n\nval partition [a] (p: a -> bool, consumes xs: list a) : (list a, list a) =\n  let f (consumes (yes: list a, no: list a), consumes x: a) : (list a, list a) =\n    if p x then\n      Cons { head = x; tail = yes }, no\n    else\n      yes, Cons { head = x; tail = no }\n  in\n  let (yes, no) = fold_left [a, unknown, (list a, list a)] (f, (Nil, Nil), xs) in\n  rev yes, rev no\n\n(* Not tail-recursive. Should probably be. *)\nval rec rich_partition [a, p: perm, q: perm] (\n  consumes l: list a,\n  test: a -> rich_bool p q\n): (list (a | p), list (a | q)) =\n  match l with\n  | Nil ->\n      (nil, nil)\n  | Cons { head; tail } ->\n      let ps, qs = rich_partition (tail, test) in\n      if test head then\n        ps, Cons { head; tail = qs }\n      else\n        Cons { head; tail = ps }, qs\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iterator. *)\n\n(* Implementation of ADT-style iterators on lists.\n\n   Given the alias type [iterator a post], the [next] and [stop] functions, one\n   can wrap this iterator to a generic iterator using [iterator::wrap].\n\n   It is also possible to directly create a generic iterator from a list, using\n   [new_generic_iterator].\n*)\n\nalias iterator a (post: perm) =\n  ref (focused::focused (list a) post)\n\n(* Base functions *)\n\nval new_iterator [a] (consumes l: list a): iterator a (l @ list a) =\n  newref (l, fun (): () = ())\n\nval next\n  [a, post : perm]\n  (consumes it: iterator a post)\n: either::either (focused::focused a (it @ iterator a post)) (| post) =\n\n  let l, rewind_to_list = !it in\n  match l with\n  | Nil ->\n    rewind_to_list ();\n    either::right ()\n  | Cons { head; tail } ->\n      it := (tail, rewind_to_list);\n\n      let flex p : perm in\n      (* By unpacking the [osf::osf] definition, we have:\n         p * rewind_to_list @ (| consumes (l @ list a) * p) -> (| post)\n      *)\n\n      (* This is a bit heavy: we create a new [rewind_to_iterator]\n         function for each value returned by [next].\n\n         Its purpose is, provided the needed permissions to rewind,\n         namely [head @ a], to repack [rewind_to_list] so we can have [it\n         @ list_iterator a post] again.\n      *)\n      let rewind_to_iterator (|\n          consumes (\n            head @ a *\n            it @ Ref { contents: (=tail, =rewind_to_list) } *\n            (* The following bunch of permissions will be abstracted\n               by the existential quantification of the [osf::osf]\n               alias *)\n            l @ Cons { head; tail } * tail @ list a * p\n          )\n      ): (| it @ iterator a post)\n          =\n        pack rewind_to_list @ osf::osf (| tail @ list a) (| post)\n          witness (p * (head @ a) * (l @ Cons { head; tail }));\n\n        assert (rewind_to_list @ osf::osf (| tail @ list a) (| post));\n        ()\n      in\n\n      (* This assert is superfluous. *)\n      assert (rewind_to_iterator @ osf::osf (| head @ a) (| it @ iterator a post));\n\n      either::left (head, rewind_to_iterator)\n  end\n\nval stop [a, post: perm]\n  (consumes it: iterator a post):\n  (| post) =\n  let _, rewind_to_list = !it in\n  rewind_to_list ()\n\n(* Directly provides an OO-style generic iterator ([iterator::iterator]) *)\n\nval new_generic_iterator [a] (consumes l: list a):\n  iterator::iterator a (l @ list a) =\n\n  let alias post: perm = l @ list a in\n  iterator::wrap [a, (iterator a post), post]\n    (new_iterator l, next [a, post], stop [a, post])\n\n(* -------------------------------------------------------------------------- *)\n\n(* Lists of pairs. *)\n\nval rec split [a, b] (consumes xys : list (a, b)) : (list a, list b) =\n  if xys then begin\n    let x, y = xys.head in\n    let xs, ys = split xys.tail in\n    Cons { head = x; tail = xs },\n    Cons { head = y; tail = ys }\n  end\n  else\n    Nil,\n    Nil\n\nval rec combine [a, b] (consumes xs: list a, consumes ys: list b) : list (a, b) =\n  match xs, ys with\n  | Cons, Cons ->\n      Cons { head = (xs.head, ys.head); tail = combine (xs.tail, ys.tail) }\n  | Nil, Nil ->\n      Nil\n  | Nil, Cons ->\n      Nil\n  | Cons, Nil ->\n      Nil\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* This auxiliary function is used by [sort]. It peforms a dynamic test\n   of duplicability in order to choose between two ways of splitting a\n   list, one of which causes the list elements to apparently become\n   shared. *)\n\n(* While porting [sort] from OCaml's standard library, we encountered an\n   ownership problem. OCaml's code uses a trick, which is to *not* truncate\n   the list in the first recursive call. In other words, the first recursive\n   instance of [sort] is passed the entire list, but has permission to use\n   only the [n1] first elements of it. Mezzo's type system cannot express this\n   subtlety. As a result, it seems that we have to either restrict the code to\n   the case where the type [a] is duplicable, or truncate the list that is\n   passed to the first recursive call (at a cost). In fact, we can encapsulate\n   both versions of the code into a single [sort] function, which takes an\n   argument of [duplicability a], and performs the choice at runtime,\n   depending on the type [a]. This is perhaps not great, but it shows that we\n   do have a few tricks up our sleeve. *)\n\nval splitAtOrShareAndChop [a] (\n  dupa: reflection::duplicability a,\n  k: int,\n  consumes xs: list a\n) : (list a, list a) =\n  if dupa then\n    (* If the list elements are duplicable, then we can follow the OCaml\n       version of the code, and keep the first list unchanged. It is too\n       long, but the extra elements will never be accessed. *)\n    xs, chop (k, xs)\n  else\n    (* Otherwise, we have to use [splitAt], which is less efficient (the\n       first part of the list spine is copied) but obviously does not\n       cause the list elements to become shared. Our type system is not\n       expressive enough to understand that ``we own only the first [k]\n       elements of this list''. *)\n    splitAt (k, xs)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging and sorting. *)\n\n(* Note: [merge] is not tail-recursive, and is not used by [sort],\n   which has its own [rev_merge]. *)\n\nval rec merge [a] (\n  cmp: (a, a) -> int,\n  consumes xs: list a,\n  consumes ys: list a\n) : list a =\n  match xs, ys with\n  | Nil, _ ->\n      ys\n  | _, Nil ->\n      xs\n  | Cons { head = x }, Cons { head = y } ->\n      if cmp (x, y) <= 0\n      then Cons { head = x; tail = merge (cmp, xs.tail, ys) }\n      else Cons { head = y; tail = merge (cmp, xs, ys.tail) }\n  end\n\nval sort [a] (\n  dupa: reflection::duplicability a,\n  cmp: (a, a) -> int,\n  consumes xs: list a\n) : list a =\n  (* Wrap the comparison function [cmp] so as to take an extra\n     argument, [sense], which takes the value -1 or 1 and allows\n     reversing the ordering if desired. *)\n  let cmp (sense: int, x: a, y: a) : int =\n    sense * cmp (x, y)\n  in\n  (* [rev_merge (sense, xs, ys, accu)] merges the lists [xs] and [ys]\n     and concatenates the reverse of the resulting list in front of\n     [accu]. The ordering is dictated by [sense]. *)\n  let rec rev_merge (sense: int, consumes xs: list a, consumes ys: list a, consumes accu: list a) : list a =\n    if xs then\n      if ys then begin\n        let x = xs.head\n        and y = ys.head in\n        if cmp (sense, x, y) <= 0\n        then rev_merge (sense, xs.tail, ys, Cons { head = x; tail = accu })\n        else rev_merge (sense, xs, ys.tail, Cons { head = y; tail = accu })\n      end\n      else\n        rev_append (xs, accu)\n    else\n      rev_append (ys, accu)\n  in\n  (* This is the main sorting function. The integer [n] is always at\n     least [2], and is less than or equal to the length of [xs]. Again,\n     the ordering is dictated by [sense]. *)\n  let rec sort (sense: int, n: int, consumes xs: list a) : list a =\n    (* Leaf cases. *)\n    if n = 2 then\n      match xs with\n      | Cons { head = x1; tail = Cons { head = x2; tail = any }} ->\n          if cmp (sense, x1, x2) <= 0 then two (x1, x2) else two (x2, x1)\n      | _ ->\n         fail (* impossible *)\n      end\n    else if n = 3 then\n      match xs with\n      | Cons { head = x1; tail = Cons { head = x2; tail = Cons { head = x3; tail = any }}} ->\n          if cmp (sense, x1, x2) <= 0 then begin\n            if cmp (sense, x2, x3) <= 0 then three (x1, x2, x3)\n            else if cmp (sense, x1, x3) <= 0 then three (x1, x3, x2)\n            else three (x3, x1, x2)\n          end else begin\n            if cmp (sense, x1, x3) <= 0 then three (x2, x1, x3)\n           else if cmp (sense, x2, x3) <= 0 then three (x2, x3, x1)\n           else three (x3, x2, x1)\n          end\n      | _ ->\n         fail (* impossible *)\n      end\n    (* The general case. *)\n    else begin\n      let n1 = n / 2 in\n      let n2 = n - n1 in\n      let xs1, xs2 = splitAtOrShareAndChop (dupa, n1, xs) in\n      let xs1 = sort (-sense, n1, xs1) in\n      let xs2 = sort (-sense, n2, xs2) in\n      rev_merge (-sense, xs1, xs2, Nil)\n    end\n  in\n  let n = length xs in\n  if n < 2 then xs else sort (1, n, xs)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Comparison. *)\n\nval rec equal [a, b] (eq: (a, b) -> bool, xs: list a, ys: list b) : bool =\n  if xs then\n    if ys then\n      if eq (xs.head, ys.head) then\n        equal (eq, xs.tail, ys.tail)\n      else\n        False\n    else\n      False\n  else\n    if ys then\n      False\n    else\n      True\n\nval rec compare [a, b] (cmp: (a, b) -> int, xs: list a, ys: list b) : int =\n  if xs then\n    if ys then begin\n      let c = cmp (xs.head, ys.head) in\n      if c = 0 then\n        compare (cmp, xs.tail, ys.tail)\n      else\n        c\n    end\n    else\n      1\n  else\n    if ys then\n      -1\n    else\n      0\n\n(* -------------------------------------------------------------------------- *)\n\n(* Conversions between arrays and lists. *)\n\n(* Converting an array (segment) to a list. *)\n\nval rec segment2list [a, m] duplicable a => (x: array m a, i: int, j: int, consumes accu: list a) : list a =\n  if i < j then\n    segment2list (x, i, j - 1, Cons { head = array::get (x, j - 1); tail = accu })\n  else\n    accu\n\nval array2list [a, m] duplicable a => (x: array m a) : list a =\n  segment2list (x, 0, array::length x, Nil)\n\n(* TEMPORARY using [array::transform], we could offer a variant of [array2list]\n   where the ownership of the elements is transferred from the array to the list *)\n\n(* Converting a list to an array. *)\n\nval list2array [a, m] (consumes xs: list a) : array m a =\n  let n = length xs in\n  let r = newref xs in\n  array::init (Up, n, fun (i: int | r @ ref (list a)) : a =\n    match !r with\n    | Cons { head; tail } ->\n        r := tail;\n        head\n    | Nil ->\n        fail (* impossible *)\n    end\n  )\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo list.mz\"\nEnd:\n*)\n");q("/stdlib/list.mzi","(* -------------------------------------------------------------------------- *)\n\n(* The standard definition of immutable lists. *)\n\ndata list a =\n  | Nil\n  | Cons { head: a; tail: list a }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Short-hands for constructing lists. *)\n\nalias cons_t a b = Cons { head: a; tail: b }\n\nval nil   : Nil\nval cons  : [a] (consumes a, consumes list a) -> cons_t a (list a)\nval two   : [a] (consumes (a, a)) -> cons_t a (cons_t a Nil)\nval three : [a] (consumes (a, a, a)) -> cons_t a (cons_t a (cons_t a Nil))\nval init  : [a, p : perm] (n : int, f : (int | p) -> a | p) -> list a\n \n(* -------------------------------------------------------------------------- *)\n\n(* List length. *)\n\nval length : [a] list a -> int\n\n(* -------------------------------------------------------------------------- *)\n\n(* List head and tail. *)\n\nval hd : [a] (consumes Cons { head: a; tail: unknown }) -> a\nval tl : [a] (consumes Cons { head: unknown; tail: list a }) -> list a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Indexing operations. *)\n\nval nth     : [a] (consumes list a, int) -> a\nval chop    : [a] (int, consumes list a) -> list a\nval splitAt : [a] (int, consumes list a) -> (list a, list a)\n\n(* -------------------------------------------------------------------------- *)\n\n(* List concatenation and reversal. *)\n\nval append     : [a] (consumes list a, consumes list a) -> list a\nval rev_append : [a] (consumes list a, consumes list a) -> list a\nval rev        : [a] (consumes list a) -> list a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Flattening a list of lists. *)\n\nval flatten : [a] (consumes list (list a)) -> list a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Map. *)\n\nval map : [a1, a2, b, p : perm] (\n      consumes xs: list a1,\n  f: (consumes  x:      a1 | p) -> (     b |  x @      a2)\n                        | p) -> (list b | xs @ list a2)\n\nval rev_map : [a1, a2, b, p : perm] (\n      consumes xs: list a1,\n  f: (consumes  x:      a1 | p) -> (     b |  x @      a2)\n                        | p) -> (list b | xs @ list a2)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\nval iter : [a1, a2, p : perm] (\n  consumes xs: list a1,\n  f: (consumes x:  a1 | p)\n         -> (| x @ a2)\n| p\n)   -> (| xs @ list a2)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Fold. *)\n\nval fold_left : [a1, a2, b] (\n  f: (consumes       b, consumes  x:      a1) -> (b |  x @      a2),\n      consumes accu: b, consumes xs: list a1) -> (b | xs @ list a2)\n\nval fold_right : [a1, a2, b] (\n  f: (consumes  x:      a1, consumes       b) -> (b |  x @      a2),\n      consumes xs: list a1, consumes accu: b) -> (b | xs @ list a2)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Various flavors of list search. *)\n\nval for_all : [a, p : perm] ((a | p) -> bool, list a | p) -> bool\nval exists  : [a, p : perm] ((a | p) -> bool, list a | p) -> bool\nval find    : [a, p : perm] ((a | p) -> bool, consumes list a | p) -> list a\nval remove  : [a, p : perm] ((a | p) -> bool, consumes list a | p) -> list a\n\nval mem     : [a, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list a | p) -> list a\nval member  : [a, p : perm] (equal: (a, a | p) -> bool, x: a, xs: list a | p) -> bool\n\nval assoc   : [a, b, p : perm] (\n  equal: (a, a | p) -> bool,\n  x: a,\n  consumes xs: list (a, b)\n| p) -> list (a, b)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Filtering. *) \n\nval filter    : [a, p : perm] (consumes xs: list a, ok: (a | p) -> bool | p) -> list a\nval partition : [a] (p: a -> bool, consumes xs: list a) -> (list a, list a)\nval rich_partition :\n  [a, p: perm, q: perm] (\n    consumes list a,\n    test: a -> rich_bool p q\n  ) -> (list (a | p), list (a | q))\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iterator. *)\n\n(* Implementation of ADT-style iterators on lists.\n\n   Given the alias type [iterator a post], the [next] and [stop] functions, one\n   can wrap this iterator to a generic iterator using [iterator::wrap].\n\n   It is also possible to directly create a generic iterator from a list, using\n   [new_generic_iterator].\n*)\n\nabstract iterator a (post: perm)\nfact exclusive (iterator a post)\n\n(* Base functions *)\n\nval new_iterator: [a] (consumes l: list a) -> iterator a (l @ list a)\n\nval next: [a, post: perm] (consumes it: iterator a post) ->\n  either::either (focused::focused a (it @ iterator a post)) (| post)\nval stop: [a, post: perm] (consumes it: iterator a post) -> (| post)\n\n(* Directly provides an OO-style generic iterator ([iterator::iterator]) *)\n\nval new_generic_iterator: [a] (consumes l: list a) ->\n  iterator::iterator a (l @ list a)\n\n\n(* -------------------------------------------------------------------------- *)\n\n(* Lists of pairs. *)\n\nval split   : [a, b] (consumes xys: list (a, b)) -> (list a, list b)\nval combine : [a, b] (consumes list a, consumes list b) -> list (a, b)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging and sorting. *)\n\nval merge : [a] (\n  cmp: (a, a) -> int,\n  consumes list a,\n  consumes list a\n) -> list a\n\nval sort  : [a] (\n  reflection::duplicability a,\n  cmp: (a, a) -> int,\n  consumes list a\n) -> list a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Comparison. *)\n\nval equal   : [a, b] (eq: (a, b) -> bool, xs: list a, ys: list b) -> bool\nval compare : [a, b] (cmp: (a, b) -> int, xs: list a, ys: list b) -> int\n\n(* -------------------------------------------------------------------------- *)\n\n(* Conversions between arrays and lists. *)\n\nval array2list : [a, m] duplicable a => array m a -> list a\nval list2array : [a, m] (consumes list a) -> array m a\n\n");q("/stdlib/memoize.mz",'(* For the moment, we hold the lock while the client function [f] is busy. In\n   a concurrent implementation, we might wish to hold the lock only during a\n   short period. We could release the lock before invoking [f], and acquire it\n   again when [f] is done (suggestion by Guillaume Melquiond). Some thought\n   would be required if we wish to guarantee that [f] is invoked at most once\n   for every input. TEMPORARY *)\n\n(* TEMPORARY maybe we could memoize the function without hiding its state\n   at all (so the memoized function would need t @ table a b * s) and then\n   use hide::hide separately. *)\n\nopen lock (* new, acquire, release *)\nopen hashtable (* table, create, find, add *)\n\n(* The simple memoizing combinator. *)\n\n(* A lock is used to protect the hash table and to allow its use in a\n   duplicable object (the memoized function). The lock also protects\n   the permission [s]. *)\n\nval memoize\n  [a, b, s : perm]\n  duplicable a => duplicable b =>\n  (hash: a -> int, eq: (a, a) -> bool, f: (a | s) -> b | consumes s)\n  : a -> b =\n\n  (* Create the internal hash table. *)\n  let t = create (11, hash, eq) in\n  (* Create a lock which (at runtime) prevents re-entrant calls\n     into the memoized function and (at type-checking time) allows\n     us to hide the existence of the hash table. *)\n  let l : lock (t @ table a b * s) = new () in\n\n  (* Now, construct the memoized function. *)\n  fun (x: a) : b =\n    (* Acquire the lock. This yields the permission [t @ table a b]. *)\n    acquire l;\n    (* Find [y] in the table, if it is there already, or compute [y]\n       and store it in the table for potential later re-use. *)\n    let y =\n      match find (x, t) with\n      | Some { contents = y } ->\n          y\n      | None ->\n          let y = f x in\n          assert l @ locked;\n          add (x, y, t);\n          y\n      end\n    in\n    (* Release the lock. This consumes [t @ table a b]. *)\n    release l;\n    (* Return [y]. *)\n    y\n\n(* The recursive memoizing combinator. *)\n\n(* A technician would say that, by requiring [f] to be polymorphic in [p], we\n   are manually building in an application of the second-order frame rule.\n   This allows us to pass the permission [t @ table a b], disguised as an\n   abstract permission [p], to the function [f], which itself passes it on to\n   [self]. This allows us not to release and re-acquire the lock at every\n   recursive invocation. Incidentally, it guarantees that [f] cannot store\n   [self] and invoke it at a later time. *)\n\nval fix\n  [a, b]\n  duplicable a => duplicable b =>\n  (\n    hash: a -> int,\n    eq: (a, a) -> bool,\n    f: [p : perm] (\n      (a | p) -> b,\n      a\n    | p\n    ) -> b\n  ) \n  : a -> b =\n\n  (* Create the internal hash table and lock. *)\n  let t = create (11, hash, eq) in\n  let l : lock (t @ table a b) = new () in\n\n  (* For the sake of efficiency, we prefer not to release and re-acquire\n     the lock at every recursive invocation. Thus, the recursive function\n     that we define below assumes that the lock is held -- hence, the\n     table is available. *)\n\n  (* Construct the recursive function. *)\n  let rec memoized (x: a | t @ table a b) : b =\n    match find (x, t) with\n    | Some { contents = y } ->\n        y\n    | None ->\n       let y = f (memoized, x) in\n       add (x, y, t);\n       y\n    end\n  in\n\n  (* Now, construct the final memoized function. *)\n  fun (x: a) : b =\n    (* Acquire the lock. This yields the permission [t @ table a b]. *)\n    acquire l;\n    (* Invoke the recursive computation. *)\n    let y = memoized x in\n    (* Release the lock. This consumes [t @ table a b]. *)\n    release l;\n    (* Return [y]. *)\n    y\n\n(* TEMPORARY once the bug is fixed, we might wish [fix] to have type\n\nval fix\n  [a, b, s : perm]\n  duplicable a => duplicable b =>\n  (\n    hash: a -> int,\n    eq: (a, a) -> bool,\n    f: [p : perm] ((a | p * s) -> b, a | p * s) -> b\n  ) \n  : (a | s) -> b =\n\nThis requires adding *s to memoized,\nadding |s to the final anonymous function. *)\n\n(*\nLocal Variables:\ncompile-command: "../mezzo memoize.mz"\nEnd:\n*)\n');q("/stdlib/memoize.mzi","(* [memoize (hash, eq, f)] builds a memoizing version of the function [f],\n   using an internal hash table based on the provided hash and equality\n   functions. *)\n\n(* If [f] has type [a -> b], the types [a] and [b] must be duplicable,\n   because arguments and results will be stored in the internal hash\n   table. *)\n\n(* The function [f] may have a side effect, represented by [s]. This must be\n   used with caution: it often does not make sense to memoize a function that\n   has a side effect. *)\n\nval memoize:\n  [a, b, s : perm]\n  duplicable a => duplicable b =>\n  (hash: a -> int, eq: (a, a) -> bool, f: (a | s) -> b | consumes s) ->\n  a -> b\n\n(* Now, a memoizing fixpoint combinator. Here, the argument [f] is not a\n   closed function, but an open recursive function, i.e., it is parameterized\n   over [self]. So, [f] should have type [(self: a -> b, x: a) -> y: b]. *)\n\n(* Actually, we require [f] to have a slightly more general type, which is\n   parametric in an unknown permission [p]. Thus, we tell our client that\n   [self] may have a side effect, and that (of course) we expect the\n   application of [f] to [self] to have the same side effect. Incidentally,\n   note that this type prevents [f] from storing [self] and re-using after\n   [f] has returned! So, we are telling [f], ``you can use [self] now if\n   you wish, but you are not allowed to use it later''. *)\n\nval fix:\n  [a, b]\n  duplicable a => duplicable b =>\n  (\n    hash: a -> int,\n    eq: (a, a) -> bool,\n    f: [p : perm] ((a | p) -> b, a | p) -> b\n  ) ->\n  a -> b\n\n");q("/stdlib/mlist.mz",'(* Operations on mutable lists. *)\n\n(* This module is for the moment quite incomplete. We lack a clear picture\n   of what mutable lists are useful for (what abstract data types do they\n   implement?). *)\n\n(* Note that the module [bucket] also offers operations on mutable lists\n   of key-value pairs. We could in principle share code between these\n   modules, but that would come at the cost of an extra indirection. *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* The algebraic data type of mutable lists. *)\n\n(* We declare the data constructor [MCons] mutable, which means that an [MCons]\n   cell is uniquely owned and that its [head] and [tail] fields can be mutated.\n   On the other hand, we declare the data constructor [MNil] immutable. This\n   means that [MNil] objects can be shared. *)\n\n(* TEMPORARY once we implement [slim], the system will have the property that\n   immutable objects do *not* have an adopter field, and as a result, [MNil]\n   will not be heap-allocated. It will be essentially identical to the [null]\n   pointer in Java, except it is not polymorphic (it does not belong to all\n   types, only to the type [mlist]). *)\n\n(* MLIST_DEF *)\ndata mlist a =\n  | MNil\n  | mutable MCons { head: a; tail: mlist a }\n(* MLIST_DEF *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Length. *)\n\nval rec length_aux [a] (accu: int, xs: mlist a) : int =\n  match xs with\n  | MNil ->\n      accu\n  | MCons ->\n      length_aux (accu + 1, xs.tail)\n  end\n\nval length [a] (xs: mlist a) : int =\n  length_aux (0, xs)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Search. *)\n\nval rec mem [a, p : perm] (\n  equal: (a, a | p) -> bool,\n  x: a,\n  xs: mlist a\n| p\n) : bool =\n  match xs with\n  | MNil ->\n      false\n  | MCons { head; tail } ->\n      equal (x, head) || mem (equal, x, tail)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* In-place concatenation. *)\n\n(* MLIST_APPEND*)\nval rec append1 [a]\n  (xs: MCons { head: a; tail: mlist a },\n   consumes ys: mlist a) : () =\n  match xs.tail with\n  | MNil  -> xs.tail <- ys\n  | MCons -> append1 (xs.tail, ys)\n  end\n\nval append [a] (consumes xs: mlist a,\n                consumes ys: mlist a) : mlist a =\n  match xs with\n  | MNil  -> ys\n  | MCons -> append1 (xs, ys); xs\n  end\n(* MLIST_APPEND*)\n\n(* -------------------------------------------------------------------------- *)\n\n(* In-place reversal. *)\n\nval rec rev_append [a] (consumes xs: mlist a, consumes ys: mlist a) : mlist a =\n  match xs with\n  | MNil ->\n      ys\n  | MCons { tail } ->\n      xs.tail <- ys;\n      rev_append (tail, ys)\n  end\n\nval rev [a] (consumes xs: mlist a) : mlist a =\n  rev_append (xs, MNil)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Indexing operations. *)\n\nval rec splitAtAux [a] (\n  k: int,\n  consumes xs: mlist a,\n  consumes c: MCons { head: a; tail = xs }\n) : (mlist a | c @ mlist a) =\n  if k = 0 then begin\n    c.tail <- MNil;\n    xs\n  end\n  else if xs then\n    splitAtAux (k - 1, xs.tail, xs)\n  else\n    fail\n\nval splitAt [a] (k: int, consumes xs: mlist a) : (mlist a, mlist a) =\n  if k = 0 then\n    MNil,\n    xs\n  else if xs then begin\n    let ys = splitAtAux (k - 1, xs.tail, xs) in\n    xs, ys\n  end\n  else fail\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging and sorting. *)\n\n(* Merging and sorting are performed in-place. In the case of sorting,\n   unfortunately, each call to [splitAt] and each recursive call to [sort]\n   allocate one [MNil] cell, so in total, we allocate O(nlog n) such cells. *)\n\n(* Note: [merge] is not tail-recursive, and is not used by [sort],\n   which has its own [rev_merge]. *)\n\nval rec merge [a] (\n  cmp: (a, a) -> int,\n  consumes xs: mlist a,\n  consumes ys: mlist a\n) : mlist a =\n  match xs, ys with\n  | MNil, _ ->\n      ys\n  | _, MNil ->\n      xs\n  | MCons { head = x }, MCons { head = y } ->\n      if cmp (x, y) <= 0\n      then begin\n       xs.tail <- merge (cmp, xs.tail, ys);\n       xs\n      end\n      else begin\n       ys.tail <- merge (cmp, xs, ys.tail);\n       ys\n      end\n end\n\nval sort [a] (\n  cmp: (a, a) -> int,\n  consumes xs: mlist a\n) : mlist a =\n  (* Wrap the comparison function [cmp] so as to take an extra\n     argument, [sense], which takes the value -1 or 1 and allows\n     reversing the ordering if desired. *)\n  let cmp (sense: int, x: a, y: a) : int =\n    sense * cmp (x, y)\n  in\n  (* [rev_merge (sense, xs, ys, accu)] merges the lists [xs] and [ys]\n     and concatenates the reverse of the resulting list in front of\n     [accu]. The ordering is dictated by [sense]. *)\n  let rec rev_merge (sense: int, consumes xs: mlist a, consumes ys: mlist a, consumes accu: mlist a) : mlist a =\n    if xs then\n      if ys then begin\n        let x = xs.head\n        and y = ys.head in\n        if cmp (sense, x, y) <= 0\n        then begin\n         let tail = xs.tail in\n         xs.tail <- accu;\n         rev_merge (sense, tail, ys, accu)\n       end\n        else begin\n         let tail = ys.tail in\n         ys.tail <- accu;\n         rev_merge (sense, xs, tail, accu)\n       end\n      end\n      else\n        rev_append (xs, accu)\n    else\n      rev_append (ys, accu)\n  in\n  (* This is the main sorting function. The integer [n] is always at\n     least [1], and is the length of the list [xs]. Again, the\n     ordering is dictated by [sense]. I have dropped the special\n     case [n = 3], which is present in the OCaml code and in [list.mz],\n     just because it is too painful. *)\n  let rec sort (sense: int, n: int, consumes xs: mlist a) : mlist a =\n    (* Leaf cases. *)\n    if n = 1 then\n      xs\n    else if n = 2 then\n      match xs with\n      | MCons { head = x1; tail = MCons { head = x2; tail = any } as ys} ->\n         (* [any] must be [MNil]. We do not check this fact. *)\n          if cmp (sense, x1, x2) <= 0 then xs else begin\n           xs.head <- x2;\n           ys.head <- x1;\n           xs\n         end\n      | _ ->\n         fail (* impossible *)\n      end\n    (* The general case. *)\n    else begin\n      let n1 = n / 2 in\n      let n2 = n - n1 in\n      let xs1, xs2 = splitAt (n1, xs) in\n      let xs1 = sort (-sense, n1, xs1) in\n      let xs2 = sort (-sense, n2, xs2) in\n      rev_merge (-sense, xs1, xs2, MNil)\n    end\n  in\n  let n = length xs in\n  if n < 2 then xs else sort (1, n, xs)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Freezing. *)\n\n(* This could be a ghost function. For the moment, it is represented as a\n   normal function, but does nothing at runtime. *)\n\nval rec freeze [a] (consumes xs: mlist a) : (| xs @ list::list a) =\n  match xs with\n  | MNil ->\n      (* tag of xs <- list::Nil; *)\n      magic::magic [b = (| xs @ list::Nil)] ()\n      (* TEMPORARY we must cheat, because the type system currently does\n\t not allow us to convert between MNil and Nil. It could. *)\n  | MCons ->\n      tag of xs <- list::Cons;\n      freeze xs.tail\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(*\nLocal Variables:\ncompile-command: "../mezzo mlist.mz"\nEnd:\n*)\n');q("/stdlib/mlist.mzi","(* -------------------------------------------------------------------------- *)\n\n(* The algebraic data type of mutable lists. *)\n\ndata mlist a =\n  | MNil\n  | mutable MCons { head: a; tail: mlist a }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Length. *)\n\nval length: [a] mlist a -> int\n\n(* -------------------------------------------------------------------------- *)\n\n(* Search. *)\n\nval mem: [a, p : perm] (\n  equal: (a, a | p) -> bool,\n  x: a,\n  xs: mlist a\n| p\n) -> bool\n\n(* -------------------------------------------------------------------------- *)\n\n(* In-place reversal. *)\n\nval rev_append: [a] (consumes mlist a, consumes mlist a) -> mlist a\nval rev: [a] (consumes mlist a) -> mlist a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Indexing. *)\n\nval splitAt: [a] (int, consumes mlist a) -> (mlist a, mlist a)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging and sorting. *)\n\nval merge: [a] (\n  cmp: (a, a) -> int,\n  consumes mlist a,\n  consumes mlist a\n) -> mlist a\n\nval sort: [a] (\n  cmp: (a, a) -> int,\n  consumes mlist a\n) -> mlist a\n\n(* -------------------------------------------------------------------------- *)\n\n(* Freezing. *)\n\nval freeze: [a] (consumes xs: mlist a) -> (| xs @ list::list a)\n\n(* -------------------------------------------------------------------------- *)\n\n");q("/stdlib/mutableTreeMap.mz","(* This module implements association maps using height-balanced trees.\n   The code is modeled after OCaml's [Map] library, but has been modified\n   to allow trees to be modified in place. *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A tree is either empty or a binary node. Besides its children, a binary\n   node contains a key, a value, and its height. *)\n\ndata tree k a =\n  | Empty\n  | mutable Node { left: tree k a; key: k; value_: a; right: tree k a; height: int }\n\n(* -------------------------------------------------------------------------- *)\n\n(* Cardinal. *)\n\nval rec cardinal [k, a] (t: tree k a) : int =\n  match t with\n  | Empty ->\n      0\n  | Node ->\n      cardinal t.left + 1 + cardinal t.right\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* The following (private) function reads the height information that is\n   stored in a node. It does not recompute anything. *)\n\nval height [k, a] (t: tree k a) : int =\n  match t with\n  | Empty -> 0\n  | Node  -> t.height\n  end\n\n(* The following (private) function updates the height information that is\n   stored in a node, based on the height of its children. *)\n\nval update_height [k, a] (\n  consumes t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: unknown }\n) : ( |    t @ Node { left: tree k a; key: k; value_: a; right: tree k a; height: int     }) =\n  t.height <- max (height t.left, height t.right) + 1\n\n(* The following (private) function re-organizes a tree, if required, by\n   performing a rotation at the root. The left and right sub-trees are\n   expected to have almost equal heights. The address of the new tree root\n   is returned. *)\n\nval bal [k, a] (\n  consumes t: Node { left: tree k a; key: k; value_: a; right: tree k a; height: unknown }\n) : tree k a =\n\n  (* Extract the two sub-trees and their heights. *)\n  let Node { left = l; right = r } = t in\n  let hl = height l\n  and hr = height r in\n\n  (* Determine whether the tree is unbalanced and needs to be repaired. *)\n\n  (* Situation 1: the left sub-tree is too big. *)\n  if hl > hr + 2 then match l with\n  | Empty -> fail (* impossible! *)\n  | Node { left = ll; right = lr } ->\n      if height ll >= height lr then begin\n       (* The left node becomes the root node. *)\n       (* The root node becomes the right child. *)\n       t.left <- lr;\n       update_height t;\n       l.right <- t;\n       update_height l;\n       l\n      end\n      else match lr with\n      | Empty -> fail (* impossible! *)\n      | Node { left = lrl; right = lrr } ->\n         (* The node [lr] becomes the root node. *)\n         (* The root node becomes the right child. *)\n         (* The left node remains the left child. *)\n         l.right <- lrl;\n         update_height l;\n         t.left <- lrr;\n         update_height t;\n         lr.left <- l;\n         lr.right <- t;\n         update_height lr;\n         lr\n      end\n  end\n\n  (* Situation 2: the right sub-tree is too big. *)\n  else if hr > hl + 2 then match r with\n  | Empty -> fail (* impossible! *)\n  | Node { left = rl; right = rr } ->\n      if height rr >= height rl then begin\n       (* The right node becomes the root node. *)\n        (* The root node becomes the left child. *)\n       t.right <- rl;\n       update_height t;\n       r.left <- t;\n       update_height r;\n       r\n      end\n      else match rl with\n      | Empty -> fail (* impossible! *)\n      | Node { left = rll; right = rlr } ->\n         (* The node [rl] becomes the root node. *)\n         (* The root node becomes the left child. *)\n         (* The right node remains the right child. *)\n          t.right <- rll;\n         update_height t;\n         r.left <- rlr;\n         update_height r;\n         rl.left <- t;\n         rl.right <- r;\n         update_height rl;\n         rl\n      end\n  end\n\n  (* Last situation: the tree is not unbalanced. *)\n  (* Just update its height field. [t] remains the root. *)\n  else begin\n    t.height <- max (hl, hr) + 1;\n    t\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Creating an empty tree. *)\n\nval create [k, a] () : tree k a =\n  Empty\n\n(* Creating a singleton tree. *)\n\nval singleton [k, a] (consumes (x: k, d: a)) : tree k a =\n  Node { left = Empty; key = x; value_ = d; right = Empty; height = 1 }\n\n(* Testing whether a tree is empty. *)\n\nval is_empty [k, a] (t : tree k a) : bool =\n  match t with\n  | Empty -> True\n  | Node  -> False\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Insertion. *)\n\nval rec add [k, a] (\n  cmp: (k, k) -> int,\n  consumes x: k,\n  consumes d: a,\n  consumes t: tree k a\n) : tree k a =\n  match t with\n  | Empty ->\n      (* Create a singleton tree. *)\n      Node { left = t; key = x; value_ = d; right = Empty; height = 1 }\n  | Node ->\n      let c = cmp (x, t.key) in\n      if c = 0 then begin\n       (* The key already exists; overwrite the previous data *)\n       t.value_ <- d;\n       t\n      end\n      else if c < 0 then begin\n       t.left <- add (cmp, x, d, t.left);\n       bal t\n      end\n      else begin\n       t.right <- add (cmp, x, d, t.right);\n       bal t\n      end\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Lookup. *)\n\n(* It seems that the function [find] must require [duplicable a].\n   Indeed, without this hypothesis, we would be forced to consume\n   the argument tree [t], which does not seem reasonable. *)\n\nval rec find [k, a] duplicable a => (\n  cmp: (k, k) -> int,\n  x: k,\n  t: tree k a\n) : option a =\n  match t with\n  | Empty ->\n      none\n  | Node ->\n      let c = cmp (x, t.key) in\n      if c = 0 then some t.value_\n      (* It is interesting to note that we cannot write the more compact code:\n        find (cmp, x, (if c < 0 then t.left else t.right))\n        Indeed, the type-checker is unable to figure out the desired type of\n        the conditional sub-expression; it reports a resource allocation\n        conflict. In fact, if we wanted to explicitly declare this type,\n        I believe that we would need a magic wand: this sub-expression\n        produces a result [s] together with the permissions [s @ tree k a]\n        and [s @ tree k a -* t @ tree k a]. *)\n      else if c < 0 then find (cmp, x, t.left)\n      else find (cmp, x, t.right)\n  end\n\n(* The above [find] function requires [a] to be duplicable. Another approach\n   is to parameterize [find] with a [copy] function that is able to copy an\n   element of type [a]. In fact, an even more general idea is to offer an\n   [update] function that allows the caller to access the value found at the\n   key [x] within a lexically-delimited scope, and then to surrender it (or\n   a new version of it). *)\n\n(* Because the key [x] may be absent, the function [f] is called either never\n   or just once. Our use of a [preserved/consumed] permission pair allows\n   reflecting this. A [pre/post] permission pair would be more precise, but\n   can be used only when it is known that [f] will be called exactly once. *)\n\nval rec update\n  [k, a, preserved : perm, consumed : perm]\n  (cmp: (k, k) -> int,\n    x: k, t: tree k a,\n    f: (consumes a | preserved * consumes consumed) -> a\n      | preserved * consumes consumed\n  ) : () =\n  match t with\n  | Empty ->\n      ()\n  | Node ->\n      let c = cmp (x, t.key) in\n      if c = 0 then\n       t.value_ <- f t.value_\n      else if c < 0 then\n       update [k, a, preserved, consumed] (cmp, x, t.left, f)\n      else\n       update [k, a, preserved, consumed] (cmp, x, t.right, f)\n  end\n\n(* The following two functions (currently not exported) show that versions\n   of [find] can be implemented in terms of [update]. *)\n\nval find_and_copy [k, a] (\n  copy: a -> a,\n  cmp: (k, k) -> int,\n  x: k,\n  t: tree k a\n) : option a =\n  let r = newref none in\n  update [k, a, (r @ ref (option a)), empty] (cmp, x, t, fun (consumes x: a | r @ ref (option a)) : a =\n    r := some (copy x);\n    x\n  );\n  !r\n\nval find_variant [k, a] duplicable a => (\n  cmp: (k, k) -> int,\n  x: k,\n  t: tree k a\n) : option a =\n  let id (x: a) : a = x in\n  find_and_copy (id, cmp, x, t)\n\nval rec mem [k, a] (cmp: (k, k) -> int, x: k, t: tree k a) : bool =\n  match t with\n  | Empty ->\n      False\n  | Node ->\n      let c = cmp (x, t.key) in\n      if c = 0 then\n       True\n      else if c < 0 then\n       mem (cmp, x, t.left)\n      else\n       mem (cmp, x, t.right)\n end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Minimum and maximum elements. *)\n\n(* Because [min_binding] returns a binding but does not remove it from the\n   tree, it is restricted to duplicable keys and values. *)\n\n(* [min_binding] is defined first for non-empty trees, then extended to empty\n   trees. *)\n\nval rec min_binding\n  [k, a] duplicable k => duplicable a =>\n  (t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })\n  : (k, a) =\n  match t.left with\n  | Empty ->\n      t.key, t.value_\n  | Node ->\n      min_binding t.left\n  end\n\nval min_binding\n  [k, a] duplicable k => duplicable a =>\n  (t : tree k a)\n  : option (k, a) =\n  match t with\n  | Empty ->\n      none\n  | Node ->\n      some (min_binding t)\n  end\n\nval rec max_binding\n  [k, a] duplicable k => duplicable a =>\n  (t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })\n  : (k, a) =\n  match t.right with\n  | Empty ->\n      t.key, t.value_\n  | Node ->\n      max_binding t.right\n  end\n\nval max_binding\n  [k, a] duplicable k => duplicable a =>\n  (t : tree k a)\n  : option (k, a) =\n  match t with\n  | Empty ->\n      none\n  | Node ->\n      some (max_binding t)\n  end\n\n(* [extract_min_binding] extracts the node that contains the minimum key.\n   It returns both this node (which can be re-used) and the remaining,\n   re-organized tree. By convention, instead of returning a pair, we\n   return a single node, which contains the minimum key, and whose\n   right child is the remaining tree. *)\n\nval rec extract_min_binding\n  [k, a]\n  (consumes t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })\n  :             Node { left:    Empty; key: k; value_: a; right: tree k a; height: int }\n  =\n  match t.left with\n  | Empty ->\n      (* The desired node is [t], and the sub-tree [t.right] is what remains. *)\n      t\n  | Node ->\n      (* Extract the minimum node out of the left sub-tree. *)\n      let node = extract_min_binding t.left in\n      (* Update in place the left sub-tree. *)\n      t.left <- node.right;\n      (* Perform a rotation at the root if required, and return. *)\n      node.right <- bal t;\n      node\n  end\n\nval rec extract_max_binding\n  [k, a]\n  (consumes t : Node { left: tree k a; key: k; value_: a; right: tree k a; height: int })\n  :             Node { left: tree k a; key: k; value_: a; right:    Empty; height: int }\n  =\n  match t.right with\n  | Empty ->\n      t\n  | Node ->\n      let node = extract_max_binding t.right in\n      t.right <- node.left;\n      node.left <- bal t;\n      node\n  end\n\n(* The private function [add_min_binding] takes a tree node whose only\n   relevant fields are [key] and [value]. The [left] field is supposed\n   to contain [Empty]. The [right] and [height] fields are irrelevant.\n   This node is inserted into the tree [t], where it is expected to\n   become the new minimum node. *)\n\nval rec add_min_binding [k, a]\n  (consumes node: Node { left: Empty; key: k; value_: a; right: unknown; height: unknown },\n   consumes t: tree k a) : tree k a =\n  match t with\n  | Empty ->\n      (* Turn [node] into a singleton tree. *)\n      node.right <- t; (* re-use the memory block at [t], which is [Empty] *)\n      node.height <- 1;\n      node\n  | Node ->\n      t.left <- add_min_binding (node, t.left);\n      bal t\n  end\n\nval rec add_max_binding [k, a]\n  (consumes node: Node { left: unknown; key: k; value_: a; right: Empty; height: unknown },\n   consumes t: tree k a) : tree k a =\n  match t with\n  | Empty ->\n      (* Turn [node] into a singleton tree. *)\n      node.left <- t; (* re-use the memory block at [t], which is [Empty] *)\n      node.height <- 1;\n      node\n  | Node ->\n      t.right <- add_max_binding (node, t.right);\n      bal t\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Removal. *)\n\n(* The private function [merge] combines two trees that have almost equal\n   heights. *)\n\nval merge [k, a] (consumes t1: tree k a, consumes t2: tree k a) : tree k a =\n  match t1, t2 with\n  | Empty, t -> t\n  | t, Empty -> t\n  | Node, Node ->\n      (* Extract the minimum node out of [t2]... *)\n      let root = extract_min_binding t2 in\n      (* And re-use this node to become the new root. *)\n      root.left <- t1;\n      bal root\n  end\n\n(* Compared with OCaml's [remove], our [remove] function combines [find]\n   and [remove]. The binding that was removed is returned via a reference,\n   whereas the new tree is returned as a function result. *)\n\n(* [dst] is an out-parameter, just like in C, except here, we get a type\n   error if we forget to write it! *)\n\n(* TEMPORARY we could avoid writes and calls to [bal] when nothing is\n   removed *)\n\nval rec remove [k, a] (\n  cmp: (k, k) -> int,\n  x: k,\n  consumes t: tree k a,\n  consumes dst: ref unknown\n) : (tree k a | dst @ ref (option (k, a)))\n  =\n  match t with\n  | Empty ->\n      dst := none;\n      t\n  | Node ->\n      let c = cmp (x, t.key) in\n      if c = 0 then begin\n       dst := some (t.key, t.value_);\n       merge (t.left, t.right)\n      end\n      else if c < 0 then begin\n       t.left <- remove (cmp, x, t.left, dst);\n       bal t\n      end\n      else begin\n       t.right <- remove (cmp, x, t.right, dst);\n       bal t\n      end\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iteration. *)\n\n(* Compared with OCaml's [iter], our [iter] function is generalized\n   to allow early termination. The client function, [f], is allowed\n   to return a Boolean flag, which indicates whether iteration should\n   continue. The function [iter] itself returns a Boolean outcome\n   which indicates whether iteration was performed all the way to the\n   end. *)\n\n(* This feature implies that the type of the collection elements cannot\n   be modified. Our version of [fold] (below) makes the converse choices:\n   early termination is not possible, but the type of the elements can be\n   changed from [a1] to [a2]. *)\n\n(* In fact, our [iter] is exactly OCaml's [for_all]. (Except that the\n   evaluation order is not the same; OCaml's [iter] guarantees that\n   the keys are visited in increasing order, where OCaml's [for_all]\n   does not.) Funny -- I never explicitly thought of [for_all] as a\n   version of [iter] that has an early termination feature. *)\n\nval rec iter [k, a, p : perm] (\n  f: (k,    a | p) -> bool,\n  t: tree k a | p)  : bool =\n  match t with\n  | Empty ->\n      True\n  | Node ->\n      iter (f, t.left) && f (t.key, t.value_) && iter (f, t.right)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Map. *)\n\n(* Our [map] is modeled after OCaml's [mapi]. One could in fact offer\n   even more generality by allowing keys to be copied/translated, as\n   long as the key ordering is preserved. *)\n\nval rec map [k, a1, a2, b, p : perm] duplicable k => (\n  f: (k, consumes d: a1 | p) -> (       b | d @        a2),\n  consumes t: tree k a1 | p)  : (tree k b | t @ tree k a2) =\n  match t with\n  | Empty ->\n      Empty\n  | Node ->\n      Node {\n       left = map (f, t.left);\n       key = t.key;\n       value_ = f (t.key, t.value_);\n       right = map (f, t.right);\n       height = t.height\n      }\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Fold. *)\n\n(* The two [fold] functions have the same type, but differ in the order\n   in which the tree is visited. *)\n\nval rec fold_ascending [k, a1, a2, b, p : perm] (\n  f: (k, consumes d:        a1, consumes accu: b | p) -> (b | d @        a2),\n         consumes t: tree k a1, consumes accu: b | p)  : (b | t @ tree k a2) =\n  match t with\n  | Empty ->\n      accu\n  | Node ->\n      let accu = fold_ascending (f, t.left, accu) in\n      let accu = f (t.key, t.value_, accu) in\n      let accu = fold_ascending (f, t.right, accu) in\n      accu\n  end\n\nval rec fold_descending [k, a1, a2, b, p : perm] (\n  f: (k, consumes d:        a1, consumes accu: b | p) -> (b | d @        a2),\n         consumes t: tree k a1, consumes accu: b | p)  : (b | t @ tree k a2) =\n  match t with\n  | Empty ->\n      accu\n  | Node ->\n      let accu = fold_descending (f, t.right, accu) in\n      let accu = f (t.key, t.value_, accu) in\n      let accu = fold_descending (f, t.left, accu) in\n      accu\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* The private function [join] has the same specification as [bal], except\n   the left and right sub-trees may have arbitrary heights. *)\n\nval rec join [k, a] (\n  consumes t: Node { left: tree k a; key: k; value_: a; right: tree k a; height: unknown }\n) : tree k a =\n  let left, right = t.left, t.right in\n  match t.left, t.right with\n  | Empty, _ ->\n      add_min_binding (t, right)\n  | _, Empty ->\n      add_max_binding (t, left)\n  | Node, Node ->\n      if left.height > right.height + 2 then begin\n       (* The left node becomes the root. *)\n       (* The root node becomes the right child. *)\n       t.left <- left.right;\n       left.right <- join t;\n       bal left\n      end\n      else if right.height > left.height + 2 then begin\n       t.right <- right.left;\n       right.left <- join t;\n       bal right\n      end\n      else begin\n       update_height t;\n       t\n      end\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* The private function [concat] concatenates two trees of arbitrary heights.\n   It is identical to [merge], except it calls [join] instead of [bal]. *)\n\nval concat [k, a] (consumes t1: tree k a, consumes t2: tree k a) : tree k a =\n  match t1, t2 with\n  | Empty, t -> t\n  | t, Empty -> t\n  | Node, Node ->\n      let root = extract_min_binding t2 in\n      root.left <- t1;\n      join root\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* The private function [split] splits at a certain key. It returns a tree\n   whose root node may or may not contain a value: note that the field\n   [value] has type [option a] in the result type. This allows us to almost\n   completely avoid memory allocation (and it is a natural thing to do anyway). *)\n\nval rec split [k, a] (cmp: (k, k) -> int, x: k, consumes t: tree k a)\n  : Node { left: tree k a; key: unknown; value_: option a; right: tree k a; height: unknown } =\n  match t with\n  | Empty ->\n      (* Allocate a new node, containing no value_, and whose sub-trees are empty. *)\n      Node { left = Empty; key = (); value_ = none; right = t; height = () }\n  | Node ->\n      let c = cmp (x, t.key) in\n      if c = 0 then begin\n       (* We found the desired key. *)\n       t.value_ <- some t.value_; (* ah ha! look at this, feeble ML programmers *)\n       t\n      end\n      else if c < 0 then begin\n        let root = split (cmp, x, t.left) in\n       t.left <- root.right;\n       root.right <- join t;\n       root\n      end\n      else begin\n        let root = split (cmp, x, t.right) in\n       t.right <- root.left;\n       root.left <- join t;\n       root\n      end\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* The private function [concat_or_join] accepts a tree whose root node may or\n   may not contain a value, and turns it intro a tree, using either [join] or\n   [concat]. Thus, the left and right sub-trees are allowed to have arbitrary\n   heights. *)\n\nval concat_or_join [k, a] (consumes t: Node { left: tree k a; key: k; value_: option a; right: tree k a; height: unknown }) : tree k a =\n  match t.value_ with\n  | Some { contents = d } ->\n      t.value_ <- d;\n      join t\n  | None ->\n      concat (t.left, t.right)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Merging. *)\n\n(* This function has the same specification as its OCaml counterpart. *)\n\nval rec merge [k, a, b, c] (\n  cmp: (k, k) -> int,\n  f: (k, consumes option a, consumes option b) -> option c,\n  consumes s1: tree k a,\n  consumes s2: tree k b\n) : tree k c =\n  match s1, s2 with\n  | Empty, Empty ->\n      s1\n  | _, _ ->\n      if height s1 >= height s2 then\n       match s1 with\n       | Node ->\n           let root2 = split (cmp, s1.key, s2) in\n           root2.left <- merge (cmp, f, s1.left, root2.left);\n           root2.key <- s1.key;\n           root2.value_ <- f (s1.key, some s1.value_, root2.value_);\n           root2.right <- merge (cmp, f, s1.right, root2.right);\n           concat_or_join root2\n        | Empty ->\n           fail (* impossible *)\n        end\n      else\n       match s2 with\n       | Node ->\n           let root1 = split (cmp, s2.key, s1) in\n           root1.left <- merge (cmp, f, root1.left, s2.left);\n           root1.key <- s2.key;\n           root1.value_ <- f (s2.key, root1.value_, some s2.value_);\n           root1.right <- merge (cmp, f, root1.right, s2.right);\n           concat_or_join root1\n        | Empty ->\n           fail (* impossible *)\n        end\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Compared to OCaml's [filter], our [filter] is more general. Instead of\n   returning a Boolean value, the function [p] returns an option. This\n   allows us not only to drop certain entries, but also to modify the\n   existing entries, and possibly to change their type. *)\n\nval rec filter [k, a, b] (\n  p: (k, consumes a) -> option b,\n  consumes t: tree k a\n) : tree k b =\n  match t with\n  | Empty ->\n      t\n  | Node ->\n      t.left <- filter (p, t.left);\n      t.value_ <- p (t.key, t.value_);\n      t.right <- filter (p, t.right);\n      concat_or_join t\n  end\n\n(* The function [partition] is generalized in a similar manner. Instead\n   of returning a Boolean value, it returns a choice. *)\n\nval rec partition [k, a, b, c] (\n  p: (k, consumes a) -> either::either b c,\n  consumes t: tree k a\n) : (tree k b, tree k c) =\n  match t with\n  | Empty ->\n      t, Empty\n  | Node ->\n      let ll, lr = partition (p, t.left) in\n      let rl, rr = partition (p, t.right) in\n      match p (t.key, t.value_) with\n      | either::Left { contents = d } ->\n         t.left <- ll;\n         t.value_ <- d;\n         t.right <- rl;\n         join t, concat (lr, rr)\n      | either::Right { contents = d } ->\n         t.left <- lr;\n         t.value_ <- d;\n         t.right <- rr;\n         concat (ll, rl), join t\n      end\n      (* TEMPORARY why do I get a warning about this merge? isn't the expected type\n        propagated all the way down? *)\n  end\n\n(* -------------------------------------------------------------------------- *)\n\n(* Iterators. *)\n\nopen osf\nopen focused\n\nalias iterator k a (post: perm) =\n  ref (focused (list::list (tree k a)) post)\n\nval new_iterator [k, a] (consumes t: tree k a): iterator k a (t @ tree k a) =\n  newref (\n    list::Cons { head = t; tail = list::Nil },\n    fun () : () = ()\n  )\n\nval rec next [k, a, post: perm]\n  (consumes it: iterator k a post):\n  either::either (focused (k, a, int) (it @ iterator k a post)) (| post) =\n\n  let stack, release = !it in\n\n  (* [stack] is the list::list of sub-trees that remain to be explored. *)\n  (* [release] is the magic wand that abandons the stack and yields\n     the ownership of the entire tree. *)\n\n  match stack with\n  | list::Nil ->\n      (* The stack is empty. We are done. The iterator auto-stops. *)\n      release ();\n      either::right ()\n\n  | list::Cons { head = t; tail = ts } ->\n      (* The stack is non-empty. *)\n      match t with\n      | Empty ->\n          (* The head tree is empty. Pop it off. *)\n          it := (ts, release);\n          (* Persuade the type-checker that [release] takes us from the new stack\n             to the old stack and (hence) to [post]. *)\n          let flex p: perm in\n          pack release @ osf::wand (ts @ list::list (tree k a)) post\n          witness p * stack @ list::Cons { head: Empty; tail = ts };\n          (* Continue. *)\n          next it\n\n      | Node { left; key; value_; right; height } ->\n          (* The head tree has a root node. Split this node and push its\n             sub-trees onto the stack. *)\n          let stack = list::Cons {\n            head = left;\n            tail = list::Cons { head = right; tail = ts }\n          } in\n          it := (stack, release);\n\n          (* Now, we must construct a new magic wand, which packs some of our current\n             permissions, and ensures that once the client gives [key @ k * value @ a]\n             back to us, we can produce [it @ iterator k a post]. *)\n          let flex p: perm in\n          let surrender (|\n            consumes (\n              left @ tree k a *\n              key @ k *\n              value_ @ a *\n              right @ tree k a *\n              t @ Node { left; key; value_; right; height } *\n              ts @ list::list (tree k a) *\n              it @ Ref { contents: (=stack, =release) } *\n              p\n            )\n          ): (| it @ iterator k a post) =\n\n            (* We know that the new [stack] is [left :: right :: ts], because this is\n               a duplicable fact. Similarly, we know that the old [stack] was [t :: ts].\n               Thus, if we own the new [stack] as a list of trees, and if own the node [t]\n               and its element, then we can reconstruct that we own the old [stack] as a\n               list of trees, and from there, apply [release] -- at its previous type --\n               in order to obtain [post]. This justifies the following new view of\n               [release]. *)\n\n            (* The use of [stash/unstash] is a way of helping the type-checker find\n               the appropriate value of the flexible variable [p]. It would be more\n               elegant if we could find a less fragile way of telling the type-checker\n               what we mean by [p]. *)\n\n            (* stash::stash [(ts @ list::list (tree k a))] (); *)\n\n            pack release @ wand (stack @ list::list (tree k a)) post\n            witness\n              key @ k *\n              value_ @ a *\n              t @ Node { left; key; value_; right; height } *\n              p;\n\n            (* stash::unstash(); *)\n\n            (* This assertion is superfluous. It says that, once the client surrenders\n               [key @ k * value @ a], we again have a well-formed new [stack] and that\n               [release] allows us to abandon this stack and obtain [post]. *)\n            assert\n              stack @ list::list (tree k a) *\n              release @ wand (stack @ list::list (tree k a)) post;\n            ()\n          in\n\n          (* This assertion is superfluous. *)\n          assert surrender @ wand (key @ k * value_ @ a) (it @ iterator k a post);\n\n          either::left ((key, value_, height), surrender)\n     end\n  end\n\nval stop [k, a, post: perm]\n  (consumes it: iterator k a post):\n  (| post) =\n  let _, release = !it in\n  release()\n\nval new_generic_iterator [k, a] (consumes t: tree k a):\n  iterator::iterator (k, a, int) (t @ tree k a)\n  =\n  let alias post: perm = t @ tree k a in\n  let alias a' = (k, a, int) in\n\n  iterator::wrap [a', (iterator k a post), post]\n    (new_iterator t, next [k, a, post], stop [k, a, post])\n\n(* -------------------------------------------------------------------------- *)\n\n(* We use an iterator to implement the comparison of two trees. *)\n\nval compare [k, a] (\n  cmpk: (k, k) -> int,\n  cmpa: (a, a) -> int,\n  m1: tree k a,\n  m2: tree k a\n) : int =\n\n  let i1 = new_generic_iterator m1\n  and i2 = new_generic_iterator m2 in\n\n  let cmp ((k1: k, x1: a, h1: int), (k2: k, x2: a, h2: int)): int =\n    let c = cmpk (k1, k2) in\n    if c <> 0 then c else cmpa (x1, x2)\n  in\n\n  iterator::compare (cmp, i1, i2)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Conversion of a tree to a list. *)\n\nval bindings [k, a] duplicable k => duplicable a => (t: tree k a) : list::list (k, a) =\n  let f (x: k, v: a, accu: list::list (k, a)) : list::list (k, a) =\n    list::cons ((x, v), accu)\n  in\n  fold_descending (f, t, list::nil)\n\n(* -------------------------------------------------------------------------- *)\n(* -------------------------------------------------------------------------- *)\n\n(* We now wrap the type [tree] in another type, [treeMap], which the client\n   will work with. There are two reasons for doing so. One is that this allows\n   some functions, such as [add], to return unit instead of returning a new\n   data structure. The other is that this allows us to store the comparison\n   function. *)\n\ndata mutable treeMap k (c : value) a =\n  TreeMap { tree: tree k a; cmp: =c | c @ (k, k) -> int }\n\nval cardinal [k, c : value, a] (m: treeMap k c a) : int =\n  cardinal m.tree\n\n(* -------------------------------------------------------------------------- *)\n\n(* Creating an empty map requires supplying a comparison function [cmp],\n   which is stored within the new data structure. *)\n\nval create [k, a] (cmp: (k, k) -> int) : treeMap k cmp a =\n  TreeMap { tree = create(); cmp }\n\nval singleton [k, a] (cmp: (k, k) -> int, consumes x: k, consumes d: a): treeMap k cmp a =\n  TreeMap { tree = singleton (x, d); cmp }\n\nval is_empty [k, c: value, a] (m : treeMap k c a) : bool =\n  is_empty m.tree\n\nval add [k, c: value, a] (\n  consumes x: k,\n  consumes d: a,\n  m: treeMap k c a\n) : () =\n  m.tree <- add (m.cmp, x, d, m.tree)\n\nval find [k, c: value, a] duplicable a => (\n  x: k,\n  m: treeMap k c a\n) : option a =\n  find (m.cmp, x, m.tree)\n\nval update [k, c: value, a, preserved : perm, consumed : perm] (\n  x: k,\n  m: treeMap k c a,\n  f: (consumes a | preserved * consumes consumed) -> a\n| preserved * consumes consumed\n) : () =\n  update [k, a, preserved, consumed] (m.cmp, x, m.tree, f)\n\nval mem [k, c: value, a] (x: k, m: treeMap k c a) : bool =\n  mem (m.cmp, x, m.tree)\n\nval min_binding [k, c: value, a] duplicable k => duplicable a => (m : treeMap k c a) : option (k, a) =\n  min_binding m.tree\n\nval max_binding [k, c: value, a] duplicable k => duplicable a => (m : treeMap k c a) : option (k, a) =\n  max_binding m.tree\n\nval extract_min_binding [k, c: value, a] (m: treeMap k c a) : option (k, a) =\n  match m.tree with\n  | Empty ->\n      none\n  | Node ->\n      let node = extract_min_binding m.tree in\n      m.tree <- node.right;\n      some (node.key, node.value_)\n  end\n\nval extract_max_binding [k, c: value, a] (m: treeMap k c a) : option (k, a) =\n  match m.tree with\n  | Empty ->\n      none\n  | Node ->\n      let node = extract_max_binding m.tree in\n      m.tree <- node.left;\n      some (node.key, node.value_)\n  end\n\nval remove [k, c: value, a] (x: k, m: treeMap k c a) : option (k, a) =\n  let dst = newref () in\n  m.tree <- remove (m.cmp, x, m.tree, dst);\n  !dst\n\nval iter [k, c: value, a, p : perm] (\n  m: treeMap k c a,\n  f: (k, a | p) -> bool\n  | p\n) : bool =\n  iter (f, m.tree)\n\nval for_all =\n  iter\n\n(* [exists] could be implemented directly, but an implementation in\n   values of [for_all] is preferred, as a test of the type-checker. *)\n\nval exists [k, c: value, a, p : perm] (\n  m: treeMap k c a,\n  f: (k, a | p) -> bool\n | p\n) : bool =\n  not (for_all (m, fun (key: k, value_: a | p) : bool =\n    not (f (key, value_))\n  ))\n\nval map [k, c: value, a1, a2, b, p : perm] duplicable k => (\n  consumes m: treeMap k c a1,\n  f: (k, consumes d: a1 | p) -> (b | d @ a2)\n  | p\n) : (treeMap k c b | m @ treeMap k c a2) =\n  TreeMap { tree = map (f, m.tree); cmp = m.cmp }\n\n(* [copy] could be defined directly, but is here defined as a special case of [map]. *)\n\nval copy [k, c: value, a, b] duplicable k => (m: treeMap k c a, f: a -> b) : treeMap k c b =\n  map (m, fun (x: k, d: a) : b = f d)\n\nval fold_ascending [k, c: value, a1, a2, b, p : perm] (\n  consumes m: treeMap k c a1,\n  consumes accu: b,\n  f: (k, consumes d: a1, consumes accu: b | p) -> (b | d @ a2)\n  | p\n) : (b | m @ treeMap k c a2) =\n  fold_ascending (f, m.tree, accu)\n\nval fold_descending [k, c: value, a1, a2, b, p : perm] (\n  consumes m: treeMap k c a1,\n  consumes accu: b,\n  f: (k, consumes d: a1, consumes accu: b | p) -> (b | d @ a2)\n  | p\n) : (b | m @ treeMap k c a2) =\n  fold_descending (f, m.tree, accu)\n\nval fold =\n  fold_ascending\n\nval merge [k, cmp: value, a, b, c] (\n  consumes m1: treeMap k cmp a,\n  consumes m2: treeMap k cmp b,\n  f: (k, consumes option a, consumes option b) -> option c\n) : treeMap k cmp c =\n  m1.tree <- merge (m1.cmp, f, m1.tree, m2.tree);\n  m1\n\nval split [k, c: value, a] (\n  x: k,\n  consumes m: treeMap k c a\n) : (treeMap k c a, option a, treeMap k c a) =\n  let root = split (m.cmp, x, m.tree) in\n  m.tree <- root.left;\n  m, root.value_, TreeMap { tree = root.right; cmp = m.cmp }\n\nval filter [k, c: value, a, b] (\n  consumes m: treeMap k c a,\n  p: (k, consumes a) -> option b\n) : treeMap k c b =\n  m.tree <- filter (p, m.tree);\n  m\n\nval partition [k, cmp: value, a, b, c] (\n  consumes m: treeMap k cmp a,\n  p: (k, consumes a) -> either::either b c\n) : (treeMap k cmp b, treeMap k cmp c) =\n  let left, right = partition (p, m.tree) in\n  m.tree <- left;\n  m, TreeMap { tree = right; cmp = m.cmp }\n\n(* We might wish to make [compare] a unary function\n   of [cmp] to a binary function of [(m1, m2)]. *)\n\nval compare [k, c: value, a] (\n  cmp: (a, a) -> int,\n  m1: treeMap k c a,\n  m2: treeMap k c a\n) : int =\n  compare (m1.cmp, cmp, m1.tree, m2.tree)\n\nval equal [k, c: value, a] (\n  cmp: (a, a) -> int,\n  m1: treeMap k c a,\n  m2: treeMap k c a\n) : bool =\n  compare (cmp, m1, m2) = 0\n\nval bindings [k, c: value, a] duplicable k => duplicable a => (\n  m: treeMap k c a\n) : list::list (k, a) =\n  bindings m.tree\n\n(* TEMPORARY compare .mzi file with map.mli *)\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo mutableTreeMap.mz\"\nEnd:\n*)\n");q("/stdlib/mutableTreeMap.mzi","(* -------------------------------------------------------------------------- *)\n\n(* [treeMap k c a] is an abstract type for association maps with keys of type\n   [k] and values of type [a]. Entries are internally ordered using the key\n   ordering [cmp]. *)\n\nabstract treeMap k (cmp: value) +a\n\n(* [treeMap k c a] is an exclusive type. That is, a map has a unique owner. *)\n\nfact exclusive (treeMap k cmp a)\n\n(* -------------------------------------------------------------------------- *)\n\n(* Operations on maps. *)\n\nval create : [k, a] (cmp: (k, k) -> int) -> treeMap k cmp a\n\nval singleton : [k, a] (cmp: (k, k) -> int, consumes k, consumes a) -> treeMap k cmp a\n\nval cardinal : [k, cmp: value, a] treeMap k cmp a -> int\n\nval is_empty : [k, cmp: value, a] treeMap k cmp a -> bool\n\nval add : [k, cmp: value, a] (consumes k, consumes a, treeMap k cmp a) -> ()\n\nval find : [k, cmp: value, a] duplicable a => (k, treeMap k cmp a) -> option a\n\nval update : [k, c: value, a, preserved : perm, consumed : perm] (\n  x: k,\n  m: treeMap k c a,\n  f: (consumes a | preserved * consumes consumed) -> a\n| preserved * consumes consumed\n) -> ()\n\nval mem : [k, cmp: value, a] (k, treeMap k cmp a) -> bool\n\nval min_binding : [k, cmp: value, a] duplicable k => duplicable a => treeMap k cmp a -> option (k, a)\nval max_binding : [k, cmp: value, a] duplicable k => duplicable a => treeMap k cmp a -> option (k, a)\n\nval extract_min_binding : [k, cmp: value, a] treeMap k cmp a -> option (k, a)\nval extract_max_binding : [k, cmp: value, a] treeMap k cmp a -> option (k, a)\n\nval remove : [k, cmp: value, a] (k, treeMap k cmp a) -> option (k, a)\n\nval iter : [k, c: value, a, p : perm] (\n  m: treeMap k c a,\n  f: (k, a | p) -> bool\n  | p\n) -> bool\n\nval for_all :\n  =iter\n\n(* TEMPORARY add sugar for this declaration? *)\n\nval exists : [k, c: value, a, p : perm] (\n  m: treeMap k c a,\n  f: (k, a | p) -> bool\n  | p\n) -> bool\n\nval map: [k, c: value, a1, a2, b, p : perm] duplicable k => (\n  consumes m: treeMap k c a1,\n  f: (k, consumes d: a1 | p) -> (b | d @ a2)\n  | p\n) -> (treeMap k c b | m @ treeMap k c a2)\n\nval copy: [k, c: value, a, b] duplicable k => (m: treeMap k c a, f: a -> b) -> treeMap k c b\n\nval fold_ascending : [k, c: value, a1, a2, b, p : perm] (\n  consumes m: treeMap k c a1,\n  consumes accu: b,\n  f: (k, consumes d: a1, consumes accu: b | p) -> (b | d @ a2)\n  | p\n) -> (b | m @ treeMap k c a2)\n\nval fold_descending : [k, c: value, a1, a2, b, p : perm] (\n  consumes m: treeMap k c a1,\n  consumes accu: b,\n  f: (k, consumes d: a1, consumes accu: b | p) -> (b | d @ a2)\n  | p\n) -> (b | m @ treeMap k c a2)\n\nval fold :\n  =fold_ascending\n\nval merge : [k, cmp: value, a, b, c] (\n  consumes treeMap k cmp a,\n  consumes treeMap k cmp b,\n  f: (k, consumes option a, consumes option b) -> option c\n) -> treeMap k cmp c\n\nval split : [k, cmp: value, a] (\n  k,\n  consumes treeMap k cmp a\n) -> (treeMap k cmp a, option a, treeMap k cmp a)\n\nval filter : [k, cmp: value, a, b] (\n  consumes treeMap k cmp a,\n  p: (k, consumes a) -> option b\n) -> treeMap k cmp b\n\nval partition : [k, cmp: value, a, b, c] (\n  consumes treeMap k cmp a,\n  p: (k, consumes a) -> either::either b c\n) -> (treeMap k cmp b, treeMap k cmp c)\n\nval compare : [k, cmp: value, a] (\n  (a, a) -> int,\n  treeMap k cmp a,\n  treeMap k cmp a\n) -> int\n\nval equal : [k, cmp: value, a] (\n  (a, a) -> int,\n  treeMap k cmp a,\n  treeMap k cmp a\n) -> bool\n\nval bindings : [k, c: value, a] duplicable k => duplicable a => (\n  m: treeMap k c a\n) -> list::list (k, a)\n");q("/stdlib/name.mz",'(* Name generators. *)\n\nval new_generator [a] () : a -> int =\n\n  (* The internal state of the generator is an integer counter, which\n     is used to allocate fresh IDs. *)\n  let c = newref 0 in\n\n  (* The function [fresh] ignores its argument and returns a new ID. *)\n  let fresh (_: a | c @ ref int) : int =\n    postincr c\n  in\n\n  (* We hide its internal state. *)\n  hide::hide fresh\n\n(* Clerks. *)\n\nval new_clerk [a] duplicable a => (\n  hash: a -> int,\n  eq: (a, a) -> bool\n) : a -> int =\n\n  (* Memoizing a generator yields a clerk. *)\n  memoize::memoize (hash, eq, new_generator ())\n\n(*\nLocal Variables:\ncompile-command: "../mezzo name.mz"\nEnd:\n*)\n');q("/stdlib/name.mzi",'(* A name generator is a function of type [a -> int]. Whenever it is invoked,\n   this function returns a fresh name (represented by a nonnegative\n   integer). This function ignores its argument. *)\n\n(* [new_generator()] produces a new name generator. *)\n\nval new_generator: [a] () -> a -> int\n\n(* A clerk is a function of type [a -> int]. When it is passed an argument\n   [x], it returns either the name already assigned to [x], if it has been\n   applied to [x] already, or a fresh name, if it has not been applied to [x]\n   already. *)\n\n(* [new_clerk()] produces a new clerk. *)\n\nval new_clerk:\n  [a] duplicable a => (\n    hash: a -> int,\n    eq: (a, a) -> bool\n  ) -> a -> int\n\n(*\nLocal Variables:\ncompile-command: "../mezzo name.mz"\nEnd:\n*)\n');q("/stdlib/osf.mz",'(* A one-shot function is a function that can be invoked at most once. *)\n\n(* A one-shot function is encoded as a regular function [f] that consumes\n   an abstract affine permission [p], together with one copy of [p]. The\n   variable [p] is existentially quantified. Because [p] is abstract, it\n   is considered affine (i.e., not duplicable). Hence, the type of one-shot\n   functions is also affine. *)\n\n(* One might wish to make this an abstract type. However, one would then\n   need to publish many more operations, including [apply], and including\n   many subsumption rules, such as the frame rule. *)\n\nalias osf a b = {p: perm} (((consumes (a | p)) -> b) | p)\n\n(* An ordinary function can be turned into a one-shot function, if it\n   needs [p] and [p] happens to be available. [make] appears to return\n   a new value, whereas [bless] makes it clear that the one-shot\n   function is the same value as the underlying ordinary function. *)\n\n(* [bless] is more precise, but has the potential drawback that, after\n   a call to [bless f], the function [f] has two distinct types. *)\n\nval make [a, b, p: perm] (f: (consumes (a | p)) -> b | consumes p) : osf a b =\n  f\n\nval bless [a, b, p: perm] (f: (consumes (a | p)) -> b | consumes p) : (| f @ osf a b) =\n  ()\n\n(* Applying a one-shot function consumes it. *)\n\n(* This function is not exported, because ordinary function application\n   just works. *)\n\nval apply [a, b] (consumes f: osf a b, consumes x: a): b =\n  f x\n\n(* Composition of one-shot functions is ordinary function composition. *)\n\nval compose [a, b, c] (consumes f: osf a b, consumes g: osf b c) : osf a c =\n  fun (consumes x: a | consumes (f @ osf a b * g @ osf b c)) : c =\n    g (f x)\n\n(* A type of one-shot choice between two functions. *) (* TEMPORARY export *)\n\nalias osc a1 b1 a2 b2 =\n  { p : perm } (\n    (a1 | consumes p) -> b1,\n    (a2 | consumes p) -> b2\n  | p\n  )\n\n\n(* A one-shot function that deals only with permissions. It is strictly less\n   general than [osf], but useful to lighten the types when it can be used.\n\n   It also fits the notion of "magic wand" in separation logic: [p -* q] means\n   the same in separation logic that [wand p q] in Mezzo.\n*)\nalias wand (pre: perm) (post: perm) =\n  {ammo: perm} (\n    (| consumes (pre * ammo)) -> (| post)\n  | ammo)\n\n(*\nLocal Variables:\ncompile-command: "../mezzo osf.mz"\nEnd:\n*)\n');q("/stdlib/osf.mzi",'(* A one-shot function is a function that can be invoked at most once. *)\n\nalias osf a b = {p: perm} (((consumes (a|p)) -> b) | p)\n\n(* An ordinary function can be turned into a one-shot function, if it\n   needs [p] and [p] happens to be available. [make] appears to return\n   a new value, whereas [bless] makes it clear that the one-shot\n   function is the same value as the underlying ordinary function. *)\n\nval make: [a, b, p: perm] (\n  f: (consumes (a | p)) -> b\n| consumes p\n) -> osf a b\n\nval bless: [a, b, p: perm] (\n  f: (consumes (a | p)) -> b\n| consumes p\n) -> (| f @ osf a b)\n\n(* One-shot functions can be composed. *)\n\nval compose: [a, b, c] (consumes osf a b, consumes osf b c) -> osf a c\n\n\n(* A one-shot function that deals only with permissions. It is strictly less\n   general than [osf], but useful to lighten the types when it can be used.\n\n   It also fits the notion of "magic wand" in separation logic: [p -* q] means\n   the same in separation logic that [wand p q] in Mezzo.\n*)\nalias wand (pre: perm) (post: perm) =\n  {ammo: perm} (\n    (| consumes (pre * ammo)) -> (| post)\n  | ammo)\n');q("/stdlib/partition.mz","(* An item contains a pointer to its block, plus further (client) information. *)\n\n(* By convention, the [block] field points to the item itself when the item is\n   detached (i.e., not part of a block). We could also use an option (that\n   would be safer, but more expensive) or define two distinct tags for items\n   (also safer, but less convenient). *)\n\n(* An item serves as an extension of the [cell] ... TEMPORARY *)\n\ndata mutable item a =\n  Item {\n    block: dynamic (* self or block *);\n    payload: a\n  }\n\nalias cell a = doublylinked::point (item a)\n\ndata mutable block a =\n  | Block { cardinal: int; cell: option (cell a) }\n\ndata mutable region a =\n  Region { cells: doublylinked::region (item a) }\n  adopts block a\n\nval new_region [a] () : region a =\n  Region { cells = doublylinked::new() }\n\nval new_block [a] (r: region a) : dynamic (* block *) =\n  let b = Block { cardinal = 0; cell = None } in\n  give b to r;\n  b\n\nval new_item [a] (r: region a, consumes x: a) : cell a =\n  let i = Item { block = (); payload = x } in\n  i.block <- i;\n  doublylinked::create (r.cells, i)\n\nval attach [a] (r: region a, b: dynamic (* block *), c: cell a) : () =\n  (* Update the cell [c], which is now a member of [b]. *)\n  doublylinked::consult [item a] (r.cells, c, fun (i : item a) : () =\n    (* WISH I don't understand why this type application is required *)\n    (* Check that this item was detached. *)\n    if (i.block != i) then\n      fail;\n    i.block <- b\n  );\n  (* Update the block. *)\n  taking b from r begin\n    b.cardinal <- b.cardinal + 1;\n    match b.cell with\n    | None ->\n        b.cell <- some c\n       (* The cell [c] was isolated, and there is no pre-existing cycle.\n          No insertion is required. *)\n    | Some ->\n        (* Insert the cell [c] into the cycle of the elements of [b]. *)\n        doublylinked::meld [item a] (r.cells, c, b.cell.contents)\n          (* WISH I don't understand why this type application is required *)\n    end\n  end\n\nval detach [a] (r: region a, c: cell a) : () =\n  (* Update the cell [c], which is no longer a member of [b]. *)\n  let b : dynamic =\n    doublylinked::consult [a = item a] (r.cells, c, fun (i : item a) : dynamic =\n      if (i.block == i) then\n       fail;\n      let b = i.block in\n      i.block <- i;\n      b\n    )\n  in\n  (* Update the block. *)\n  taking b from r begin\n    b.cardinal <- b.cardinal - 1;\n    if b.cardinal = 0 then\n      b.cell <- none\n    else if b.cell == c then\n      (* If the representative element of [b] is [c], find another. *)\n      b.cell <- some (doublylinked::next [item a] (r.cells, c));\n    (* Take the cell [c] out of the cycle of the elements of [b]. *)\n    doublylinked::isolate [item a] (r.cells, c)\n  end\n\nval move [a] (r: region a, b: dynamic (* block *), c: cell a) : () =\n  detach (r, c);\n  attach (r, b, c)\n\nval block [a] (r: region a, c: cell a) : dynamic (* block *) =\n  doublylinked::consult [item a] (r.cells, c, fun (i : item a) : dynamic =\n    if (i.block == i) then\n      fail;\n    i.block\n  )\n\nval cardinal [a] (r: region a, b: dynamic (* block *)) : int =\n  taking b from r begin b.cardinal end\n\nval choose [a] (r: region a, b: dynamic (* block *)) : option (cell a) =\n  taking b from r begin b.cell end\n\n(* TEMPORARY add iteration functions, etc. *)\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo partition.mz\"\nEnd:\n*)\n");q("/stdlib/persistentarray.mz","(* Persistent arrays in the style of Filli\xc3\xa2tre. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A persistent array is duplicable, but has mutable internal state.\n   Furthermore, this state is shared: whenever a new version of the\n   array is created, the new version shares much of its state with\n   the previous version. Thus, internally, there exist a region of\n   points, which together form the representation of several persistent\n   arrays. *)\n\ndata parray a =\n  PArray {\n    (* The region which this persistent array is part of. *)\n    region: wref::wref (region a);\n    (* The point in the region which represents this persistent array. *)\n    point: dynamic (* point a, owned by region *)\n  }\n\n(* A region serves as an adopter for a set of points. *)\n\nand mutable region a =\n  Region adopts point a\n\n(* A point is either flat -- a primitive array -- or a pair of a pointer to\n   another point (in the same region) and an undo instruction. We use three\n   fields in either case, so as to allow tag updates in either direction. *)\n\nand mutable point a =\n| PFlat { contents: marray a; unused1: (); unused2: () }\n| PUndo { previous: dynamic; offset: int; element:  a }\n\n(* One shortcoming of this encoding of persistent arrays is that we are\n   not able to prove that [parray a] is covariant with respect to [a]. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Creation of a new persistent array. *)\n\nval create [a] duplicable a => (n: int, x: a) : parray a =\n  let t = array::create (n, x) in\n  let p = PFlat { contents = t; unused1 = (); unused2 = () } in\n  let r : region a = Region in\n  give p to r;\n  PArray { region = wref::new r; point = p }\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Bringing a point to a flat form. This is where the trickery lies. *)\n\n(* TEMPORARY the call from [revert_link] to [revert] is not a tail call:\n   we effectively use the stack to reverse the list. In principle, we\n   should be able to work in constant space. I guess we would need to\n   use a ref cell to hold the head of the reversed list. Do this after\n   we have set up a test suite for this module. *)\n\n(* [revert (r, p)] requires a region [r] and a point [p], which is a member of\n   [r]. It takes [p] away from [r] and returns the underlying array in a state\n   that corresponds to [p]. The point [p] itself is left in a temporary state\n   where its tag is [PUndo] and its fields are uninitialized. *)\n\n(* This convention about the final state of [p] is adopted so as to avoid\n   excessive writing. If the convention was that [p] should be left in a\n   [PFlat] state, with correctly initialized fields, then every point along\n   the chain would be overwritten twice: once from [PUndo] to [PFlat], and\n   once from [PFlat] to [PUndo] in the other direction. We save a factor of\n   two (rough estimate!) in memory traffic. *)\n\nval rec revert [a] duplicable a =>\n  (r: region a, p: dynamic)\n: (marray a | p @ PUndo { previous: unknown; offset: unknown; element: unknown })\n=\n  (* Take [p] out of the region [r]. *)\n  take p from r;\n  match p with\n  | PFlat ->\n      (* This is the end of the line. Steal the underlying array,\n        and change the tag of [p] to [PUndo]. *)\n      let t = p.contents in\n      tag of p <- PUndo;\n      t\n  | PUndo ->\n      (* Continue below. *)\n      revert_link (r, p)\n  end\n\n(* The auxiliary function [revert_link (r, p)] performs the same task\n   as [revert (r, p)], but assumes that [p] has already been taken\n   away from [r] and is a valid [PUndo] point. We isolate this function\n   so as to avoid code duplication: it has two call sites. *)\n\nand revert_link [a] duplicable a =>\n  (r: region a, consumes p: PUndo { previous: dynamic; offset: int; element: a })\n: (marray a | p @ PUndo { previous: unknown; offset: unknown; element: unknown })\n=\n  let previous = p.previous in\n  (* Make a recursive call on [previous]. Because the [previous]\n     pointers cannot form a cycle, there is no need to give [p]\n     back to the region before making this recursive call. *)\n  let t = revert (r, previous) in\n  (* Read the field [p.offset] now, after the recursive call, because\n     if we read it as part of the pattern matching construct above,\n     then the compiler might not be smart enough to figure out that\n     the read can be delayed. Same concern about [p.element]. *)\n  let i = p.offset in\n  (* Update the representation of [previous] so that it becomes\n     a valid point again. Its tag remains [PUndo], but its\n     [previous] field now points in the other direction. *)\n  previous.previous <- p;\n  previous.offset <- i;\n  previous.element <- array::get (t, i);\n  (* We are now done with [previous]. *)\n  give previous to r;\n  (* Update the underlying array. *)\n  array::set (t, i, p.element);\n  (* The point [p] is now in the desired state: its tag is [PUndo]\n     and its fields contain bogus values. *)\n  t\n\n(* This non-recursive wrapper function also requires a region [r] and\n   a point [p]. It also takes [p] away from [r]. It returns the point\n   [p] in a valid [PFlat] state. *)\n\n(* By convention, the value [t] returned by [reroot] is [p.contents].\n   This is not essential, but is convenient, and allows us to write\n   a cool return type that involves explicit sharing. *)\n\nval reroot [a] duplicable a => (r: region a, p: dynamic)\n  : (t: marray a | p @ PFlat { contents = t; unused1: (); unused2: () })\n=\n\n  take p from r;\n  match p with\n  | PFlat ->\n      (* If [p] is already flat, there is nothing to do. *)\n      p.contents\n  | PUndo ->\n      let t = revert_link (r, p) in\n      (* [p] is now in an uninitialized state. Re-initialize it. *)\n      tag of p <- PFlat;\n      p.contents <- t;\n      p.unused1 <- ();\n      p.unused2 <- ();\n      t\n  end\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Temporary access to the underlying array. *)\n\n(* TEMPORARY [borrow] is dangerous, because [f] is given read/write\n   access to the underlying array, which it must promise not to modify.\n   Thus, we do not publish it. If we had a [const] modifier, we would\n   be able to publish it. *)\n\nval borrow [a, b, p : perm] duplicable a => (\n  pa: parray a, \n  f: (marray a | consumes p) -> b\n| consumes p\n) : b =\n  (* Acquire the lock, so as to get access to the region [r]. *)\n  wref::borrow (pa.region, fun (r : region a | consumes p) : b =\n    (* Re-root the persistent array at [p]. *)\n    let p = pa.point in\n    let t = reroot (r, p) in\n    (* [p] is now flat. Pass the underlying array to [f]. *)\n    let result = f t in\n    (* Give [p] back to [r]. *)\n    give p to r;\n    (* Done. *)\n    result\n  )\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Read access. *)\n\nval get [a] duplicable a => (pa: parray a, i: int) : a =\n  borrow (pa, fun (t: marray a) : a =\n    array::get (t, i)\n  )\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Write access. *)\n\n(* [set] cannot be defined in terms of [borrow], because it needs access not\n   only to the underlying array [t], but also to the point [p]. We could\n   define a slightly more general version of [borrow] that provides us with\n   [t] and [p]. We will see. *)\n\nval set [a] duplicable a => (pa: parray a, i: int, v: a) : parray a =\n  (* Acquire the lock, so as to get access to the region [r]. *)\n  wref::borrow (pa.region, fun (r : region a) : parray a =\n    (* Re-root the persistent array at [p]. *)\n    let p = pa.point in\n    let t = reroot (r, p) in\n    (* [p] is now flat. Access the underlying array [t], and update [p]. *)\n    tag of p <- PUndo;\n    p.offset <- i;\n    p.element <- array::get (t, i);\n    (* Update the underlying array. *)\n    array::set (t, i, v);\n    (* Create a new point [q]. *)\n    let q = PFlat { contents = t; unused1 = (); unused2 = () } in\n    give q to r;\n    (* Finish updating [p], and give it back. *)\n    p.previous <- q;\n    give p to r;\n    (* Wrap the resulting point as a new persistent array. *)\n    PArray { region = pa.region; point = q }\n  )\n\n(* This organization might seem somewhat inefficient, because a persistent\n   array involves both a lock (which is implicit in the weak reference) and\n   an adopter (the region, which is protected by the lock). Hence, there are\n   two barriers at runtime: we must first acquire the lock, then take the\n   desired points from the region. That said, we acquire the lock just once,\n   and then can take as many points as we like, while paying just one dynamic\n   check per point. One might wonder whether we could work with just one lock\n   and no region at all. Each point would contain a pointer to a lock, so\n   whenever we wish to follow a link from a point to another point, we would\n   check at runtime that the lock associated with the new point is the lock\n   that we already hold, and deduce that we can safely access this point.\n   This variant might be correct, but it is unclear at present how it would\n   be type-checked. The use of adoption and abandon may seem costly, but it\n   also serves to protect us from ``taking'' a single point twice. It is\n   unclear how a purely lock-based idiom would achieve this: when we reach\n   a new point, we have no way of testing whether we have already claimed\n   the ownership of this point. Anyway, this deserves further research! *)\n\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo persistentarray.mz\"\nEnd:\n*)\n");q("/stdlib/persistentarray.mzi","(* Persistent arrays. *)\n\n(* A persistent array presents itself as an immutable (hence, duplicable)\n   array of duplicable elements. It can be read and updated; an update\n   produces a new persistent array without altering the original one. *)\n\n(* The implementation is based on a single mutable array, difference lists,\n   and a single lock, but these details do not appear in the interface. *)\n\nabstract parray a\nfact duplicable (parray a)\n\n(* Creation. *)\n\nval create: [a] duplicable a => (int, a) -> parray a\n\n(* Reading. *)\n\nval get: [a] duplicable a => (parray a, int) -> a\n\n(* Writing. *)\n\nval set: [a] duplicable a => (parray a, int, a) -> parray a\n\n");q("/stdlib/pool.mzi",yc);q("/stdlib/protected.mz","open lock\n\n(* An abbreviation for a pair of an object [x] of a priori unknown type\n   and a lock [l] that protects the permission [x @ a]. *)\n\nalias protected a =\n  (x: unknown, lock (x @ a))\n\n(* Construction. *)\n\nval create [a] (consumes x: a) : protected a =\n  let l : lock (x @ a) = new() in\n  x, l\n\n(* A higher-order function that uses an object of type [protected a]. The\n   client function [f] obtains access to [x @ a], and must preserve it. *)\n\nval access [a, b, pre: perm] (\n  p: protected a,\n  f: (a | consumes pre) -> b\n| consumes pre\n) : b =\n  let x, l = p in\n  acquire l;\n  let y = f x in\n  release l;\n  y\n\n");q("/stdlib/protected.mzi","(* The type [protected a] represents an object of type [a] that is\n   protected by a lock, so that it can be freely shared. *)\n\nabstract protected a\nfact duplicable (protected a)\n\n(* Construction. *)\n\nval create: [a] (consumes a) -> protected a\n\n(* A higher-order function that uses an object of type [protected a]. The\n   client function [f] obtains access to [x @ a], and must preserve it. *)\n\nval access: [a, b, pre: perm] (\n  p: protected a,\n  f: (a | consumes pre) -> b\n| consumes pre\n) -> b\n\n");q("/stdlib/queue.mz","(* A FIFO queue implementation, adapted from OCaml's queue.ml. *)\n\ndata mutable cell a =\n  Cell { value_: a; next: dynamic }\n\n(* The FIFO structure is implemented as a cyclic list. The\n   [fifo] object contains a pointer to the last element of\n   the queue, as well as the length of the queue. The length\n   information is used in the OCaml version to test whether\n   the queue is empty. Here, the tag, [Empty] or [NonEmpty],\n   provides this information. The [tail] pointer is present\n   only when the queue is nonempty. *)\n\ndata mutable fifo a =\n  Empty    { length: int; tail: ()      }\n| NonEmpty { length: int; tail: dynamic }\nadopts cell a\n\nval create [a] () : fifo a =\n  Empty { length = 0; tail = () }\n\nval internal_insert [a] (consumes x: a, q: fifo a, insertAtEnd: bool): () =\n  let c = Cell {\n    value_ = x; next = ()\n  } in\n  match q with\n  | Empty ->\n      c.next <- c;\n      give c to q;\n      tag of q <- NonEmpty;\n      q.length <- 1;\n      q.tail <- c\n  | NonEmpty { tail } ->\n      taking tail from q begin\n        c.next <- tail.next;\n        tail.next <- c;\n      end;\n      give c to q;\n      q.length <- q.length + 1;\n      (* We have just inserted the cell [c] at the beginning of the\n        queue. If the caller would like [c] to be inserted at the\n        end of the queue, advance the [tail] pointer. *)\n      if insertAtEnd then\n       q.tail <- c\n  end\n\nval insert [a] (consumes x: a, q: fifo a) : () =\n  internal_insert (x, q, true)\n  \nval insert_at_head [a] (consumes x: a, q: fifo a) : () =\n  internal_insert (x, q, false)\n\nval retrieve [a] (q: fifo a) : option a =\n  match q with\n  | Empty ->\n      None\n  | NonEmpty { tail } ->\n      take tail from q;\n      let head = tail.next in\n      if head == tail then begin\n       tag of q <- Empty;\n       q.length <- 0;\n       q.tail <- ()\n      end\n      else begin\n       q.length <- q.length - 1;\n       take head from q;\n       tail.next <- head.next;\n       give tail to q\n      end;\n      (* At this point, we own the [head] cell. Note that this annotation\n        is not required. *)\n      assert head @ cell a;\n      (* The head cell must not be given back to the queue. We need to assert\n        the ownership of [head.value], whose type is not duplicable. *)\n      some head.value_\n end\n\nval peek [a] duplicable a => (q: fifo a) : option a =\n  match q with\n  | Empty -> \n      none\n  | NonEmpty { tail } ->\n      let head =\n       taking tail from q begin\n         tail.next\n       end\n      in\n      taking head from q begin\n       some head.value_\n      end\n  end\n\nval length [a] (q: fifo a) : int =\n  match q with\n  | Empty -> 0\n  | NonEmpty -> q.length\n  end\n\n(* The function [clear] doesn't type-check without the [match]\n   construct. Mezzo does not allow setting an object's tag\n   unless its current tag is known. *)\n\nval clear [a] (q: fifo a) : () =\n  match q with\n  | Empty -> ()\n  | NonEmpty ->\n      tag of q <- Empty;\n      q.length <- 0;\n      q.tail   <- ()\n  end\n\nval rotate [a] (q: fifo a) : () =\n  match q with\n  | Empty ->\n      ()\n  | NonEmpty { tail } ->\n      (* Advance the tail pointer. *)\n      taking tail from q begin\n       q.tail <- tail.next\n      end\n  end\n\n(* In contrast with [list::fold], the function [queue::fold] cannot perform\n   a strong update on the queue elements. The queue [q] adopts elements of\n   type [cell a], and this cannot be changed. Thus, [queue::fold] must require\n   its argument [f] to preserve the type [a] of the list element. *)\n\nval fold [a, b] (\n  q: fifo a,\n  consumes accu: b,\n  f: (a, consumes b) -> b\n) : b =\n  match q with\n  | Empty ->\n      accu\n  | NonEmpty { tail } ->\n      let rec fold (consumes accu: b, c: dynamic | q @ fifo a) : b =\n       take c from q;\n        let Cell { next; value_ } = c in\n        let accu = f (value_, accu) in\n       give c to q;\n        if tail == c then\n          accu\n        else\n          fold (accu, next)\n      in\n      (* Obtain the address of the first cell. *)\n      let head = taking tail from q begin tail.next end in\n      (* We're ready to launch the recursion. *)\n      fold (accu, head)\n  end\n\nval iter [a, p : perm] (\n  q: fifo a,\n  f: (a | p) -> ()\n| p\n) : () =\n  fold [a, (| p)] (q, (), fun (x:a, (| p)) : () = f x) \n\nval map [a, b, p : perm] (\n  q: fifo a,\n  f: (a | p) -> b\n| p\n) : fifo b =\n  let q' : fifo b = create () in\n  iter (q, fun (x: a | q' @ fifo b * p) : () =\n    insert (f x, q')\n  );\n  q'\n\nval copy [a] duplicable a => (q: fifo a): fifo a =\n  map (q, fun (x: a) : a = x)\n\nval rec work [a, p : perm] (q: fifo a, f: (a | q @ fifo a * p) -> () | p) : () =\n  match retrieve q with\n  | None ->\n      ()\n  | Some { contents = x } ->\n      f x;\n      work (q, f)\n  end\n\n(*\nLocal Variables:\ncompile-command: \"../mezzo queue.mz\"\nEnd:\n*)\n");q("/stdlib/queue.mzi",'(* The type of FIFO queues. *)\n\nabstract fifo +(a : type) : type\nfact exclusive (fifo a)\n\n(* Elements are normally inserted at the end of the queue, and retrieved\n   at the beginning. However, insertion at the beginning of the queue is\n   also supported. *)\n\n(* [create()] creates a new, empty queue. *)\nval create: [a] () -> fifo a\n\n(* [insert (x, q)] inserts the element [x] at the end of the queue [q]. The\n   queue claims the ownership of the element. *)\nval insert: [a] (consumes a, fifo a) -> ()\n\n(* [retrieve q] extracts the element found at the beginning of the queue [q],\n   if there is one. The caller recovers the ownership of the element. *)\nval retrieve: [a] fifo a -> option a\n\n(* [peek q] returns the element found at the beginning of the queue [q],\n   if there is one. The element remains in the queue. This function is\n   available only if the elements are duplicable. *)\nval peek: [a] duplicable a => fifo a -> option a\n\n(* [length q] returns the number of elements in the queue [q]. *)\nval length: [a] fifo a -> int\n\n(* [clear q] empties the queue [q]. *)\nval clear: [a] fifo a -> ()\n\n(* [insert_at_head (x, q)] inserts the element [x] at the beginning of the\n   queue [q]. *)\nval insert_at_head: [a] (consumes a, fifo a) -> ()\n\n(* [rotate q] moves the first element of [q] to the end of the queue. If [q]\n   is empty, [rotate] has no effect. *)\nval rotate: [a] fifo a -> ()\n\n(* [fold] applies the function [f], in turn, to every element of [q].\n   An accumulator is threaded through the iteration. *)\nval fold : [a, b] (\n  q: fifo a,\n  consumes accu: b,\n  f: (a, consumes b) -> b\n) -> b\n\n(* [iter] applies the function [f], in turn, to every element of [q]. *)\nval iter : [a, p : perm] (\n  q: fifo a,\n  f: (a | p) -> ()\n| p\n) -> ()\n\n(* [map (q, f)] is a new queue obtained by applying [f] to every element of\n   the queue [q]. *)\nval map: [a, b, p : perm] (\n  q: fifo a,\n  f: (a | p) -> b\n| p\n) -> fifo b\n\n(* [copy q] is a new queue whose elements are the elements of [q]. *)\nval copy  : [a] duplicable a => fifo a -> fifo a\n\n(* [work (q, f)] extracts an element [x] out of the queue [q] and\n   executes [f x]. The function [f] has access to the queue, and may\n   insert new elements into it. This process is repeated until the\n   queue becomes empty. *)\nval work : [a, p : perm] (q: fifo a, f: (a | q @ fifo a * p) -> () | p) -> ()\n\n(*\n  Local Variables:\n  compile-command: "../mezzo queue.mzi"\n  End:\n*)\n');q("/stdlib/reflection.mz",'(* TEMPORARY this could be just a rich_bool if "duplicable a" was\n   a permission. *)\n\n(* TEMPORARY we need a dummy [content] field of type unit, because\n   there is otherwise no place to put the [TyAnd] construct. *)\n\ndata duplicability a =\n  | NonDuplicable\n  | Duplicable { content: (() | duplicable a) }\n\n(* A test. *)\n\n(* This function is not very useful per se, but it shows that a dynamic\n   test allows us to decide whether [x] can be shared or must be explicitly\n   copied. *)\n\nval copy_if_required [a] (dup: duplicability a, copy: a -> a, x: a) : a =\n  if dup then x else copy x\n\n(* A test. *)\n\n(* Constructing duplicability witnesses is easy: the witness is always\n   the same, it is [Duplicable]. *)\n\n(* TEMPORARY if there wasn\'t this pesky [content] field, we would just\n   use [Duplicable] itself and would not need an abbreviation for it. *)\n\n(* TEMPORARY the next step would be to have the type system automatically\n   supply a value where an expression of type [duplicable a] is expected... *)\n\nval dup_int : duplicability int =\n  Duplicable { content = () }\n\n(* TEMPORARY this type is no longer supported!\nval dup: [a] duplicable a => duplicability a =\n  Duplicable { content = () }\n\nval dup_int_2 : duplicability int =\n  dup\n*)\n\n');q("/stdlib/reflection.mzi","(* The type [duplicability a] can be thought of as the type of a Boolean\n   value, which, when true, means that the type [a] is duplicable. *)\n\ndata duplicability a =\n  | NonDuplicable\n  | Duplicable { content: (() | duplicable a) }\n\n(* Thus, if [d] has type [duplicability a], one can write [if d then ...\n   else ...] and in the first branch, one can assume that the type [a] is\n   duplicable. *)\n\n(* Whenever [a] is a duplicable type, [dup] has type [duplicability a],\n   so it serves as a witness of the fact that [a] is duplicable. It is\n   just an abbreviation for [Duplicable ...]. *)\n\n(* TEMPORARY this type is no longer supported!\nval dup: [a] duplicable a => duplicability a\n*)\n");q("/stdlib/stash.mz","alias stashed (p: perm) : perm = p\n\nval stash [p: perm] (| consumes p) : (| stashed p) =\n  ()\n\nval unstash [p: perm] (| consumes stashed p) : (| p) =\n  ()\n");q("/stdlib/stash.mzi","(* This module allows one to make a permission opaque. This can be used, for\n   instance, to prevent the type-checker from expanding this permission and\n   from using it (or its components) during let-flex inference. *)\n\nabstract stashed (p : perm) : perm\n\nval stash: [p: perm] (| consumes p) -> (| stashed p)\n\nval unstash: [p: perm] (| consumes stashed p) -> (| p)\n\n");q("/stdlib/stream.mz",'open lazy\n\n(* A definition of lazy (finite or infinite) streams. *)\n\ndata cell a =\n  Nil\n| Cons { head: a; tail: thunk (cell a) }\n\nalias stream a =\n  (thunk (cell a) | duplicable a)\n\n(* Short-hands for constructing streams. *)\n\nval _nil : Nil =\n  Nil\n\nval _cons (head: unknown, tail: unknown) : Cons { head; tail } =\n  Cons { head; tail }\n\nval nil =\n  lazy::constant _nil\n\nval cons [a] (head: a, tail: stream a) : stream a =\n  lazy::constant (_cons(head, tail))\n\n(* Accessors. *)\n\nval head [a] (xs: stream a) : option a =\n  match lazy::force xs with\n  | Nil ->\n      none\n  | Cons { head } ->\n      some head\n  end\n\nval tail [a] (xs: stream a) : option (stream a) =\n  match lazy::force xs with\n  | Nil ->\n      none\n  | Cons { tail } ->\n      some tail\n  end \n\n(* Concatenation. *)\n\nval rec concat [a] (xs: stream a, ys: stream a) : stream a =\n  lazy::create (fun () : cell a =\n    match lazy::force xs with\n    | Nil ->\n        lazy::force ys\n    | Cons as xs ->\n        _cons(xs.head, concat(xs.tail, ys))\n    end\n  )\n\n(* An infinite stream can be created out of a production function.\n   The function\'s internal state becomes hidden forever. *)\n\nval infinite [a, p : perm] duplicable a => (\n  f: (| p) -> a\n| consumes p\n) : stream a =\n\n  let rec next (| consumes p) : cell a =\n    _cons(f(), lazy::create next)\n  in\n  lazy::create next\n\n(* Printing BUG? If I remove "duplicable a =>" above, I get an error\n   message that contains "!! \xe2\x98\xa0 !!" *)\n\n(* A constant infinite stream. *)\n\nval constant [a] duplicable a => (x: a) : stream a =\n  infinite (fun () : a = x)\n\n(* The above definition of [constant] causes new suspensions to be created as\n   the stream is forced. One might prefer a definition that consists of a\n   single cyclic suspension. Here it is. *)\n\nval constant [a] duplicable a => (x: a) : stream a =\n  lazy::cyclic (fun (self: stream a) : cell a =\n    _cons(x, self)\n  )\n\n(* The infinite stream of the natural integers. *)\n\nval nats : stream int =\n  let r = newref 0 in\n  infinite (fun (| r @ ref int) : int = postincr r)\n\n(* A finite or infinite stream can be created out of a production function\n   that produces an optional result. As soon as the function produces [None],\n   the stream is terminated. As in the case of [infinite] above, the\n   function\'s internal state becomes hidden forever. The function [f] is\n   allowed to destroy its own internal state when it returns [None]. This\n   can be useful, for instance, if one wishes to close a file after all\n   characters have been read. *)\n\nval produce [a, p : perm] duplicable a => (\n  f: (| consumes p) -> option (a | p)\n| consumes p\n) : stream a =\n\n  let rec next (| consumes p) : cell a =\n    match f() with\n    | None ->\n        Nil\n    | Some { contents = x } ->\n        _cons(x, lazy::create next)\n    end\n  in\n  lazy::create next\n\n(* A finite stream of integers. *)\n\nval interval (n: int) : stream int =\n  let r = newref 0 in\n  produce (fun (| consumes r @ ref int) : option (int | r @ ref int) =\n    let x = !r in\n    if x < n then begin\n      r := x + 1;\n      some x\n    end\n    else\n      none\n  )\n\n(*\nLocal Variables:\ncompile-command: "../mezzo stream.mz"\nEnd:\n*)\n');q("/stdlib/stream.mzi","open lazy\n\n(* A definition of lazy (finite or infinite) streams. *)\n\n(* A non-empty stream of type [stream a] can be constructed only\n   if the type [a] is duplicable. The type [stream a] is itself\n   duplicable. *)\n\ndata cell a =\n  Nil\n| Cons { head: a; tail: thunk (cell a) }\n\nalias stream a =\n  (thunk (cell a) | duplicable a)\n\n(* Short-hands for constructing streams. *)\n\n(* TEMPORARY interesting: the type-checker refuses to consider\n   that nil has type [a] stream a, even though that would be\n   correct as per the *relaxed* value restriction. *)\nval nil: stream Nil\nval cons: [a] (a, stream a) -> stream a\n\n(* Accessors. *)\n\nval head: [a] stream a -> option a\nval tail: [a] stream a -> option (stream a)\n\n(* Concatenation. *)\n\nval concat: [a] (stream a, stream a) -> stream a\n\n(* An infinite stream can be created out of a production function.\n   The function's internal state becomes hidden forever. *)\n\nval infinite: [a, p : perm] duplicable a => (\n  f: (| p) -> a\n| consumes p\n) -> stream a\n\n(* A constant infinite stream. *)\n\nval constant: [a] duplicable a => (x: a) -> stream a\n\n(* The infinite stream of the natural integers. *)\n\nval nats: stream int\n\n(* A finite or infinite stream can be created out of a production function\n   that produces an optional result. As soon as the function produces [None],\n   the stream is terminated. As in the case of [infinite] above, the\n   function's internal state becomes hidden forever. The function [f] is\n   allowed to destroy its own internal state when it returns [None]. This\n   can be useful, for instance, if one wishes to close a file after all\n   characters have been read. *)\n\nval produce: [a, p : perm] duplicable a => (\n  f: (| consumes p) -> option (a | p)\n| consumes p\n) -> stream a\n\n(* A finite stream of integers. *)\n\nval interval: int -> stream int\n\n");q("/stdlib/string.mz","open array\n\n(* Alias definitions *)\n\nalias char = int\n\nalias string m = array m char\n\nalias istring = string immut\nalias mstring = string mut\n\n(* Specific operations over strings. Other basic functions are already present\n * in the [array] module. *)\n\n(* [cmp (a, b)] returns a negative value if a is less than b lexicographically\n * speaking, 0 if a equals b, a positive value otherwise. *)\nval cmp [m1, m2] (\n  a: string m1,\n  b: string m2\n) : int =\n  let rec loop (\n    i: int\n    | a @ string m1\n    | b @ string m2\n  ) : int =\n    if i = length a && i = length b then 0\n    else if i = length b then -1\n    else if i = length a then 1\n    else begin\n      let u = get (a, i) and v = get (b, i) in\n      if u = v then loop (i + 1)\n      else u - v\n    end\n  in loop 0\n\n(* [eq (a, b)] is the equality function for strings. *)\nval eq [m1, m2] (\n  a: string m1,\n  b: string m2\n) : bool =\n  cmp (a, b) = 0\n\n(* [index_from (s, i, c)] returns the position of the first occurrence of\n * character [c] after the [i]-th position. *)\nval index_from [m] (\n  s: string m,\n  i: int,\n  c: char\n) : int =\n  first_from (s, i, fun (d: char) : bool = c = d)\n\n(* [rindex_from (s, i, c)] returns the position of the last occurrence of\n * character [c] before the [i]-th position. *)\nval rindex_from [m] (\n  s: string m,\n  i: int,\n  c: char\n) : int =\n  last_from (s, i, fun (d: char) : bool = c = d)\n\n(* [index (s, c)] is [index_from (s, 0, c)]. *)\nval index [m] (\n  s: string m,\n  c: char\n) : int =\n  index_from (s, 0, c)\n\n(* [rindex (s, c) is [rindex_from (s, length s - 1, c)]. *)\nval rindex [m] (\n  s: string m,\n  c: char\n) : int =\n  rindex_from (s, length s - 1, c)\n\n(* Auxiliary function for [trim]. *)\nval is_whitespace (c: char) : bool =\n  c = 32 || c = 10 || c = 13 || c = 9 || c = 12\n  (* TEMPORARY c = ' ' || c = '\\n' || c = '\\r' || c = '\\t' || c = '\\012' *)\n\n(* [trim s] removes all leading and trailing whitespaces in [s] and returns a new\n * string. *)\nval trim [m1, m2] (\n  s: string m1\n) : string m2 =\n  let i = first_from (s, 0, fun (c: char) : bool = not (is_whitespace (c))) in\n  let j = last_from (s, length s - 1, fun (c: char) : bool = not (is_whitespace (c))) in\n  if i <= j then sub (s, i, j)\n  else copy s\n\n(* [contains_from (s, i, c)] is true if the string [s] contains the character\n * [c] after the [i]-th position. *)\nval contains_from [m] (\n  s: string m,\n  i: int,\n  c: char\n) : bool =\n  index_from (s, i, c) < length s\n\n(* [contains (s, c)] is [contains_from (s, 0, c)]. *)\nval contains [m] (\n  s: string m,\n  c: char\n) : bool =\n  contains_from (s, 0, c)\n");q("/stdlib/string.mzi","open array\n\n(* char and string alias definitions *)\n\n(* TEMPORARY Maybe this should be abstract? But the parser has to implement char\n * support if so. *)\nalias char = int\n\n(* Making the following aliases abstract imply redoing all the [array] module\n * just for strings. *)\nalias string m = array m char\nalias istring = string immut\nalias mstring = string mut\n\n(* Specification operations over strings. Other basic functions are present in\n * the [array] module. *)\n\n(* [cmp (a, b)] returns a negative value if a is less than b lexicographically\n * speaking, 0 if a equals b, a positive value otherwise. *)\nval cmp : [m1, m2] (string m1, string m2) -> int\n\n(* [eq (a, b)] is the equality function for strings. *)\nval eq : [m1, m2] (string m1, string m2) -> bool\n\n(* [index_from (s, i, c)] returns the position of the first occurrence of\n * character [c] after the [i]-th position. *)\nval index_from : [m] (string m, int, char) -> int\n\n(* [rindex_from (s, i, c)] returns the position of the last occurrence of\n * character [c] before the [i]-th position. *)\nval rindex_from : [m] (string m, int, char) -> int\n\n(* [index (s, c)] is [index_from (s, 0, c)]. *)\nval index : [m] (string m, char) -> int\n\n(* [rindex (s, c) is [rindex_from (s, length s - 1, c)]. *)\nval rindex : [m] (string m, char) -> int\n\n(* [trim s] removes all leading and trailing whitespaces in [s] and returns a new\n * string. *)\nval trim : [m1, m2] string m1 -> string m2\n\n(* [contains_from (s, i, c)] is true if the string [s] contains the character\n * [c] after the [i]-th position. *)\nval contains_from : [m] (string m, int, char) -> bool\n\n(* [contains (s, c)] is [contains_from (s, 0, c)]. *)\nval contains : [m] (string m, char) -> bool\n");q("/stdlib/synctube.mz","(* A synchronous tube is implemented as a pair of asynchronous tube.\n   The first tube, [payload], is used to deliver a message of type [a].\n   The second tube, [ack], is used to deliver an acknowledgement (hence\n   enforcing synchrony) and to transmit the ownership of the first tube\n   back to the sender. *)\n\n(* We could use a mutable pair so as to be able to publish [inert] as\n   an exclusive type. For the moment, a tuple is more convenient\n   because it can be dependent. *)\n\n(* The code is amazingly simple. *)\n\nalias inert =\n  (tube::inert, tube::inert)\n\nval new () : inert =\n  (tube::new(), tube::new())\n\nalias outlet -a =\n  (payload: tube::outlet a, tube::inlet (| payload @ tube::inert))\n\nalias inlet +a =\n  (payload: tube::inlet a, tube::outlet (| payload @ tube::inert))\n\nval setup [a] (consumes c: inert) : (| c @ outlet a * c @ inlet a) =\n  let payload, ack = c in\n  tube::setup [a] payload;\n  tube::setup [(| payload @ tube::inert)] ack\n\nval send [a] (consumes c: outlet a, consumes x: a) : (| c @ inert) =\n  let payload, ack = c in\n  tube::send(payload, x);\n  tube::receive [(| payload @ tube::inert)] ack\n    (* The type application is mandatory, otherwise, by covariance\n       of [tube::outlet], reception occurs at type [()], and we\n       lose a permission. *)\n\nval receive [a] (consumes c: inlet a) : a =\n  let payload, ack = c in\n  let x = tube::receive payload in\n  tube::send [(| payload @ tube::inert)] (ack, ());\n  x\n\n");q("/stdlib/synctube.mzi","(* This module defines synchronous tubes on top of the asynchronous\n   tubes of [tube]. The interface is exactly the same, except that\n   after an interaction, the sender (instead of the receiver) retains\n   the ownership of the tube. *)\n\nabstract inert\n(* fact exclusive inert *)\n  (* not satisfied by the current implementation, but could be, if\n     needed *)\n\nval new: () -> inert\n\nabstract outlet -a\nabstract inlet +a\n\nval setup: [a] (consumes c: inert) -> (| c @ outlet a * c @ inlet a)\n\nval send: [a] (consumes c: outlet a, consumes a) -> (| c @ inert)\nval receive: [a] (consumes inlet a) -> a\n\n(* TEMPORARY one could also transmit a permission the other way, during the ack *)\n\n");q("/stdlib/vector.mz","(* This module implements resizable arrays, also known as vectors,\n   for short. *)\n\ndata mutable vector a =\n  Vector {\n    (* A default function, used to initialize new locations when the\n       vector is enlarged. *)\n    default: int -> a;\n    (* The array's logical size. It is always less than or equal\n       to the length of the array [table]. *)\n    size: int;\n    (* The underlying array. The length of this array is arbitrary,\n       but is of course at least [size]. *)\n    (* For the moment, I am using an array of options, with the\n       invariant property that every slot below [size] is [Some].\n       If we had permissions for array segments, then we would be\n       able to encode this invariant and get rid of the option,\n       I suppose. TEMPORARY that would be nice! *)\n    table: marray (option a)\n  } \n\nval minimum_length =\n  16 (* must be non-zero *)\n\nval new_length (length: int, size: int) : int =\n  (* By default, we double the vector's length until it reaches the\n     requested size or exceeds [array::max_length]. *)\n  let length =\n    max (\n      minimum_length,\n      (array::above_pow (length, size))\n    )\n  in\n  if size <= length then\n    length\n  else if size <= array::max_length then\n    size\n  else\n    (* The requested size is too large. *)\n    fail\n\nval init [a] (size: int, default: int -> a, f: int -> a) : vector a =\n  let length = new_length (0, size) in\n  Vector {\n    default = default;\n    size = size;\n    table = array::init (Up, length, fun (i: int) : option a =\n      if i < size then some (f i) else None\n    )\n  }\n\nval grab [a] (consumes r: marray a, default: int -> a) : vector a =\n  (* We take the ownership of [r]. We replace every element [x]\n     with [some x], so as to make it an array of type [option a]. *)\n  array::transform (Up, r, fun (_: int, consumes x: a) : option a = some x);\n  Vector {\n    default = default;\n    size = array::length r;\n    table = r\n  }\n\nval list2vector [a] (consumes xs: list::list a, default: int -> a) : vector a =\n  grab (list::list2array xs, default)\n\nval create [a] (default: int -> a) : vector a =\n  init (0, default, fun (i : int) : a = fail)\n\nval size [a] (v: vector a) : int =\n  v.size\n\nval resize [a] (v: vector a, new_size: int) : () =\n  if new_size < 0 then\n    fail;\n  let old_size = v.size in\n  if new_size <> old_size then begin\n    (* Update the logical size of the vector. *)\n    v.size <- new_size;\n    let table = v.table in\n    if new_size < old_size then\n      (* The logical size of the vector decreases. *)\n      (* Avoid a memory leak. *)\n      (* TEMPORARY we would like to use:\n        array::fill_segment (table, new_size, n, None);\n        but this is not currently possible, see comment in [array.mz];\n        so, instead, we must use an explicit loop: *)\n      array::iter_segment (Up, new_size, old_size, fun (k: int | table @ marray (option a)) : () =\n         array::set (table, k, None)\n      )\n    else begin\n      (* The logical size of the vector increases. *)\n      v.size <- new_size;\n      let old_length = array::length table in\n      if new_size > old_length then begin\n       let new_length = new_length (old_length, new_size) in\n       (* The physical size of the array must increase. *)\n       (* The array [table'] is initialized with [None], a duplicable value,\n          so [array::create] can be used. Thus, [table'] has type [array None].\n          Because [array] is covariant, [table'] also has type [array (option a)],\n          and is a suitable argument for [array::steal]. *)\n       let table' = array::create (new_length, None) in\n       array::steal [option a] (table, table', 0);\n       v.table <- table'\n      end;\n      (* Initialize the new elements. *)\n      array::iter_segment (Up, old_size, new_size, fun (k: int | v @ vector a) : () =\n       array::set (v.table, k, some (v.default k))\n      )\n    end\n  end\n\nval shrink [a] (v: vector a, delta: int) : () =\n  if delta < 0 then\n    fail;\n  resize (v, size v - delta)\n\nval pop [a] (v: vector a) : () =\n  resize (v, size v - 1)\n\nval get [a] duplicable a => (v: vector a, i: int) : a =\n  if i >= 0 && i < v.size then\n    option::force (array::get (v.table, i))\n  else\n    fail\n\nval set [a] (v: vector a, i: int, consumes x: a) : () =\n  if i >= 0 && i < v.size then\n    array::set (v.table, i, some x)\n  else\n    fail\n\nval push [a] (v: vector a, consumes x: a) : () =\n  let i = size v in\n  resize (v, i + 1);\n  array::set (v.table, i, some x)\n\nval last [a] duplicable a => (v: vector a) : a =\n  get (v, size v - 1)\n\nval sort [a, p : perm] duplicable a => (v: vector a, cmp: (a, a | p) -> int | p) : () =\n  (* We must define a comparison function over options. *)\n  let cmp (x: option a, y: option a | p) : int =\n    cmp (option::force x, option::force y)\n  in\n  (* The cool thing is, we do not need to copy the array in order to\n     sort an initial segment of it. *)\n  array::sort_initial_segment (cmp, v.table, v.size)\n\n(* TEMPORARY ideally, we should provide more operations over vectors,\n   taking inspiration from the array library. Can we avoid duplication?\n   One option would be for the vector to expose the underlying array;\n   this would be somewhat inelegant, but less dangerous than in a normal\n   programming language, because the type-checker would check that the\n   ownership of the array is returned before the vector can be used again.\n   Another option would be to to define a library of operations that work\n   uniformly on arrays, vectors, and other random access containers. *)\n\n(* API differences with Cubicle's common/vec.ml:\n\n   Vec.get raises Not_found if the element is equal to the default element\n   (this seems strange, and I don't think this feature is exploited).\n\n   Vec.set automatically increases the array's logical size if required but\n   does not increase its physical length (this seems strange). Our function\n   vector::set does not do this; vector::resize must be called first.\n\n   Vec.grow_to_by_double is a bit strange, because it increases the vector's\n   physical length, but does not change its logical size. I guess this is\n   consistent with the fact that Vec.set automatically increases the vector's\n   logical size. Vec.grow_to_by_double is replaced by vector::resize here. *)\n\n(*\n  Local Variables:\n  compile-command: \"../mezzo vector.mz\"\n  End:\n*)\n");q("/stdlib/vector.mzi","(* This module implements resizable arrays, also known as vectors,\n   for short. *)\n\nabstract vector +a\nfact exclusive (vector a)\n\n(* An array has a logical size -- the number of its elements -- and a\n   physical length -- the length of the underlying array. The length\n   is always greater than or equal to the size. The vector's size can\n   be increased or decreased by the user. The vector's length is under\n   the control of the implementation. *)\n\n(* [create default] creates a new vector of size zero. The function [default]\n   is stored, and will be later invoked by [resize] when the vector is\n   enlarged in order to initialize the newly created slots. *)\n\nval create: [a] (default: int -> a) -> vector a\n\n(* [init (size, default, f)] creates a new vector of size [size]. The function\n   [default] serves the same purpose as in [create] above. The function [f] is\n   invoked immediately in order to initialize the [size] initial elements. *)\n\nval init: [a] (size: int, default: int -> a, f: int -> a) -> vector a\n\n(* [grab (r, default)] turns the array [r] into a vector of the same size.\n   [default] serves the same purpose as in [create] above. *)\n\nval grab: [a] (consumes r: marray a, default: int -> a) -> vector a\n\n(* [list2vector (xs, default)] turns the list [xs] into a vector of the\n   same size. [default] serves the same purpose as in [create] above. *)\n\nval list2vector: [a] (consumes xs: list::list a, default: int -> a) -> vector a\n\n(* [size v] returns the current size of the vector [v]. *)\n\nval size: [a] vector a -> int\n\n(* [resize (v, new_size)] increases or decreases the size of the vector [v]\n   to [new_size]. If [new_size] is greater than the vector's current size,\n   the function [f] that was supplied at vector creation time is invoked to\n   initialize the new slots. *)\n\nval resize: [a] (vector a, new_size: int) -> ()\n\n(* [shrink (v, delta)] is a short-hand for [resize (v, size v - delta)].\n   [delta] must be comprised between 0 and [size v], inclusive. *)\n\nval shrink: [a] (vector a, int) -> ()\n\n(* [pop v] is a short-hand for [shrink (v, 1)]. *)\n\nval pop: [a] vector a -> ()\n\n(* [get (v, i)] reads the element at index [i] in the vector [v].  Because the\n   value is copied, the type [a] must be duplicable.  The index [i] must be\n   comprised between 0, inclusive, and [size v], exclusive. *)\n\nval get: [a] duplicable a => (vector a, int) -> a\n\n(* [set (r, i, x)] sets the element at index [i] in the vector [v] to the\n   value [x]. The index [i] must be comprised between 0, inclusive, and [size\n   v], exclusive. *)\n\nval set: [a] (vector a, int, consumes a) -> ()\n\n(* [push (v, x)] appends the element [x] at the end of the vector [v]. *)\n\nval push: [a] (vector a, consumes a) -> ()\n\n(* [last v] returns the last element in the vector [v], that is, the element\n   at index [size v - 1]. *)\n\nval last: [a] duplicable a => vector a -> a\n\n(* [sort (v, cmp)] sorts the elements of the vector [v] according to the\n   ordering [cmp]. *)\n\nval sort: [a, p : perm] duplicable a => (v: vector a, cmp: (a, a | p) -> int | p) -> ()\n\n");q("/stdlib/wref.mz",'open lock\n\n(* A weak reference is a pair of a strong reference [r] and a lock\n   that protects the permission [r @ ref a]. *)\n\nalias wref a =\n  (r: unknown, lock (r @ ref a))\n\n(* Allocation. *)\n\nval new [a] (consumes x: a) : wref a =\n  let r = newref x in\n  let l : lock (r @ ref a) = new () in\n  (r, l)\n\n(* Atomic swap. *)\n\nval swap [a] (r: wref a, consumes y: a) : a =\n  let x, l = r in\n  acquire l;\n  let v = !x in\n  x := y;\n  release l;\n  v\n\n(* Get. *)\n\n(* One might be tempted to believe that a critical section is not\n   needed here, since a single read (or write) instruction is atomic\n   anyway. However, removing the acquire/release instructions here\n   would be unsound (and ill-typed, of course). For instance, an\n   attempt to [get] while an [update] is in progress would be\n   dangerous. Thanks to the lock, such an attempt will block until\n   [update] is finished. *)\n\nval get [a] duplicable a => (r: wref a) : a =\n  let x, l = r in\n  acquire l;\n  let v = !x in\n  release l;\n  v\n\n(* Set. *)\n\nval set [a] (r: wref a, consumes y: a) : () =\n  let x, l = r in\n  acquire l;\n  x := y;\n  release l\n\n(* Update. *)\n\nval update [a, b, p : perm] (r: wref a, f: (consumes (a | p)) -> (a, b) | consumes p) : b =\n  let x, l = r in\n  acquire l;\n  let y, result = f !x in\n  (* The test [if x != y] is not required. It may or may not save time.\n     Anyway, it is interesting that the code is well-typed in its presence.\n     In the branch where [x == y], this equality is used to transform the\n     permission [y @ a] into [x @ a]. (I think!) *)\n  if !x != y then\n    x := y;\n  release l;\n  result\n\nval borrow [a, b, p : perm] (r: wref a, f: (a | consumes p) -> b | consumes p) : b =\n  let x, l = r in\n  acquire l;\n  let result = f !x in\n  release l;\n  result\n\n(*\nLocal Variables:\ncompile-command: "../mezzo wref.mz"\nEnd:\n*)\n');q("/stdlib/wref.mzi","(* A weak reference is a duplicable mutable container, whose content\n   type is fixed at creation time (i.e., it does not allow strong\n   updates). In other words, it is an ML reference. *)\n\n(* Because a weak reference is duplicable, multiple threads may\n   simultaneously attempt to access (read or write) the reference.\n   Technically, this does not constitute a race condition, because\n   a lock is used internally to protect the reference. *)\n\nabstract wref a\nfact duplicable (wref a)\n\n(* Allocation. *)\n\nval new: [a] (consumes a) -> wref a \n\n(* Atomic swap. *)\n\nval swap: [a] (wref a, consumes a) -> a\n\n(* Get. *)\n\nval get: [a] duplicable a => wref a -> a\n\n(* Set. *)\n\nval set: [a] (wref a, consumes a) -> ()\n\n(* [update] can be viewed as a version of [swap] where the new value\n   is computed in terms of the previous value. The lock remains taken\n   while the computation is in progress, so [update] must be used with\n   care. *)\n\nval update: [a, b, p : perm] (\n  r: wref a,\n  f: (consumes (a | p)) -> (a, b)\n| consumes p) -> b\n\n(* [borrow] can be viewed as a degenerate version of [update] where\n   the function [f] temporarily has access to the content of the\n   reference [r], but cannot modify it. *)\n\nval borrow: [a, b, p : perm] (\n  r: wref a,\n  f: (a | consumes p) -> b\n| consumes p) -> b\n");q("/demos/write-once-refs.mz","(* First example: implementation of write-once references *)\n\ndata mutable writable =\n  Writable { contents: () }\n\ndata frozen a =\n  Frozen { contents: a }\n\nval new (): writable =\n  Writable { contents = () }\n\nval seal [a] (consumes r: writable, consumes x: a)\n           : (| r @ frozen a) =\n  r.contents <- x;\n  tag of r <- Frozen\n\nval get [a] (consumes r: frozen a): a =\n  r.contents\n\n");q("/demos/a-race.mz","(* Second example: a race rejected by Mezzo *)\n\nval r = newref 1\n\nval incr (| r @ ref int): () = r := !r + 1\n\nval _ =\n  (* r @ ref int * incr @ ... *)\n  thread::spawn incr; \n  (*               incr @ ... *)\n  thread::spawn incr; \n");q("/demos/a-race-fixed.mz","(* The second example, fixed in a generic manner *)\n\nval r = newref 1\n\nval incr (| r @ ref int): () = r := !r + 1\n\nval hide [a, b, s: perm]\n  (f: (consumes a | s) -> b | consumes s):\n      (consumes a    ) -> b =\n  let l: lock::lock s = lock::new () in\n  fun (consumes x: a): b =\n    lock::acquire l;\n    let r = f x in\n    lock::release l;\n    r\n\nval _ =\n  let incr = hide incr in\n  thread::spawn incr; \n  thread::spawn incr; \n");q("/demos/ref-get.mz","(* Third example: aliasing, rejected *)\n\ndata ref a = Ref { contents: a }\n\nval get [a] (r: ref a): a =\n  r.contents\n");q("/demos/ref-get-fix1.mz","(* First fix *)\n\ndata ref a = Ref { contents: a }\n\nval get [a] duplicable a => (r: ref a): a =\n  r.contents\n");q("/demos/ref-get-fix2.mz","(* Second fix *)\n\ndata ref a = Ref { contents: a }\n\nval get [x: value] (r: Ref { contents = x }): (=x) =\n  r.contents\n\n(* Sample usage. *)\nval _ =\n  let x = (1, 2) in\n  let r = Ref { contents = x } in\n  let y = get r in\n  (* Call with mezzo -explain x11 here *)\n  info::info r;\n");q("/demos/list-append.mz","(* Fourth (complete) example: concat *)\ndata list a =\n  | Nil\n  | Cons { head: a; tail: list a }\n\nval cons (head: unknown, tail: unknown): Cons { head; tail } =\n  Cons { head; tail }\nval nil =\n  Nil\n\nval rec append [a] (consumes xs: list a, consumes ys: list a): list a =\n  match xs with\n  | Nil ->\n      ys\n  | Cons { head; tail } ->\n      Cons { head; tail = append (tail, ys) }\n  end\n\n(* Usage: *)\nval _ =\n  (* Losing some permissions. *)\n  let l1: list (ref ()) = cons (newref (), nil) in\n  let l2: list (ref ()) = cons (newref (), nil) in\n  let l3 = append (l1, l2) in\n  (* assert l1 @ list (ref ()); *)\n  (* assert l2 @ list (ref ()); *)\n  (* Keeping the permissions! *)\n  let l1: list int = cons (5, nil) in\n  let l2: list int = cons (6, nil) in\n  let l3 = append (l1, l2) in\n  assert l1 @ list int;\n  assert l2 @ list int\n  (* This is call-site polymorphism! *)\n\n(* This function is sub-optimal: it is not tail-rec! *)\n\n(* How are we going to do that? Some pretty pictures on the slides. *)\ndata mutable cell a =\n  Cell { head: a; tail: () }\n\nval rec appendAux [a] (consumes (dst: cell a, xs: list a, ys: list a))\n: (| dst @ list a)\n  =\n  match xs with\n  | Cons { tail } ->\n      let dst' = Cell { head = xs.head; tail = () } in\n      dst.tail <- dst';\n      tag of dst <- Cons;\n      (* assert dst  @ Cons { head: a; tail = dst' } * *)\n      (*        dst' @ cell a * *)\n      (*        tail @ list a * *)\n      (*        ys   @ list a; *)\n      appendAux (dst', tail, ys);\n      (* assert dst  @ Cons { head: a; tail = dst' } * *)\n      (*        dst' @ list a; *)\n      (* assert dst  @ list a; *)\n  | Nil ->\n      dst.tail <- ys;\n      tag of dst <- Cons;\n  end\n\nval append [a] (consumes (xs: list a, ys: list a)) : list a =\n  match xs with\n  | Cons ->\n      let dst = Cell { head = xs.head; tail = () } in\n      appendAux (dst, xs.tail, ys);\n      dst\n  | Nil ->\n      ys\n  end\n");q("/demos/graph.mz","(* Fifth example: a node that points to itself (rejected) *)\nopen list\n\ndata mutable node a =\n  Node {\n    neighbors: list (node a);\n    value_: a;\n  }\n\nval _: node int =\n  let x = Node {\n    neighbors = ();\n    value_ = 10;\n  } in\n  x.neighbors <- cons (x, nil);\n  x\n");q("/demos/graph-fixed-dfs.mz","(* A fix for the fifth example, using our adoption/abandon mechanism.  *)\nopen list\n\ndata mutable node a =\n  Node {\n    neighbors: list dynamic;\n    value_: a;\n    seen: bool;\n  }\n\nand mutable graph a =\n  Graph {\n    roots: list dynamic;\n  } adopts node a\n\nval _ =\n  let g: graph int =\n    let x = Node {\n      neighbors = ();\n      value_ = 10;\n      seen = false;\n    } in\n    x.neighbors <- cons [dynamic] (x, nil);\n    let g: graph int = Graph { roots = cons [dynamic] (x, nil) } in\n    give x to g;\n    g\n  in\n  let dfs [a] (g: graph a, f: a -> ()): () =\n    let work_list = newref nil in\n    let rec dfs (n: dynamic | g @ graph a * work_list @ ref (list dynamic)): () =\n      take n from g;\n      if not n.seen then begin\n        f n.value_;\n        work_list := append (n.neighbors, !work_list);\n        n.seen <- true;\n      end;\n      give n to g;\n      match !work_list with\n      | Cons { head; tail } ->\n          work_list := tail;\n          dfs head\n      | Nil ->\n          ()\n      end\n    in\n    iter (g.roots, dfs)\n  in\n  dfs (g, print)\n");q("/demos/borrow-w-ghost-code.mz","open list\nopen either\n\nalias wand (pre: perm) (post: perm) =\n  {ammo: perm } (\n    (| consumes (pre * ammo)) -> (| post)\n  | ammo)\n\nalias focused a (post: perm) =\n  (x: a, release: wand (x @ a) post)\n\nval rec find [a] (consumes l: list a, pred: a -> bool):\n    either (| l @ list a) (focused a (l @ list a))\n  =\n  match l with\n  | Nil ->\n      left ()\n  | Cons { head; tail } ->\n      if pred head then\n        right (\n          head,\n          fun (| consumes (head @ a * tail @ list a)): (| l @ list a) =\n            ())\n      else\n        match find (tail, pred) with\n        | Left ->\n            left ()\n        | Right { contents = (elt, release) } ->\n            let flex s: perm in\n            right (\n              elt,\n              fun (| consumes (head @ a * elt @ a * s)): (| l @ list a) =\n                release ())\n        end\n  end\n\nval _ =\n  (* Create a sample list. *)\n  let l = cons (newref 1, cons (newref 2, nil)) in\n  (* Try to find an element greater than 1 *)\n  match find (l, fun (x: ref int): _ = !x > 1) with\n  | Left ->\n      (* No such element has been found *)\n      ()\n  | Right { contents = (elt, restore) } ->\n      (* The element [elt] has been found. *)\n      print elt;\n      (* Calling the (ghost) [restore] function allows one to give up ownership\n       * of [elt] and recover ownership of [l] instead. *)\n      restore ()\n  end;\n  (* In any case, we can use [l] afterwards. *)\n  assert l @ list (ref int)\n");var
lR=[0,f("Sys_error")],cf=[0,f("Failure")],di=[0,f("Invalid_argument")],cX=[0,f("End_of_file")],o=[0,f("Not_found")],qv=[0,f("Match_failure")],qu=[0,f("Stack_overflow")],l=[0,f("Assert_failure")],qw=[0,f("Undefined_recursive_module")],p8=f("4.01.0+rc2"),ez=[0,f(c),0,0,-1],il=[0,f(c),1,0,0],k9=f('File "%s", line %d, characters %d-%d: %s'),lK=f(bp),lN=f(bp),lP=f(bp),rs=[0,1,1,0,1,1,1,1,-921200851,2,0,0,0,0,0],mj=[0,[0,f("ocaml"),79],[0,[0,f("native"),78],[0,[0,f("byte"),66],[0,[0,f("program"),80],[0,[0,f("pp"),82],[0,[0,f("debug"),68],[0,[0,f("interf"),73],[0,[0,f("link"),76],0]]]]]]]],sd=[0,yF],fF=[1,[3,[0,47,47]]],sh=[1,[2,[3,[0,47,47]]]],ml=[1,0],i_=[0,f("\0\0\xf5\xff\x05\0\xf7\xff\xf8\xff\xf9\xff\x01\0\xfa\xff\0\0\xfb\xff\x01\0\x01\0\xfc\xff\0\0\x01\0\xfd\xff\x03\0\x03\0\xfe\xff\xff\xff\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\x04\0\x02\0S\0\xf4\xff\xf5\xff\0\0\x01\0\0\0\xfe\xff\xa2\0\xfd\xff\x02\0\0\0\xfb\xff\x03\0\xf9\xff\x1d\0\x1e\0\x01\0\xff\xff\xfe\xff0\0\0\0\x06\0\x01\0\x02\0\xfd\xff\xfe\xff"),f("\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\t\0\x03\0\xff\xff\0\0\xff\xff\xff\xff\x05\0\xff\xff\x07\0\xff\xff\xff\xff\x02\0\x03\0\xff\xff\xff\xff\xff\xff\x03\0\x03\0\0\0\xff\xff\xff\xff\xff\xff"),f("\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0,\0,\0\xff\xff\0\0\0\x001\0\xff\xff\xff\xff\xff\xff5\0\0\0\0\0"),f("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x02\0\0\0\x02\0\x02\0\x02\0\x02\0\0\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x12\0/\0\0\0\x02\0\x0f\0\0\0\x04\0\x03\0)\0&\0'\x004\x004\0(\0\x05\0\x07\0*\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\0\0\0\0.\0\xff\xff\x10\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\r\0\x17\0\x15\0\f\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x002\0%\0\0\0\0\0\x11\0\x1a\x006\0\x0f\0\x07\0\x06\0\x05\0\0\0\0\0\0\0\0\0\x1b\0\0\0\x0b\0\x0e\0\x16\0\x14\0\x18\0\f\0\b\0\t\0\x19\0\x1c\0\0\0-\0\xff\xff\0\0\f\0 \0\t\0\0\0$\0$\0!\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\x003\0\0\0\0\0\0\0\0\0\x1f\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\"\0\0\0\0\0\0\0$\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0#\0$\0$\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\0\0\0\0\0\0\x01\0$\0\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),f("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\x02\0\x02\0\xff\xff\x02\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0-\0\xff\xff\x02\0\0\0\xff\xff\0\0\0\0 \0!\0&\x001\x003\0'\0\0\0\0\0)\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff+\0,\0\0\0\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\n\0\x10\0\r\0\xff\xff\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\0\"\0\xff\xff\xff\xff\0\0\x06\x002\0\x14\0\x19\0\0\0\x1c\0\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\xff\xff\0\0\0\0\x0b\0\x11\0\b\0\x0e\0\0\0\x16\0\x18\0\x1b\0\xff\xff+\0,\0\xff\xff\0\0\x1d\0\0\0\xff\xff\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\x1d\0\xff\xff\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\xff\xff\xff\xff\xff\xff\x1d\0\xff\xff\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0$\0$\0\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\xff\xff\0\0$\x004\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0+\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),f(c),f(c),f(c),f(c),f(c),f(c)],c4=[0,f("\0\0\xfd\xff\xfe\xff\x01\0\xff\xff\x02\0\x07\0\b\0\xfe\xff\f\0\x11\0\x16\0!\0\xfe\xff\r\0\x03\0&\0+\0\x12\0\x04\x006\0;\0\xfc\xff@\0E\0K\0P\0Z\0`\0\xfe\xff\x17\0\xff\xff\x1b\0V\0\xfc\xff\xfd\xfff\0h\0l\0\xff\xff\x1d\0p\0\xfd\xff\xfe\xffu\0{\0\x82\0\x8a\0\x91\0\x97\0\xfc\xff\xfd\xff\x9c\0\xa0\0\xa4\0\xff\xff\xa6\0\xaf\0\xfd\xff\xb5\0\xb6\0\xbe\0\xc5\0\xcb\0\xd0\0\x15\0\xfd\xff\x18\0-\0<\0\xfd\xff\xfe\xffD\0'\0\xfd\xffA\0O\0S\0\xfd\xff\xfe\xffU\0\xda\0\xfa\xff\xdf\0\xfc\xff\x1a\0\xfd\xff\xe5\0'\x01\xd4\0\xe9\0\xeb\0O\x01\xfe\xff/\0\xff\xff\xfc\0\xf1\0X\x01\xfd\xffg\x01m\x01\x90\x01n\0\x9b\x01\xc7\x01v\0\xd6\x01\xe0\x01\xff\xff\xea\x01\xfe\xff\x0f\x02\xfd\xff\xfe\xff4\0\x02\x01\x06\x01\x0e\x01\x1f\x01\x7f\x01\xd8\x01%\x01\x15\x02y\0\xfb\xff]\0\x86\0\xcf\x02\x8c\0\xfe\xff\xfd\xff\x91\x005\0\xfd\xff\xfe\xff\xaa\0\xff\xff9\x01\xfe\xff)\0D\x01J\x018\0\xa4\x01\xb3\x01A\0;\0R\0^\0d\0\x91\0J\x02?\x01\x8e\x01Z\x01h\0e\0w\0m\0\x84\0~\0\x85\0\x96\0\x9b\0\xa1\0\xe4\0R\x02\xbc\x01\xc2\x01\xa0\x01\xbb\0\xb2\0\xb5\0\xc1\0\xc8\0\xca\0\xff\0W\x02\xc9\x01\xcf\x01\xf9\x01\xcb\0\xdb\0\xd7\0\xd9\0\xd2\0\xe8\0*\x01\xea\x006\x01)\x01\\\x02\x13\x02\x18\x02-\x02\0\x01\xfd\0\x02\x01\x04\x01\f\x01\t\x01\x0b\x01d\x01l\x02\x1c\x02\x1e\x02b\x023\x01I\x01Q\x01?\x01V\x01R\x01Z\x01\x93\x01q\x02\x01\x02$\x02f\x02y\x02\x89\x02\x95\x02\x9a\x025\x02=\x02\x8a\x02\x90\x02\xa5\x01\xff\xff"),f("\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\x02\0\x02\0\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x02\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x02\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\x01\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x03\0\x03\0\xff\xff\xff\xff\0\0\0\0\xff\xff\x01\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x01\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\x05\0\xff\xff\x02\0\xff\xff\x05\0\x05\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\x01\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\0\0\x02\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\x03\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff"),f("\x03\0\0\0\0\0\x05\0\0\0\x05\0\t\0\xff\xff\0\0\t\0\t\0\t\0\x10\0\0\0\xff\xff\xff\xff\x10\0\x10\0\xff\xff\xff\xff\x10\0\x17\0\0\0\x17\0\x18\0\x17\0\x17\0\x17\0\x17\0\0\0\xff\xff\0\0 \0$\0\0\0\0\0$\0$\0$\0\0\0\xff\xff*\0\0\0\0\x000\0\xff\xff0\0\xff\xff0\x004\0\0\0\0\x004\x004\x004\0\0\0\xff\xff;\0\0\0;\0@\0;\0@\0;\0@\0D\0\0\0C\0D\0F\0\0\0\0\0H\0L\0\0\0K\0L\0N\0\0\0\0\0P\0S\0\0\0Z\0\0\0\xff\xff\0\0[\0Z\0\xff\xffZ\0[\0Z\0\0\0\xff\xff\0\0a\0a\0d\0\0\0d\0d\0i\0g\0n\0i\0j\0l\0l\0\0\0n\0\0\0q\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\0\0\0\xff\xff\x7f\0\xff\xff\x81\0\0\0\0\0\xff\xff\x87\0\0\0\0\0\xff\xff\0\0\x8b\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9b\0\xff\xff\xff\xff\x9b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\0\xff\xff\xff\xff\xaa\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb5\0\xff\xff\xff\xff\xb5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3\0\xff\xff\xff\xff\xc3\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcf\0\xff\xff\xff\xff\xcf\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdb\0\xff\xff\xff\xff\xdb\0\xdd\0\xdd\0\xdd\0\xdd\0\xff\xff\xff\xff\xe3\0\xe3\0\xe4\0\0\0"),f("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\n\0\b\0\b\0\n\0\x07\0\xff\xff\xff\xff\x13\0\xff\xff\xff\xff\x0b\0\b\0\x13\0\x0b\0\x07\0\x0b\0\b\0\x1f\0\x0b\0\x07\0V\0\x1f\0(\0\n\0\x1e\0(\0\x11\0\x0f\0\xff\xff\x11\0\x0e\0\xff\xff\xff\xff\x0b\0\xff\xff\xff\xff\x14\0\x13\0\x0b\0\x14\0\x12\0_\0\x01\0\x04\0\x04\0(\0r\0\x14\0\x13\0\x11\0\x14\0\x12\0\x19\0\x19\0\xff\xff\x19\0\x1a\0\xff\xff\xff\xff\x14\0\xff\xff\xff\xff \0\x1f\0C\0 \0\x1e\0\xff\xff\x1b\0\x1b\0\x14\0\x1b\0\x1c\0\x1b\0\x1b\0\x19\0\x1b\0\x1c\0\x18\0%\0\xff\xffK\0%\0\x1b\0\x1b\0 \0\x1b\0\x1c\0\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\x1c\0\x18\0(\0\x1b\0&\0(\0\x18\0&\0&\0%\0H\0&\0-\0\x1b\0\xff\xff-\0\x18\0.\0\xff\xff\x1b\0.\0\"\0\x18\0/\0\x80\0(\0/\0&\0\xff\xff\x92\0.\0&\0P\0.\0\xff\xff-\0\x88\0\xff\xff/\0\xff\xff.\0/\0o\0\xff\xff\x92\0\xff\xff/\0,\0\xff\xff~\0m\x005\0\xff\xff.\x005\0\x93\x008\0\x94\0.\x008\x006\0/\0\xff\xff6\x006\0\xff\xff8\x006\0\xff\xff8\0\x95\0\xff\xff\x83\0.\x005\0=\0\x81\0\x81\0=\x008\0\xff\xff\xff\xff>\x006\0\xff\xff>\x002\x006\0\x96\x008\0?\0\xff\xff\x97\0?\0\x98\0\xff\xff\x9d\0>\0=\0\xff\xff>\0\x89\0\x89\0?\0\xff\xff>\0?\0\x9e\0\xff\xff\x9f\0<\0\xff\xffY\0?\0\xa0\0Y\0\xff\xff\xff\xffX\0V\0>\0X\0U\0\x84\0\xff\xff>\0?\0\xff\xff\xa1\0\xa2\0_\0\xff\xff\xff\xff^\0\xff\xffY\0_\0\xff\xff>\0^\0\xa3\0X\0_\0\xff\xffW\0^\0\xa4\0\x02\0\xff\xff\xff\xff\r\0\r\0`\0_\0\xff\xff`\0^\0\xa5\0t\0\xff\xff\r\0t\0\xa6\0x\0\xff\xff\r\0y\0R\0B\0\xff\xffx\0\xff\xffY\0x\0\x1d\0`\0'\0\xa7\0`\0\xac\0\r\0t\0Y\0\xad\0`\0\xff\xffJ\0\xae\0x\0\xaf\0\r\0y\0\xff\xffx\0t\0\\\0V\0{\0\\\0U\0\x86\0\r\0\xb0\0\xb1\0\xb2\0t\0\x16\0G\0\xb7\0\xb8\0\xb9\0\xff\xff\xff\xff\xba\0\x8e\0\xff\xff\x1d\0\x8d\0\\\0\xbb\0\x9a\0[\0\x16\0\x99\0\xbc\0\x91\0\xff\xff\x16\0\x90\0\xbd\0O\0\x91\0\xff\xff#\0\x90\0\\\0V\0\x16\0\\\0U\0\xbe\0z\0\xbf\0\x16\0Y\0c\0\xc0\0\x9a\0c\0'\0\x99\0#\0\xc5\0w\0\xc6\0#\0\xc7\0\xff\xff\\\0+\0\xff\xff[\0\xc8\0\xff\xff\xff\xff\xff\xff\xff\xffc\0}\0\xff\xff+\0\xc9\0\xca\0\xcb\0c\0c\0c\0\xff\xffe\0c\0f\0\xff\xff\xff\xffx\0Y\0+\0x\0\xff\xff\xff\xff\xff\xffg\0\xff\xff\xff\xffc\0\xff\xff\xff\xffg\0\xff\xff3\0\x9a\0\xff\xff\xff\xff\x99\x007\0\xff\xff\xcc\0x\x003\0h\0\xd1\0\x9c\x003\0\xff\xff7\0h\0\xff\xff\x8c\0\xa9\0t\0\xd2\0\xa8\0\x91\0:\0\xff\xff\x90\0\xd3\0\xd4\0\x8f\0\xff\xff\xff\xff\xff\xffg\0\xff\xff\x8f\0\xff\xff\xff\xff\x91\0:\0\xd5\0\x90\0\xd6\0\xff\xff\xff\xff\xff\xff\xff\xff\xa9\0\xff\xff\xd7\0\xa8\0h\0:\0\xa9\0\xd8\0\xe5\0\xa8\0\xff\xff\xff\xff\0\0\xb4\0\xff\xff\xff\xff\xb3\0\0\0\0\0\xb4\0T\0w\0\xb3\0\0\0\0\0\xff\xff\xff\xffx\0x\0\xff\xffx\0]\0\0\0\xff\xff\0\0\xff\xff\xff\xff]\0\0\0\xff\xff\xff\xffj\0\xff\xff]\0\x9c\0\xff\xff\xff\xff\0\0\xff\xff\xff\xffx\0\0\0\0\0\0\0]\0\xff\xff\xff\xff\xff\xff\xff\xffk\0\xff\xff\xb4\0t\0\0\0\xb3\0\xff\xff\xff\xff\xff\xff\xff\xff\xda\0\xff\xff\0\0\xd9\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x8f\0\0\0\xff\xff\0\0v\0r\0\xff\xffv\0s\0\xc2\0t\0t\0\xc1\0t\0\xc2\0\x8f\0\xff\xff\xc1\0\xce\0T\0\xce\0\xcd\0\xb6\0\xcd\0\0\0\0\0\xda\0v\0\xb6\0\xd9\0\xab\0\0\0w\0t\0\0\0\xc2\0\xab\0\xff\xff\xc1\0t\0\0\0\0\0\xe0\0\xe0\0\0\0\xe0\0\xe1\0\0\0\0\0\0\0\xe0\0\xe0\0\0\0\xe0\0\xe1\0\0\0\0\0\0\0\0\0T\0\0\0\0\0\0\0\x98\0\x9a\0\xe0\0\x98\0\x99\0c\0\0\0\xff\xff\xa7\0\xa9\0\xe0\0\xa7\0\xa8\0\xb2\0\xb4\0\0\0\xb2\0\xb3\0\xc0\0\xc2\0\xff\xff\xc0\0\xc1\0\x98\0u\0\xce\0\xff\xff\0\0\xcd\0\xda\0z\0\xa7\0\xd9\0\0\0\xcc\0\xce\0\xb2\0\xcc\0\xcd\0\xd8\0\xda\0\xc0\0\xd8\0\xd9\0\xc4\0\0\0\0\0\xde\0\xde\0\xc4\0\xde\0\xdf\0\0\0\xd0\0\0\0\xd0\0\0\0\xcc\0\0\0\0\0\0\0\xff\xff\xd8\0\xe0\0\xe0\0\xff\xff\xe0\0\xe1\0\xff\xff\0\0\xde\0\xff\xff\xff\xff\0\0\xff\xff\xde\0\xde\0\xff\xff\xde\0\xdf\0\xde\0\xde\0\xff\xff\xde\0\xdf\0\0\0\xe0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xde\0\xff\xff\xff\xff\xe4\0\xff\xff\xde\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\xff\xff\0\0\0\0\x80\0\0\0\0\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x81\0\0\0\0\0\0\0\0\0\0\0r\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\0\0\0\0\0\0\xff\xff\x80\0\0\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),f("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x03\0\x05\0\0\0\x03\0\x05\0\x06\0\x06\0\x07\0\x06\0\x06\0\t\0\t\0\x0e\0\t\0\t\0\n\0\n\0\x12\0\n\0\n\0\x0b\0\x0b\0\x1e\0\x0b\0\x0b\0U\0 \0(\0\x06\0 \0(\0\f\0\f\0\t\0\f\0\f\0\x10\0\x10\0\n\0\x10\0\x10\0\x11\0\x11\0\x0b\0\x11\0\x11\0^\0\0\0\x03\0\x05\0(\0s\0\x14\0\x14\0\f\0\x14\0\x14\0\x15\0\x15\0\x10\0\x15\0\x15\0\x17\0\x17\0\x11\0\x17\0\x17\0\x18\0\x18\0A\0\x18\0\x18\0C\0\x19\0\x19\0\x14\0\x19\0\x19\0\x1a\0\x1a\0\x15\0\x1a\0\x1a\0\x15\0!\0\x17\0I\0!\0\x1b\0\x1b\0\x18\0\x1b\0\x1b\0D\0\x1c\0\x1c\0\x19\0\x1c\0\x1c\0\x19\0$\0\x1a\0%\0$\0\x1a\0%\0&\0!\0E\0&\0)\0\x1b\0K\0)\0\x1b\0,\0H\0\x1c\0,\0!\0\x1c\0-\0~\0$\0-\0%\0L\0\x8c\0.\0&\0M\0.\0P\0)\0\x85\0$\0/\0%\0,\0/\0g\0&\0\x8f\x000\0-\0)\x000\0|\0j\x001\0,\0.\x001\0\x92\x004\0\x93\0-\x004\x005\0/\0\x7f\x005\x006\0.\x008\x006\x000\x008\0\x94\0\x81\0\x81\0/\x001\x009\0\x84\0\x84\x009\x004\x000\0;\0<\x005\0;\0<\x001\x006\0\x95\x008\0=\x004\0\x96\0=\0\x97\x005\0\x9c\0>\x009\x006\0>\0\x88\0\x88\0?\0;\0<\0?\0\x9d\0@\0\x9e\x009\0@\0Y\0=\0\x9f\0Y\0;\0<\0Q\0Q\0>\0Q\0Q\0\x81\0S\0=\0?\0S\0\xa0\0\xa1\0W\0@\0>\0W\0Z\0Y\0[\0Z\0?\0[\0\xa2\0Q\0a\0@\0Q\0a\0\xa3\0\0\0\x03\0\x05\0\x0f\0\x13\0`\0`\0\x06\0`\0`\0\xa4\0t\0\t\0\x0e\0t\0\xa5\0u\0\n\0\x12\0u\0Q\0A\0\x0b\0v\0C\0S\0v\0 \0`\0(\0\xa6\0W\0\xab\0\f\0t\0Z\0\xac\0[\0\x10\0I\0\xad\0w\0\xae\0\x11\0w\0D\0v\0z\0X\0X\0z\0X\0X\0\x85\0\x14\0\xaf\0\xb0\0\xb1\0v\0\x15\0E\0\xb6\0\xb7\0\xb8\0\x17\0K\0\xb9\0\x8a\0H\0\x18\0\x8a\0X\0\xba\0\x99\0X\0\x19\0\x99\0\xbb\0\x8d\0L\0\x1a\0\x8d\0\xbc\0M\0\x8e\0P\0!\0\x8e\0\\\0\\\0\x1b\0\\\0\\\0\xbd\0t\0\xbe\0\x1c\0X\0b\0\xbf\0\x9b\0b\0$\0\x9b\0%\0\xc4\0v\0\xc5\0&\0\xc6\0g\0\\\0)\0d\0\\\0\xc7\0d\0,\0j\0e\0b\0|\0e\0-\0\xc8\0\xc9\0\xca\0b\0b\0b\0.\0b\0b\0b\0\x7f\0d\0x\0\\\0/\0x\0\x81\0e\0d\0d\0d\x000\0b\0d\0e\0e\0e\x001\0\x9a\0e\0f\0\x9a\x004\0f\0\xcb\0x\x005\0d\0\xd0\0\x99\x006\0h\x008\0e\0h\0\x8a\0\xaa\0x\0\xd1\0\xaa\0\x90\x009\0f\0\x90\0\xd2\0\xd3\0\x8d\0;\0<\0f\0f\0f\0\x8e\0h\0f\0\x91\0=\0\xd4\0\x91\0\xd5\0h\0h\0h\0>\0\xa8\0h\0\xd6\0\xa8\0f\0?\0\xa9\0\xd7\0\xe4\0\xa9\0@\0i\0\xff\xff\xb3\0i\0h\0\xb3\0\xff\xff\xff\xff\xb4\0Q\0x\0\xb4\0\xff\xff\xff\xffS\0k\0y\0y\0k\0y\0W\0\xff\xffi\0\xff\xffZ\0l\0[\0\xff\xffl\0i\0i\0i\0a\0\x9a\0i\0n\0\xff\xffk\0n\0y\0\xff\xff\xff\xff\xff\xff`\0k\0k\0k\0l\0i\0k\0\xb5\0y\0\xff\xff\xb5\0l\0l\0l\0n\0\xd9\0l\0\xff\xff\xd9\0\xff\xffk\0n\0n\0n\0\x90\0\xff\xffn\0\xff\xffp\0p\0l\0p\0p\0\xc1\0{\0{\0\xc1\0{\0\xc2\0\x91\0n\0\xc2\0\xcd\0X\0\xce\0\xcd\0\xb3\0\xce\0\xff\xff\xff\xff\xda\0p\0\xb4\0\xda\0\xa8\0\xff\xffy\0{\0\xff\xff\xc3\0\xa9\0\x8a\0\xc3\0p\0\xff\xff\xff\xff\xe0\0\xe0\0\xff\xff\xe0\0\xe0\0\xff\xff\xff\xff\xff\xff\xe1\0\xe1\0\xff\xff\xe1\0\xe1\0\xff\xff\xff\xff\xff\xff\xff\xff\\\0\xff\xff\xff\xff\xff\xff\x98\0\x98\0\xe0\0\x98\0\x98\0b\0\xff\xff\x9b\0\xa7\0\xa7\0\xe1\0\xa7\0\xa7\0\xb2\0\xb2\0\xff\xff\xb2\0\xb2\0\xc0\0\xc0\0d\0\xc0\0\xc0\0\x98\0p\0\xcf\0e\0\xff\xff\xcf\0\xdb\0{\0\xa7\0\xdb\0\xff\xff\xcc\0\xcc\0\xb2\0\xcc\0\xcc\0\xd8\0\xd8\0\xc0\0\xd8\0\xd8\0\xc1\0\xff\xff\xff\xff\xdc\0\xdc\0\xc2\0\xdc\0\xdc\0\xff\xff\xcd\0\xff\xff\xce\0\xff\xff\xcc\0\xff\xff\xff\xff\xff\xfff\0\xd8\0\xdd\0\xdd\0\xe2\0\xdd\0\xdd\0\xe2\0\xff\xff\xdc\0\xe3\0h\0\xff\xff\xe3\0\xde\0\xde\0\xaa\0\xde\0\xde\0\xdf\0\xdf\0\xe4\0\xdf\0\xdf\0\xff\xff\xdd\0\xe2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe3\0\xe2\0\xe2\0\xe2\0\xff\xff\xde\0\xe2\0\xe3\0\xe3\0\xe3\0\xdf\0\xff\xff\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\0\xff\xff\xff\xffi\0\xff\xff\xff\xff\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffk\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffl\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffn\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80\0\xb5\0\xff\xff\xff\xff\x80\0\xff\xff\xff\xff\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffp\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xff\xff\xff\xff\xff\xff\xc3\0\x80\0\xff\xff\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x98\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa7\0\xff\xff\xff\xff\xff\xff\xff\xff\xb2\0\xff\xff\xff\xff\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcf\0\xff\xff\xff\xff\xff\xff\xdb\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xff\xff\xff\xff\xff\xff\xff\xff\xd8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdc\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdd\0\xe2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xde\0\xff\xff\xff\xff\xff\xff\xff\xff\xdf\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),f("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x02\0\x06\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\b\0\f\0\0\0\0\0\0\0\x11\0!\0&\0+\0\0\0\0\0\0\0\0\0-\0\0\0\0\x001\x002\x003\0\x12\0\0\0\x14\0\0\0\0\0;\0\x16\0<\0\x17\0\0\0@\0\0\0\0\0K\0X\0Y\0\x12\0\0\0Z\0\0\0\0\0^\0g\0h\0i\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0v\0\0\0\x80\0\0\0\0\0\0\0\x81\0\x8e\0\0\0\x82\0\x87\0\x93\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\0\0\x97\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\xa2\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\x99\0\0\0\0\0\x9d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\xbd\0\0\0\0\0\x9e\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\0\x14\x01\0\0\0\0\x9f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\0\x19\x01\0\0\0\0\xa5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\x1e\x01\0\0\0\0\xa7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\0.\x01\0\0\0\0\xab\0:\x01@\x01F\x01R\x01\0\0\0\0\x88\x01\x8e\x01?\0\xd0\0"),f("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0-\0\0\0\0\0\0\0\0\0\0\0\0\0<\0\0\0\0\0\0\0\x04\0\x04\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\0\x92\0\0\0\xab\0\xab\0\xab\0\xb5\0\xab\0\xab\0\0\0\xc8\0\0\0\0\0"),f("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\0\0\0%\0\0\0\0\0\0\0%\0\x1d\0\0\0\x1d\0\x1d\0%\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0I\0\0\0\0\0I\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0V\0\0\0\0\0V\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\0\0\0\0\0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0p\0\0\0\0\0p\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0}\0\0\0\0\0}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8a\0\0\0\0\0\x8a\0\x17\0\x17\0\x17\0\xba\0\0\0\0\0\x1d\0\x1d\0\xcd\0\0\0"),f("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\0\0\x01\0\x01\0\x01\0\x01\0\0\0\x01\0\x01\0\0\0\x01\0\x01\0\x01\0\0\0\0\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\n\0\x01\0\x01\0\n\0\0\0\n\0\n\0\0\0\n\0\n\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\n\0\x17\0\x01\0\n\0\n\0D\0Q\0^\0\0\0\n\0\n\0\0\0k\0x\0\0\0\x85\0\0\0\0\0\x01\0\x01\0\0\0\0\0\0\0\n\0\n\0\n\0\x01\0\n\0\n\0\x01\0\x17\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\x01\0\x17\0\x01\0\x01\0\x17\0\x01\0\0\0\0\0\n\0\n\0\x01\0\0\0\0\0\0\0\x17\0 \0\0\0\0\0 \0\0\0\0\0\0\0\x17\0\x01\0\x17\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0 \0\n\0\0\0\0\0\n\0\0\x005\0\0\0\0\x005\0\0\0\0\0L\0\0\0\0\0L\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\x005\0\0\0\0\0\0\0\0\0\0\0L\0\0\0*\x002\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Y\0\0\0\0\0Y\0\0\0\0\0\0\x002\0\0\0\x01\0\0\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\0\0Y\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0f\0\0\0\0\0f\0\0\0s\0\0\0\0\0s\0\0\0\x80\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0f\0\0\0\0\0\x8d\0\0\0s\0\x8d\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\n\0\n\0\0\0\n\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\0\n\0\n\0\0\0\n\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\0\0\n\0\xbf\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),f("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\n\0\x0b\0\x06\0\n\0\x0b\0\f\0\x11\0\x14\0\f\0\x11\0\x14\0\x15\0\x15\0\xff\xff\x15\0\x15\0\x19\0\x19\0\xff\xff\x19\0\x19\0\xff\xff\x06\0\n\0\x0b\0\xff\xff\xff\xff\xff\xff\f\0\x11\0\x14\0~\0\x1a\0\x1a\0\x15\0\x1a\0\x1a\0\x1b\0\x1b\0\x19\0\x1b\0\x1b\0\x1c\0\x1c\0!\0\x1c\0\x1c\0!\0$\0%\0&\0$\0%\0&\0)\0\x1a\0-\0/\0,\0.\0\x1b\0,\0.\x001\0b\0\x1c\x001\0!\0\x97\0\xa6\0\xb1\0$\0%\0&\x004\0\xbf\0\xcb\x004\0\xd7\0!\0\xff\xff,\0.\0$\0%\0&\x001\x005\x006\x009\x005\x006\x009\0<\0\xe4\0\xff\xff<\x004\x001\0\xff\xff\xff\xff\xff\xff=\0>\0?\0=\0>\0?\0\xff\xff4\x005\x006\x009\0\xff\xff\xff\xff\xff\xff<\0Q\0Q\0\xff\xffQ\0Q\x005\x006\x009\0=\0>\0?\0S\0W\0Z\0S\0W\0Z\0\xff\xff[\0\xff\xff=\0[\0?\0Q\0X\0X\0\xff\xffX\0X\0\\\0\\\0\xff\xff\\\0\\\0e\0\x98\0\x98\0e\0\x98\0\x98\0\x9b\0\xaa\0\xb5\0\x9b\0\xaa\0\xb5\0\xff\xffX\0\xc3\0Q\0\xcf\0\xc3\0\\\0\xcf\0\xdb\0\xff\xffe\0\xdb\0\x98\0S\0W\0Z\0\xff\xffe\0e\0e\0[\0\xff\xffe\0\xff\xff\xff\xff\xa7\0\xa7\0X\0\xa7\0\xa7\0\xff\xff\xff\xff\\\0\xff\xff\x80\0\xff\xffe\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xff\xff\xa7\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xff\xff\xff\xff\xff\xff\xff\xff\x80\0\xff\xff\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xb2\0\xb2\0\xff\xff\xb2\0\xb2\0\xc0\0\xc0\0\xff\xff\xc0\0\xc0\0\xcc\0\xcc\0\xff\xff\xcc\0\xcc\0\xff\xff!\0\xff\xff\xff\xff\xff\xff$\0%\0&\0\xb2\0\xff\xff\xff\xff\xd8\0\xd8\0\xc0\0\xd8\0\xd8\0\xff\xff\xff\xff\xcc\0\xe4\x001\0\xff\xff\xff\xff\xdc\0\xdc\0\xff\xff\xdc\0\xdc\0\xff\xff\xdd\0\xdd\x004\0\xdd\0\xdd\0\xd8\0\xde\0\xde\0\xff\xff\xde\0\xde\0\xff\xff\xff\xff\xff\xff\xff\xff5\x006\0\xdc\0\xdf\0\xdf\0\xff\xff\xdf\0\xdf\0\xdd\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xde\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\0\xff\xff\xff\xff\xff\xffQ\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0W\0Z\0\xff\xff\xff\xff\xff\xff\xff\xff[\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffX\0\xff\xff\xff\xff\xff\xff\xe2\0\\\0\xff\xff\xe2\0\xff\xffe\0\xe3\0\x98\0\xff\xff\xe3\0\xff\xff\x9b\0\xaa\0\xb5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3\0\xff\xff\xcf\0\xe2\0\xff\xff\xff\xff\xdb\0\xff\xff\xff\xff\xe3\0\xe2\0\xe2\0\xe2\0\xff\xff\xff\xff\xe2\0\xe3\0\xe3\0\xe3\0\xff\xff\xff\xff\xe3\0\xff\xff\xff\xff\xa7\0\xff\xff\xff\xff\xff\xff\xff\xff\xe2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb2\0\xff\xff\xff\xff\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdc\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdd\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xde\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe3\0"),f("\xff\x01\xff\xff\0\x01\xff\x04\xff\xff\x03\xff\x02\xff\xff\0\x03\xff\0\x02\x01\x04\xff\x02\xff\xff\0\x02\xff\x03\xff\xff\x04\xff\x03\xff\xff\x04\x02\x03\xff\xff\x04\x02\xff\0\x02\x01\x03\xff\x02\x04\xff\x04\x02\x02\xff\x03\xff\xff\0\x04\x01\x03\xff\x01\x02\xff\r\xff\f\xff\xff\r\xff\xff\f\xff\r\xff\xff\x0f\xff\x0e\xff\xff\x0f\xff\xff\x0e\xff\x0f\xff\xff\x11\xff\x10\xff\xff\x11\xff\xff\x10\xff\x11\xff\xff\x13\xff\x12\xff\xff\x13\xff\xff\x12\xff\x13\xff\xff\x15\xff\x14\xff\xff\x15\xff\xff\x14\xff\x15\xff\xff\x17\xff\x16\xff\xff\x17\xff\xff\x16\xff\x17\xff\xff\x04\x10\x05\x11\0\f\x01\r\b\x14\t\x15\n\x16\x0b\x17\x02\x0e\x03\x0f\x06\x12\x07\x13\xff\0\x03\x01\x02\xff\x05\xff\x04\xff\xff\0\x05\x01\x04\xff\x03\x05\x02\xff\xff\x03\x05\x02\x04\x05\xff\x04\xff\xff\x02\xff\0\x03\xff\x05\xff\xff\x02\x04\x01\x05\0\x03\xff")],mu=f("/home/jonathan/.opam/4.01.0"),sV=[0,1],mC=f("myocamlbuild"),aC=f("\x1b[0m"),f$=f("%d %d"),te=f(c),tA=[0,0,[0,1,[0,2,[0,3,0]]]],tN=[0,87,f('\x04\0\0\0\x10\0\0 \b\0\x14\x0b\0@\0#\0\0@\x10\0(\0\0\0\0\0\0\0\0\0\0\0,\0\0\0\x8c\0\x01\0@\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`P\x8f\xf9`\0\x10\0@\0\0\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\0\x01 \0\xc1\x02\xc0\xc0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\0\0\0\0\0\0@\x80\0\0\0\0\x03\0\0\0\0\0\0\0\x04\b\xff\x90\0\x01\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc0\0\0\0\xd8\0e\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\x05\b\xff\x96\xc0\x03,\x14\x10\x03\xbd\x8e@\0\x8c\x11\x81\xf5R\xa3\xb08\0\0\0\x1b\0\f\xb0\0\0\x0e\xf6;O\xfe\xf5\xc6\xcf\xdf{\xcf\xc0 \0\0\0`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\x01\x80\0\0\0\0\0\0\x02\x04\x7f\xcb\0\0\x80\x02\0\0\0\x01`\0\0\b\0\0\t\0\0B\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04 \0\x80\0\x80\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\x80\0\0\0\f\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0`\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\x03\xbd\x8e\xc0\0\x8c\x11\x83\xf5V\xa3\xf0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\x06\xc0\x03,\0\0\x03\xbd\x8e\xc0\0\x8c\x11\x83\xf5R\xa3\xb08\0\0\0\x1b\0\f\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x03\0\0\x14\0\0\0\0\0\0\0\0\0\0\0@\0\0\x1c\0\0\0\r\x80\x06X\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\xecv\0\x04d\x8c\x9f\xae\x95\x1f\x80\0\x04\0\0\xc0\0\0\0\x02\0\0\0\x88\0\0\0\0@\x02\xc4\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\x01\0\x01\xc0\0\0\0\xd8\0e\x82\0\0\x03\x80\0\0\x01\xb0\0\xcb\0\0\0\xefc\x90\0#\x04`\xfdT\xac\xec\x0e\0\0\0\x06\xc0\x03,\0\0\0\0\0\0\0\0\0\0\0\0\0\x07{\x1d\x80\x01\x18#\x07\xea\xa5G\xe0p\0\0\x006\0\x19`\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc0\0\0\0\xd8\0e\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\xbd\x8e@\0\x8c\x11\x83\xf5P\xb3\xb0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\0\0\0l\x002\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xd0\xc7 \0@\b\xc0\xd2\xa8P\xd8\x1c\0\0\0\r\x80\x06X \0\0\0\0\0\0\0\0\0\0\0\0\0p\0\0\x006\0\x19`\x80\0\0\0\0\0\0\0\0\0\0\0\0:\x18d\0\b\x01\x18\x1aU\n\x1b\x03\x80\0\0\x01\xb0\0\xcb\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x008\0\0\0\x1b\0\f\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\0\0\0l\x002\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04@\0\0\0\0\0\0 \0\0\0\x80\0\x18\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\x18\0\0\0\0\0\0p\0\0\x006\0\x19`\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\x06\xc0\x03,\x10\0\0\0\0\0\0\0\0\0\0\0\0\x008\0\0\0\x18\0\0\xa0\0\0\x02\x80\b\0\x02\0B\x04\x03\0\x86\x80\0\0\0\0\0\0\0\0\0\0\0\0d\0\0\x90\0`\x81 `\x01\x80\0\0\x01\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03 \0\x04\x80\x03\x04\t\x03\0\f\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\0\0&\0\x18 H\x18\0\0\x02\0\0`\0\0\0\0\0\0\0D\0\0\0\0 \0\0\0\x01\x80\0\0\x01\x80\0\0\0\0\0\0\x01\x10\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0D\0\0\0\0\0\0\0\0\0\0\b\0\x01\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x12\0\f\x10\x04\b\x02\x11\xc0\x94\0\xf8\xba\x80\0\x01 \x04#\x81(\x01\xf1u\0\0\x02@\bG\x02P\x03\xe2\xea\0\0\x04\x80\0\x80\0 \x03\x84\x04\0\0\b\0\x01\0\0@\x07\b\b\0\0\x10\0B8\x12\x80\x1f\x17T\0\0$\0\0\0\0\0\0\0\0\0\0\0\x01\b\xe0J\0|]@\0\0\x90\0p\0\0\x006\0\x19`\x80\x80\x04\0\0\0\0\0\x04\0\0\x01\0\x01\xc0\0\0\0\xd8\0e\x82\0\0@\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x03`\x01\x96\b\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x01\0\x1c  \0\0@\x01\b\xf4k\xfe|]D\0\x10\x90\0\0\0\0\0\0\0\0\0\0\0\0 \x10\b\0\xe1\x01\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0!\x1c\t@\x0f\x8b\xa8\0\0\x12\0\x06\0\x80\0\x06\b \0 \0P\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\x02\x11\xc0\x94\0\xf8\xba\x80\0\x01 \x04#\x81(\x01\xf1u@\0\x02@\bG\x02P\x03\xe2\xea\0\0\x04\x80\x10\x8e\x04\xa0\x07\xc5\xd4\0\0\t\0\0\0\0\0\x02@\x01\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\x04\b\0\0\x008\0\0\0\x18\0\0\xa0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0@\0 @\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\x07\0\x80\0\x03`\x01\x96\b\b\0\0\0\0\0\0\0\0\0\x01\0\0\x1c\0\0\0\r\x80\x06X\0\0\0\0\0\0\0\0\0\x04\0\0\0\x02\x11\xc0\x94\0\xf8\xba\x80\0\x01 \0\xe0\0\0\0l\x002\xc1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0i|\x89@/\x8f\xe8aP:l\0\0\0\0\0\0\0\0\0\0\x01%\x8eS\xff\xbd1#\xa7Z\xe1\xb0\0\0\0\0\x18\0\0\0\0\0\x04\x969O\xfe\xf5\xc4\x8e\x9dk\x86\xc4#\x81(\x01\xe1e\0\0\x02@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\xc7)\xff\xde\x98\x91\xd2\xadp\xd8\x1c\0\0\0\r\x80\x06X\0\0\x008\x01\0\0\x18\0\x04\xa0 \x04\0p\0\0\x006\0\x19`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\x01\0\0\x03\x80\0\0\x01\xb0\0\xcb\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\x969O\xfe\xf4\xc4\x8e\x9dk\x86\xc0\0\0\0\0`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Ic\x94\xff\xef|H\xe9\xd6\xb8l\0\0 \0\x06\0\0\0\0\0\0\0\x04@\0\0\0\x02\0\0\0\x01\b\xe0J\0xY@\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\t\fr\x97\xfd\0\x88\x1d*U\r\x80@\0\x10\x03\xc2\x02\0\0\x04\0$\xb1\xca\x7f\xf7\xa6$t\xeb\\6Hc\x94\xbf\xe8\x04@\xe9V\xa8l\x02\0\0\x80\x1e\x10\x10\0\0 \x01!\x8eR\xff\xa0\x11\x03\xa5Z\xa1\xb0\0\0\0\0\0\0\0\0\0\0\0\x10\0\x04\0\xf0\x80\x80\0\x01\0\t\fr\x97\xfd\0\x88\x1d*\xd5\r\x80@\0\x10\x03\xc2\x02\0\0\x04\0$1\xca_\xf4\x02 t\xabT6\x01\0\0@\x0f\b\b\0\0\x10\0\x90\xc7(\x7f\xd0\b\x81\xd2\xadP\xd8\x04\0\x01\0<  \0\0@\x02C\x1c\xa5\xff@"\x07J\xb5C`\x10\0\x04\0\xf0\x80\x80\0\x01\0\t\fr\x97\xfd\0\x88\x1d*\xd5\r\x80@\0\x10\x03\xc2\x02\0\0\x04\0$1\xca_\xf4\x02 t\xabT6\x01\0\0@\x0f\b\b\0\0\x10\0\x90\xc7)\x7f\xd0\b\x81\xd2\xadP\xd8\x04\0\x01\0<  \0\0@\x02C\x1c\xa5\xff@"\x07J\xb5C`\x10\0\x04\0\xf0\x80\x80\0\x01\0\t\fr\x97\xfd\0\x88\x1d*\xd5\r\x80@\0\x10\x03\xc2\x02\0\0\x04\0$1\xca_\xf4\x02 t\xabT6\x01\0\0@\x0f\b\b\0\0\x10\0\x90\xc7)\x7f\xd0\b\x81\xd2\xadP\xd8\x04\0\x01\0<  \0\0@\x02C\x1c\xa5\xff@"\x07J\xa5C`p\0\0\x006\0\x19`\x80\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\b\0\0\0\0\x10\x8e\x04\xa0\x07\xc5\xd4\0\0\t\0\0\0\0\0\0\0\0\0@\0\0B8\x12\x80\x1e\x16P\0\0$\0\0\0\0\0\0\0\0\0\0\0\x02C\f\0\x01\0"\x03\n\x81C`\0\0\0\0\0\0\0\0\0\0\t\fp\x97\xfd\0\x88\x1c*\xd5\r\x80@\0\x10\x03\xc2\x02\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0Hc\x94\xbf\xe8\x04@\xe9V(l\x02\0\0\x80\x1e\x10\x10\0\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\x04#\x81(\x01\xf1u\0\0\x02@\0\x10\0\0\0\0\0\0@\b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\b\xe0J\0|]@\0\0\x90\0\0\0\0\0\0\0\0\x04\0\0\x04#\x81(\x01\xe1e\0\0\x02@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\0\0\0\0\0\0\0\0\0\0\x02\0\0`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\x01\b\xe0J\0xY@\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\bG\x02P\x03\xc2\xca\0\0\x04\x80$0\xc8\0\x10\x02 4\xa8\x146!\x1c\t@\x0f\x0b(\0\0\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02C\x1c\xa5\xff@"\x07J\xb5C`\x10\0\x04\0\xf0\x80\x80\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\x80\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\b\0\x16\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\x0f\0\0\x003d\x01\xd6\x10\bx\x0e\0\0\0\x06\xc0\x03,\0\0\0\x1c\0\0\0\r\x80\x06X\0\0\0x\0\0\x01\x18 \x02\xa0\x80G\xc0p\0\0\x006\0\x19`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x80\0\0\x01\x80\0\n\0\0\0\0\0\0\0\0\0\0\0 \0\0\x0e\0\0\0\x06\xc0\x03,\0\0\0\0\0\0\0\0\0\0\0\0\0\x008\0\0\0\x1b\0\f\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\b\x01\0\x10\x04\x02\x1e\x03\x80\0\0\t\xb0\0\xcb\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0@\b\0\x80 \x10\xf0\x1c\0\0\0M\x80\x06X\0\0\0\0\0\0\0\0\0\0\0\0\0\0p\0\0\x016\0\x19`\0\0\0\xe0\0\0\0l\x002\xc0\0\0\x02\0\0\0\b\x01\0\x10\x04\x02\x1e\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0 \x04\0@\x10\bx\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\x80\x10\x01\0@\x01\xe08\0\0\0\x1b\0\f\xb0@@\0\x80\0\0\x02\0@\x04\x01\0\x86\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\x04\0+\x04\x04\xc0\x10\x80(\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0,\0\x02\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\xf0\0\0\x036@\x1da\0\x87\x81\0\0\0\x04\0\x80\b\x02\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0!\x1c\t@\x0f\x8b\xa8\0\0\x12\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\x80\x10\x01\0@\x01\xa0\0\0\0\0\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\0\0\0\0\0\0\x01\0\x02\xc0\0 \0 \0\0\0\0\0\0\0\0@\0@\0\x07\0\0\0\x03`\x01\x96\b\b\0\x10\0\0\0@\b\0\x80 \x10PB\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0p\0\0\x006\0\x19`\x80\x80\x01\0\0\0\x04\0\x80\b\x02\x01\x05\0\0\0\0\0\x01\0\0\0\0\0\x10\x8e\x04\xa0\x07\xc5\xd4\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0 \0\x10\0\xac\x10\x11\0B\0\xa0@\0\0\x01\0 "\0\x84\x01@\0\0\0\0\0\0\x10 \0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc0\0\0\0\xc0\0\x05\0\0\0\x04\0\0\0\x10\x02\x02 \x18\0\x14\0\0\0\0\0\0\x01\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0B\0\b\0\b\0\0\0\0\0\0@\0\0\x01\0 "\0\x80\x01@\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x04\0\x80\x88\x02\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0B8\x12\x80\x1f\x17P\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x18 \0\0\0\0\0\0\0\0\0\0@\0\0\0\0\x04#\x81(\x01\xf1u\0\0\x02@\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x10\x02\0 \b\x004\x03\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c%\xfe@\0\x05\x004\0\x02\x11\xc0\x94\0\xf8\xba\x80\0\x01 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x01\0\x80\x0e\x10\x10\0\0 \x01%\x8eS\xff\xbd1#\xa5Z\xe1\xb0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\xc0\0\0\0\xc0\0\b\0\x02\0\x01\x80\0\0\x01\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x80B8\x12\x80\x1f\x17P\0\0$\0\0\0\0\0\0\0\0\x80\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0!\x1c\t@\x0f\x8b\xa8\0\0\x12\0\0\0\0\0\0\0\0@\0\x10\0\f\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\x10\0\0\0@\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\x84p%\0<,\xa0\0\0H\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0 \0\b\0\xe1\x01\0\0\x02\0\0\0\0\0\0\0\0\0 \x04\0\x10\x8e\x04\xa0\x07\xc5\xd4\0\0\t\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x008\0\0\0\x1b\0\f\xb0\0\0\0\0\0\0\0\0\0\b\0\0\0\x04#\x81(\x01\xf1u\0\0\n@\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\b\0\0\x10\x04\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\x80\0\x01\0@\0\xa0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\xe0\0\0\0l\x002\xc1\x01\0\x02\0\0\0\b\0\0\x10\x04\x02\n\0\0\0\0\t\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0@\0\0\x80 \0P\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\x80\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\x10\0\0\x80\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\x80\0\x04\b\0@\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0')],agR=[0,[0,f(kx),5],[0,[0,f(pd),4],[0,[0,f(xW),3],[0,[0,f(xl),2],[0,[0,f(pr),1],[0,[0,f(y3),0],0]]]]]],agS=[0,f(gh),7],agT=[0,[0,f(kE),22],[0,[0,f(ye),21],[0,[0,f(ym),20],[0,[0,f(yz),19],[0,[0,f("preserving"),18],[0,[0,f(xB),15],[0,[0,f(yd),11],[0,[0,f("taking"),10],[0,[0,f(kF),9],[0,[0,f(pg),8],[0,agS,agR]]]]]]]]]]],agU=[0,f(yA),23],agV=[0,[0,f(xJ),37],[0,[0,f(xM),36],[0,[0,f(xa),35],[0,[0,f(pe),34],[0,[0,f(pq),33],[0,[0,f(xu),32],[0,[0,f(ko),31],[0,[0,f(h0),30],[0,[0,f(hY),26],[0,[0,f(ky),24],[0,agU,agT]]]]]]]]]]],agW=[0,f("fact"),38],agX=[0,[0,f(xt),51],[0,[0,f(y2),49],[0,[0,f(x2),47],[0,[0,f(y_),46],[0,[0,f(pE),45],[0,[0,f(kA),44],[0,[0,f(pf),43],[0,[0,f(pm),42],[0,[0,f(xg),40],[0,[0,f(pG),39],[0,agW,agV]]]]]]]]]]],agY=[0,f(y5),52],m_=f("\x01"),agZ=[0,f("virtual"),[0,f("when"),[0,f(xl),[0,f(pr),[0,f("mod"),[0,f("land"),[0,f("lor"),[0,f("lxor"),[0,f("lsl"),[0,f("lsr"),[0,f("asr"),0]]]]]]]]]]],ag0=[0,f("or"),[0,f("private"),[0,f(xB),[0,f("sig"),[0,f("struct"),[0,f(kF),[0,f(pg),[0,f(hM),[0,f("try"),[0,f(gh),[0,f(pd),agZ]]]]]]]]]]],ag1=[0,f("initializer"),[0,f("lazy"),[0,f(hY),[0,f(ky),[0,f("method"),[0,f("module"),[0,f(yA),[0,f("new"),[0,f("object"),[0,f("of"),[0,f(kE),ag0]]]]]]]]]]],ag2=[0,f("exception"),[0,f("external"),[0,f(h2),[0,f(xa),[0,f(pq),[0,f(yn),[0,f("functor"),[0,f(ko),[0,f(h0),[0,f("include"),[0,f("inherit"),ag1]]]]]]]]]]],t3=f("\xce\xb1"),t6=f(y7),t7=f(y7),nj=f("/home/jonathan/Applications/firefox"),cF=[2,0],jC=[0,f(b5),f(bJ),f(b4),f(b$),f(bd),f(b3),f(b2),f(bK),f(cV),f(bo),f(ce),f(ca),f(cb),f(bP),f(b1),f(b6),f(b_),f(b8),f(cU),f(b7),f(bM),f(a3)],uS=[0,f(x1),f(a3),f(ca),f(b4),f(b3),f(ce),f(cb),f(bd),f(b7),f(b$),f(b5),f(bo),f(b8),f(bK),f(b_),f(b6),f(b2),f(cV),f(xq),f(bP),f(bJ),f(cU),f(b1)],uT=[0,f(bJ),f(bM),f(a3)],uU=[0,f(b1),f(cU),f(bJ),f(bP),f(xq),f(bM),f(cV),f(b2),f(b6),f(b_),f(bK),f(b8),f(bo),f(b5),f(b$),f(b7),f(bd),f(cb),f(ce),f(b3),f(b4),f(ca),f(a3),f(x1)],uV=[0,f(ca),f(b4),f(b3),f(ce),f(cb),f(bd),f(b7),f(b$),f(b5),f(bo),f(b8),f(bK),f(b_),f(b6),f(b2)],nN=[0,f(b5),f(bJ),f(b4),f(b$),f(bd),f(b3),f(b2),f(bK),f(cV),f(bo),f(ce),f(ca),f(cb),f(bP),f(b1),f(b6),f(b_),f(b8),f(cU),f(b7),f(bM),f(a3)],nO=[0,f(b1),f(cU),f(bJ),f(bP),f(bM),f(cV),f(b2),f(b6),f(b_),f(bK),f(b8),f(bo),f(b5),f(b$),f(b7),f(bd),f(cb),f(ce),f(b3),f(b4),f(ca),f(a3)],vw=f("\xe2\x82\x80"),vg=[0,f(b5),f(bJ),f(b4),f(b$),f(bd),f(b3),f(b2),f(bK),f(cV),f(bo),f(ce),f(ca),f(cb),f(bP),f(b1),f(b6),f(b_),f(b8),f(cU),f(b7),f(bM),f(a3)],vh=[0,f(b1),f(cU),f(bJ),f(bP),f(bM),f(cV),f(b2),f(b6),f(b_),f(bK),f(b8),f(bo),f(b5),f(b$),f(b7),f(bd),f(cb),f(ce),f(b3),f(b4),f(ca),f(a3)],e3=[4,0],n2=f(c),wN=[0,0,0],bn=f("::toplevel.mz");dI(11,qw);dI(8,qu);dI(7,qv);dI(6,o);dI(5,[0,f("Division_by_zero")]);dI(4,cX);dI(3,di);dI(2,cf);dI(1,lR);var
Bp=[0,f("Out_of_memory")],zO=f("%,"),zN=f("really_input"),zM=f("input"),zL=[0,0,[0,6,0]],zJ=[0,0,[0,7,0]],zI=f("output"),zG=[0,1,[0,3,[0,4,[0,7,0]]]],zF=f(xV),zE=f(bp),zC=f(hM),zD=f(h2),zB=f("char_of_int"),zz=f("Pervasives.Exit"),zQ=f("Pervasives.do_at_exit"),zS=f("Array.blit"),zR=f("Array.sub"),zX=f("List.map2"),zY=f("List.iter2"),zZ=f("List.fold_left2"),z0=f("List.for_all2"),z1=[0,0,0],z2=f("List.combine"),z3=[0,f("list.ml"),h5,11],zV=f("nth"),zW=f("List.nth"),zU=f("tl"),zT=f(xj),z7=f(xy),z8=f(yY),z9=f(xh),z_=f(yo),z6=f(xO),z5=f("\\'"),z4=f("Char.chr"),Ac=f("String.contains_from"),Ab=f(c),Aa=f("String.blit"),z$=f("String.sub"),Ag=f(c),Af=f("Lexing.lex_refill: cannot grow buffer"),Al=f("Set.remove_min_elt"),Am=[0,0,0,0],An=[0,0,0],Ah=f(ks),Ai=f(ks),Aj=f(ks),Ak=f(ks),As=f("Map.remove_min_elt"),At=[0,0,0,0],Au=[0,f("map.ml"),270,10],Av=[0,0,0],Ao=f(kk),Ap=f(kk),Aq=f(kk),Ar=f(kk),Aw=f("Queue.Empty"),Ay=f("CamlinternalLazy.Undefined"),AC=[0,f(w9),53,12],AD=[0,0],AE=[0,f(w9),82,12],AB=f("Stream.Failure"),AG=f("Buffer.add_substring"),AF=f("Buffer.add: cannot grow buffer"),AW=f(c),AX=f(c),A0=f(xV),A1=f(xT),A2=f(xT),AY=f(kn),AZ=f(kn),AV=f(yp),AT=f("neg_infinity"),AU=f("infinity"),AS=f(bp),AR=f("printf: bad positional specification (0)."),AQ=f("%_"),AP=[0,f("printf.ml"),x0,8],AN=f(kn),AO=f("Printf: premature end of format string '"),AJ=f(kn),AK=f(" in format string '"),AL=f(", at char number "),AM=f("Printf: bad conversion %"),AH=f("Sformat.index_of_int: negative argument "),Be=f(c),Bf=f(e8),Bb=f(pb),A7=f(x9),A8=f(pb),A$=f(xR),A9=f(x9),A_=f(xR),A6=[0,f(pb)],A4=f("Arg.Stop"),Bj=f(c),Bk=f(", %s%s"),Bq=f("Out of memory"),Br=f("Stack overflow"),Bs=f("Pattern matching failed"),Bt=f("Assertion failed"),Bu=f("Undefined recursive module"),Bl=f("(%s%s)"),Bm=f(c),Bn=f(c),Bo=f("(%s)"),Bi=f(pz),Bg=f(o8),Bh=f(py),Bv=f(yQ),Bz=[0,0],agP=f("OCAMLRUNPARAM"),agN=f("CAMLRUNPARAM"),Bx=f(c),BX=f("bad box format"),BY=f("bad box name ho"),B0=f(yy),BZ=f(yy),B1=f(c),B2=f(c),BW=f(c),BV=f("bad integer specification"),BU=f("bad format"),BR=f(" (%c)."),BT=f("%c"),BS=f("Format.fprintf: %s '%s', giving up at character number %d%s"),BM=[3,0,3],BN=f(bp),BI=f(kH),BJ=f("</"),BF=f(kH),BG=f(xS),BD=f(e8),BA=f("Format.Empty_queue"),BB=[0,f(c)],CH=f("end of input not found"),CI=[0,f(pc),1435,26],CG=f("scanf: bad input at char number %i: '%s'"),CE=f("a boolean"),CD=f("the character %C cannot start a boolean"),CA=f("bad character hexadecimal encoding \\%c%c"),Cz=f("bad character decimal encoding \\%c%c%c"),Cy=[0,f(pc),712,9],Cq=f("digits"),Cr=f("character %C is not a valid %s digit"),Co=f("decimal digits"),Cp=f("character %C is not a decimal digit"),Cm=f("0b"),Cn=f("0o"),Ck=[0,f(pc),545,11],Cl=f(xd),Ch=f(h2),Ci=f(hM),Cj=f("invalid boolean %S"),Cf=f(c),Cg=f("looking for one of range %S, found %C"),Ce=f("format read '%s' does not match specification '%s'"),Cd=f("looking for %C, found %C"),Cc=f("no dot or exponent part found in float token"),Cb=f("scanf: premature end of format string '%s'"),Ca=f("scanf: bad conversion %%%C, at char number %i in format string '%s'"),B$=f("scanning of %s failed: premature end of file occurred before end of token"),B_=f("scanning of %s failed: the specified length was too short for token"),B9=f("illegal escape character %C"),B6=f(ct),B8=f("Scanf.Scan_failure"),Ct=f("binary"),Cv=f("octal"),Cx=f("hexadecimal"),CB=f("a Char"),CC=f("a String"),CP=[0,f("camlinternalOO.ml"),yL,50],CO=f(c),CJ=f("CamlinternalOO.last_id"),Dp=[0,1,[0,3,[0,5,0]]],Do=f("%s%06x%s"),Dn=f("Filename.chop_suffix"),C_=f(c),C7=f(yK),C6=f(".\\"),C5=f(yV),C4=f("..\\"),CW=f(yK),CV=f(yV),CR=f(c),CQ=f(c),CS=f(hW),CT=f(dh),agL=f("TMPDIR"),CY=f("/tmp"),CZ=f("'\\''"),C2=f(hW),C3=f(xF),agJ=f("TEMP"),C8=f(bp),Db=f(hW),Dc=f(dh),Df=f("Cygwin"),Dg=f(kd),Dh=f(el),Di=[0,f("filename.ml"),189,9],Dt=f("Js.Error"),Du=f(xm),Dv=f("Buf.extend: reached Sys.max_string_length"),DX=[0,f(o3),72,32],DU=[0,f(o3),72,32],DQ=f("NaN"),DR=f("%.16g"),DT=f("%.17g"),DS=f(".0"),DO=f("Infinity"),DP=f("-Infinity"),DK=f(hM),DL=f(h2),DJ=f("null"),DD=f(xy),DE=f(yY),DF=f(xh),DG=f("\\f"),DH=f(yo),DI=f('\\"'),DC=f(xO),DA=f("src=%S start=%i len=%i\n%!"),DB=f("oops"),Dz=f("\\u00"),Dw=[0,f(o3),72,32],Dy=[0,f(o1),f(o$),f(pi),f(o6),f(o2),f(c),f(c),f(c),f(c),f(c),f(c)],DW=[0,f(o1),f(o$),f(pi),f(o6),f(o2),f(c),f(c),f(c),f(c),f(c),f(c)],DZ=[0,f(o1),f(o$),f(pi),f(o6),f(o2),f(c),f(c),f(c),f(c),f(c),f(c)],D0=[0,f("packedIntArray.ml"),182,6],D4=[0,f(po),yu,6],D2=[0,f(po),ac,4],D3=[0,f(po),283,4],D6=[0,f("tableInterpreter.ml"),84,1],D5=f("TableInterpreter.Accept"),D7=f(c),D8=f("Utf8.MalFormed"),Ek=[0,f("ulexing.ml"),31,25],D9=f("Ulexing.Error"),D_=f("Ulexing.InvalidCodepoint"),Et=[0,f(px),433,8],Es=[0,f(px),303,2],Eo=[0,f(px),x3,2],Ez=f(pz),EA=f("%ld"),EB=f("%Ld"),EC=f("%nd"),ED=f("%C"),EE=f("%B"),EF=f(o8),EJ=[0,f(h1),416,4],EK=[0,f(h1),514,4],EI=[0,f(h1),215,6],EH=[0,f(h1),y8,4],EG=[0,f(h1),170,6],FZ=f("-c"),F0=f(w_),F1=f(w_),EP=f("E2BIG"),ER=f("EACCES"),ES=f("EAGAIN"),ET=f("EBADF"),EU=f("EBUSY"),EV=f("ECHILD"),EW=f("EDEADLK"),EX=f("EDOM"),EY=f("EEXIST"),EZ=f("EFAULT"),E0=f("EFBIG"),E1=f("EINTR"),E2=f("EINVAL"),E3=f("EIO"),E4=f("EISDIR"),E5=f("EMFILE"),E6=f("EMLINK"),E7=f("ENAMETOOLONG"),E8=f("ENFILE"),E9=f("ENODEV"),E_=f("ENOENT"),E$=f("ENOEXEC"),Fa=f("ENOLCK"),Fb=f("ENOMEM"),Fc=f("ENOSPC"),Fd=f("ENOSYS"),Fe=f("ENOTDIR"),Ff=f("ENOTEMPTY"),Fg=f("ENOTTY"),Fh=f("ENXIO"),Fi=f("EPERM"),Fj=f("EPIPE"),Fk=f("ERANGE"),Fl=f("EROFS"),Fm=f("ESPIPE"),Fn=f("ESRCH"),Fo=f("EXDEV"),Fp=f("EWOULDBLOCK"),Fq=f("EINPROGRESS"),Fr=f("EALREADY"),Fs=f("ENOTSOCK"),Ft=f("EDESTADDRREQ"),Fu=f("EMSGSIZE"),Fv=f("EPROTOTYPE"),Fw=f("ENOPROTOOPT"),Fx=f("EPROTONOSUPPORT"),Fy=f("ESOCKTNOSUPPORT"),Fz=f("EOPNOTSUPP"),FA=f("EPFNOSUPPORT"),FB=f("EAFNOSUPPORT"),FC=f("EADDRINUSE"),FD=f("EADDRNOTAVAIL"),FE=f("ENETDOWN"),FF=f("ENETUNREACH"),FG=f("ENETRESET"),FH=f("ECONNABORTED"),FI=f("ECONNRESET"),FJ=f("ENOBUFS"),FK=f("EISCONN"),FL=f("ENOTCONN"),FM=f("ESHUTDOWN"),FN=f("ETOOMANYREFS"),FO=f("ETIMEDOUT"),FP=f("ECONNREFUSED"),FQ=f("EHOSTDOWN"),FR=f("EHOSTUNREACH"),FS=f("ELOOP"),FT=f("EOVERFLOW"),FU=f("EUNKNOWNERR %d"),EQ=f("Unix.Unix_error(Unix.%s, %S, %S)"),EL=f(yN),EM=f(c),EN=f(c),EO=f(yN),FW=f("0.0.0.0"),FX=f("127.0.0.1"),agE=f(pt),agD=f("::1"),Gd=f(c),Ge=f(c),Gr=f(c),Gq=f("Str.group_end"),Gl=[0,92],Gn=f("\\( group not closed by \\)"),Gm=[0,f(xb),y6,10],Go=f("[ class not closed by ]"),Gp=f("spurious \\) in regular expression"),Gh=f("too many \\(...\\) groups"),Gg=f("too many r* or r+ where r is nullable"),Gi=f(c),Gj=f(c),Gf=[0,f(xb),yG,11],GH=[0,1],GD=f(c),GE=f(el),GF=f(c),GG=f(dh),agA=f(c),agB=f("bash -c "),GC=f(c),GA=f(c),Gz=f(o8),Gx=f(",@ "),Gw=f("@[<hv0>@[<hv2>{.@ "),Gy=f("@]@ .}@]"),Gv=f("My_std.Set.Make(M).Found"),Gs=f("My_std.Exit_OK"),Gt=f("My_std.Exit_with_code"),GB=f(el),GO=[0,f(xC),113,80],GN=[0,f(xC),ek,30],GJ=f("%s > '%s'"),GK=f("Error while running: %s"),GL=f("out"),GM=f(xx),Hh=f("# Target: %s, tags: { %a }\n"),Hj=f(c),Hi=f("%s%s@."),Hk=f("%s\n%!"),Hf=f(yU),Hg=f(", %s"),Hd=f("%a%a%!"),Ha=f(bN),Hb=f("%a %-4d (%-4d) %a %s %s %s"),Hc=f("%a%!"),G$=[0,f("ocamlbuild/display.ml"),175,2],G9=f(c),G_=f("%*s"),G8=f("%02d:%02d:%02d"),GW=f(kd),GX=f("tput cols"),GV=f("\r"),GU=f("\x1b[K"),GZ=f(yb),G0=f("STARTING"),G1=f(ct),G2=f(dh),G3=f(kw),G4=f(xF),G5=f("*"),G6=f(b9),Hm=f("@]@."),Hn=f("@[<2>"),Ho=f(el),Hp=f("'%s'"),Hq=f("Glob_ast.Parse_error"),Hr=[0,62,0],Hs=[0,gc,[0,44,0]],Ht=f("Ambiguous ** pattern not allowed unless surrounded by one or more slashes"),Hu=f("Unexpected character %C in glob pattern"),Hv=f("Unexpected character %C in string"),Hw=[3,[0,45,45]],HQ=f("Unexpected token %s in atomizer"),HP=f("Unexpected token, expecting %s, got %s"),HO=f("Trying to unput token %s while %s is active"),HM=[1,[3,[0,47,47]]],HN=[1,0],HL=f(c),HK=[0,f("ocamlbuild/glob.ml"),pu,8],HH=f(" %d"),HG=f("%d %C {"),HI=f(" }\n%!"),Hx=f("AND"),Hy=f("OR"),Hz=f("NOT"),HA=f("LPAR"),HB=f("RPAR"),HC=f("TRUE"),HD=f("FALSE"),HE=f("EOF"),HF=f("ATOM"),HJ=f("Glob.Brute.Too_hard"),HU=f("Expecting colon followed by space-separated module name list"),HV=f("Expecting space-separated strings terminated with newline"),HW=f("Expecting (comma|blank)-separated strings (1)"),HX=f("Expecting (comma|blank)-separated strings (2)"),HY=f(c),HZ=f(yi),H0=f(c),H1=f(yi),H2=f("Patterns are not allowed in this pathname (%%(%s:%s) only in ~prod)"),H3=[0,ps,[0,f(c),0]],H4=f("Bad pathanme scheme"),HR=f("Lexers.Error"),H5=f("%s(%s)"),Ih=f("<virtual %s>"),If=f(el),Ig=f("''"),Ip=f("Exit code %d while executing this command:@\n%s"),Iq=f(el),In=f("jobs < 0"),Io=[0,0,0],Im=f(c),Ii=f(c),Ij=f(c),Ic=f(el),Id=f(".exe"),Ia=f("no solver for the virtual command %S (setup one with Command.setup_virtual_command_solver)"),Ib=f("the solver for the virtual command %S has failed finding a valid command"),H_=f(c),H7=f("PATH"),H8=f(el),H9=f("$PATH: "),H6=f("no_tag_handler"),Ir=f("/bin"),It=f("/lib/ocaml"),Iu=f("/stublibs"),Iv=f("/man"),Iw=f(c),Ix=f("ld -r"),Iy=f(" -o "),Iz=f(b9),IA=f(xx),agy=f("OCAMLLIB"),Ma=f(c),Jh=[1,f("jocamlc")],Ji=[1,f("jocamlopt")],Jj=[1,f("jocamldep")],Jk=[1,f("jocamlyacc")],Jl=[1,f("jocamllex")],Jm=[1,f("jocamlmklib")],Jn=[1,f("jocamlmktop")],Jo=[1,f("jocamlrun")],IS=f(yH),IT=f(yH),IU=f("Can't find tool: %s"),IQ=f(xP),IR=f(yB),IB=f("ocamlbuild "),ID=f(xz),IG=f("sanitize.sh"),IV=[0,f("ocamlc"),[0,f("ocamlopt"),[0,f("ocamldep"),[0,f("ocamldoc"),[0,f("ocamlyacc"),[0,f(xP),[0,f("ocamllex"),[0,f("ocamlmklib"),[0,f("ocamlmktop"),[0,f(yB),0]]]]]]]]]],IW=[6,f("OCAMLC")],IX=[6,f("OCAMLOPT")],IY=[6,f("OCAMLDEP")],IZ=[6,f("OCAMLDOC")],I1=[6,f("OCAMLLEX")],I2=[6,f("OCAMLMKLIB")],I4=[6,f("OCAMLMKTOP")],Ja=[0,[0,f("quiet"),0],0],Jd=f("_log"),Je=[0,[0,f(".svn"),[0,f("CVS"),0]],0],Jf=f("*invalid-dummy-string*"),Jr=f(" Stop argument processing, remaining arguments are given to the user program"),Js=f("--"),Ju=f("<command> Set the ocamlrun tool"),Jv=f("-ocamlrun"),Jx=f("<command> Set the ocamlmktop tool"),Jy=f("-ocamlmktop"),JA=f("<command> Set the ocamllex tool"),JB=f("-ocamllex"),JD=f("<command> Set the menhir tool (use it after -use-menhir)"),JE=f("-menhir"),JG=f("<command> Set the ocamlyacc tool"),JH=f("-ocamlyacc"),JJ=f("<command> Set the OCaml documentation generator"),JK=f("-ocamldoc"),JM=f("<command> Set the OCaml dependency tool"),JN=f("-ocamldep"),JP=f("<command> Set the OCaml native compiler"),JQ=f("-ocamlopt"),JS=f("<command> Set the OCaml bytecode compiler"),JT=f("-ocamlc"),JV=f("<command> Display path to the tool command"),JW=f("-which"),JY=f(" Display the install library directory"),JZ=f(yg),J0=f("<path> Set the install binary directory"),J1=f("-install-bin-dir"),J2=f("<path> Set the install library directory"),J3=f("-install-lib-dir"),J4=f("<path> Set build directory (implies no-links)"),J5=f("-build-dir"),J6=f("<N> Allow N jobs at once (0 for unlimited)"),J7=f("-j"),J8=f(" Use ocamlfind to call ocaml compilers"),J9=f("-use-ocamlfind"),J_=f(" Use jocaml compilers instead of ocaml ones"),J$=f("-use-jocaml"),Ka=f(" Use menhir instead of ocamlyacc"),Kb=f("-use-menhir"),Kc=f(" Display executed commands the old-fashioned way"),Kd=f("-classic-display"),Ke=f(" Fail if something needs to be rebuilt"),Kf=f("-nothing-should-be-rebuilt"),Kg=f(" Do not generate sanitization script"),Kh=f("-no-sanitize"),Ki=f(" Change the file name for the generated sanitization script"),Kj=f("-sanitization-script"),Kl=f(" Use the option only when plugin is run"),Km=f("-plugin-option"),Kn=f(" Don't use a native plugin but bytecode"),Ko=f("-byte-plugin"),Kp=f(" Just build myocamlbuild.ml"),Kq=f("-just-plugin"),Kr=f(" Don't catch and display exceptions (useful to display the call stack)"),Ks=f("-dont-catch-errors"),Kt=f(" Don't ignore stdlib modules"),Ku=f("-no-stdlib"),Kv=f(" Don't build myocamlbuild.ml"),Kw=f("-no-plugin"),Kx=f(" Don't apply sanity-check rules"),Ky=f("-no-hygiene"),Kz=f(" Don't skip modules that are requested by ocamldep but cannot be built"),KA=f("-no-skip"),KB=f(" Don't make links of produced final targets"),KC=f("-no-links"),KE=f("<module,...> Don't try to build these modules"),KF=f("-ignore"),KH=f("<path> Show tags that applies on that pathname"),KI=f("-show-tags"),KK=f("<tag> Use this line of tags (as in _tags)"),KL=f("-tag-line"),KN=f(yj),KO=f("-plugin-tags"),KQ=f("<tag> Use this tag when compiling the myocamlbuild.ml plugin"),KR=f("-plugin-tag"),KT=f(yj),KU=f("-tags"),KW=f("<tag> Add to default tags"),KX=f("-tag"),KZ=f(fc),K0=f("-pp"),K2=f("<flag> Add to ocaml preprocessing flags"),K3=f("-ppflag"),K5=f(fc),K6=f("-lexflags"),K8=f("<flag> Add to ocamllex flags"),K9=f("-lexflag"),K$=f(fc),La=f("-yaccflags"),Lc=f("<flag> Add to ocamlyacc flags"),Ld=f("-yaccflag"),Lf=f(fc),Lg=f("-docflags"),Li=f("<flag> Add to ocamldoc flags"),Lj=f("-docflag"),Ll=f(fc),Lm=f("-cflags"),Lo=f("<flag> Add to ocamlc compile flags"),Lp=f("-cflag"),Lr=f(fc),Ls=f("-lflags"),Lu=f("<flag> Add to ocamlc link flags"),Lv=f("-lflag"),Lx=f("<syntax> Specify syntax using ocamlfind"),Ly=f("-syntax"),LA=f("<package> (idem)"),LB=f("-package"),LD=f("<package,...> (idem)"),LE=f("-pkgs"),LG=f("<package> Link to this ocaml findlib package"),LH=f("-pkg"),LJ=f("<module,...> (idem)"),LK=f("-mods"),LM=f("<module> Link to this ocaml module"),LN=f("-mod"),LP=f(fc),LQ=f("-libs"),LS=f("<flag> Link to this ocaml library"),LT=f("-lib"),LV=f("<path,...> (idem)"),LW=f("-Xs"),LY=f("<path> Directory to ignore"),LZ=f("-X"),L1=f("<path,...> (same as above, but accepts a (comma or blank)-separated list)"),L2=f("-Is"),L4=f("<path> Add to include directories"),L5=f("-I"),L6=f(" Traverse directories by default (true: traverse)"),L7=f("-r"),L8=f(" Remove build directory and other files, then exit"),L9=f("-clean"),L$=f(" No log file"),Mb=f("-no-log"),Mc=f("<file> Set log file"),Md=f("-log"),Me=f(" Show rules and flags"),Mf=f("-documentation"),Mh=f("<level> Set the verbosity level"),Mi=f("-verbose"),Mk=f(" Make as quiet as possible"),Ml=f("-quiet"),Mn=f(" Display the version number"),Mo=f("-vnum"),Mq=f(" Display the version"),Mr=f("-version"),Mz=f("chop_extensions: no extensions"),My=f(c),Mu=f(bp),Mv=f("<**/{,.,..}/**>"),Mw=f(bp),agx=[0,f(xs),74,10],Mx=f(hW),agw=[0,f(xs),75,10],MC=f("<*.ml> or <*.mli> or <*.c> or <*.h>"),MD=f("extension:"),ME=f("file:"),MP=f("Ocamldep.ocamldep: multiple files in ocamldep output (%s not expected)"),MO=f("Ocamldep.ocamldep: bad output (%s)"),MQ=f("nopervasives"),MR=f("Pervasives"),MN=f("depends"),ML=f("This module (%s) is ignored by %s"),MJ=f("cmi"),MF=f("ocamlc.where"),MG=[4,f(kH)],MH=[1,f(yg)],MM=f("Ocaml_utils.Ocamldep_error"),MS=f(".ml"),MT=f("_config.ml"),MU=f("_config.mli"),MV=f("\x1b[38;5;%dm"),MW=f("\x1b[4m"),agu=f("stty size 2>/dev/null"),MZ=[0,24,80],M0=[0,24,80],M1=[0,f("lib/Option.ml"),34,12],M2=f(e8),Nc=[0,f(kC),485,7],Ne=[0,f(kC),488,7],Nd=[0,f(kC),489,7],Nb=[0,f(kC),493,7],M6=f("Patricia.Make(X).Unchanged"),Nf=f("Patricia.Make(X).Got"),Nl=f("Patricia.Make(X).Domain.Unchanged"),Nm=f("Patricia.Make(X).Domain.NotDisjoint"),Np=f("Patricia.Make(X).Domain.Got"),Nr=f("Patricia.Make(X).Domain.NotSubset"),Nt=f("%d-th block constructor"),Nu=f("%d-th constant constructor"),ND=f(e8),NC=f("Mezzo internal assert failure: "),NB=f("Mezzo internal error: "),NA=[0,0],Ny=[0,0],Nx=[0,f("lib/Log.ml"),27,2],Nv=f("Log.MzInternalFailure"),NF=[0,0,0,0],NK=[0,0,0],NJ=[0,0],NI=f(kf),NH=f("fold_left2i"),NG=f("map2i"),NL=f(xW),NM=f(gh),NN=f(yz),NO=f(" -> "),NQ=f("bottom"),NR=f(y_),NS=f(xg),NT=f(y4),NX=f("mutable "),NW=f(c),N0=f("bad usage for [destruct_unqualified]"),NZ=f(pt),NY=[0,f("parsing/SurfaceSyntax.ml"),fb,9],N1=f("&&"),N2=f("||"),N3=f(yx),N4=f(yx),Sg=[0,f("parsing/grammar.ml"),1855,139],QW=f(ct),QX=[22,0],QJ=[15,0],QF=[1,0],Qo=[1,0],PR=[1,0],PO=[15,0],PD=f("adoptee"),PE=f("adopter"),PF=f("result"),N5=f("Grammar.Error"),N6=[0,16,f("\0\0\0\0\0\xd5\0\0\0\x8b\0L\0\0\0\0\x01\x18\0\x87\0\0\x01\x1a\0\0\x01\x0e\0\0\x01\x16\0\0\x01\x15\0\0\x01\x14\0\0\x01\x13\0\0\x01\x12\0\0\x01\x11\0\0\x01\x10\0\0\x01\x0f\0\0\x01\x19\0\0\0\0\0M\0\0\x01\x17\0\0\x01\x1b\0\x8a\0\0\0\0\0\0\x01\r\0\xab\0\0\0\x88\0\0\0\x8d\0\x90\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\n\0\x0b\0\f\0\0\0\0\0\t\x01\n\0\0\0\x0e\x01\t\0\0\0\0\0\xea\0_\0\0\x01\x0b\0\xfd\0\xfc\0\0\0\0\0!\0P\0\0\0\0\0\0\0N\0\xcb\0\x8f\0\x8e\0Q\0\0\0\0\0\0\0\x8c\0\xac\0\xb0\0\xca\0\0\0\0\0\0\0\xb3\0\x91\0\0\0\0\0\0\0\0\0\x14\0\0\0\0\0\xec\0\0\0\0\0\0\0\0\0\0\0\xa7\0\0\0\0\0\xad\0\0\0\xb2\0\xa4\0\x94\0\0\0\0\0\xa6\0\0\0\xa5\0\x1b\0\x93\0\0\0\0\0\xd2\0\0\0\xd3\0\0\0\0\0\xe6\x01\0\0\0\0\0\0\x13\0\0\0\x12\0\xff\0\0\0-\0\0\0\0\0\xf0\0Y\0\x92\0\xcc\0\xb1\0\xa8\0\xb9\0\0\0\0\0\x97\0\x95\0\0\0\xba\0\0\0\x96\0\0\0\0\0\xa3\0\0\0\0\0\xaa\0\0\0\0\0\xe4\0\0\0\0\0\0\0\0\0\0\0\x89\0\0\x001\x01\x06\x01\x05\0\0\0\0\0\xf4\0]\0I\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\0\0\0\0\0\x84\0\0\0\x80\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0K\0\0\0\0\0\0\0\0\0G\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc4\0\0\0\0\0\x99\0\0\0\0\0\0\0\0\0\xbf\0\xd4\0\xc9\0\0\0\0\0\0\0\0\x01\b\0\0\0\0\0\xe8\x01\x07\0\0\0|\0\0\0\0\0\xc8\0\x7f\0\0\0\0\0\0\0\0\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc6\0\0\0\0\0\0\0\0\0\xbd\0\0\0\xce\0\0\0\0\0\xcd\0\0\0\0\0\xe2\0\0\0\0\0\0\0\0\0(\0)\0*\0+\0\0\0\0\0\0\0\xbe\x01\x1c\0\0\0/\x01\x03\x01\x02\0\0\0\0\0\xf2\0[\0\b\0\xa0\0\0\0\0\0\xc2\0\0\0\0\0\0\0\0\0\xbc\0\xd0\0\0\0\0\0\xcf\0\x9c\0\0\0\0\0\0\x01\x1d\x01\x1e\0\0\0\r\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\xae\0\xb5\0\0\0\0\0\0\0\xb8\0\0\0\xb7\0\xb6\0\0\0\0\0\xde\0\0\0\0\0\xdd\0\0\0\0\0\0\0U\0\0\0T\0\0\0\0\0\0\0\x11\0\xf7\0\xf6\0\0\0?\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\x9d\0\0\0\0\0\xd8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\xee\0\0\0\0\0\x07\0\0\0A\0\x06\0\0\0\0\0\x9e\0\0\0\0\0\0\0\x9b\0\0\0\0\0\xda\0g\0\0\0\0\0h\0\0\0\x86\0~\0\0\0\0\0\0\0\x85\0\0\0\0\0\0\0\0\0\0\0\0\0W\0\0\0\x83\0\xfa\0\0\0\0\0\0\0\0\0\xe0\0\xf9\0\0\0\0\0\0\0\xc0\0\0\0\0\0\xc1\0\0\0\0\0\0\0\0\0\0\0\xc3\0\x1c\0\0\0\0\0\0\0\0\0\x1f\0\x1d\0\x1e\0 \0\0\0b\0\0\x003\0\0\x005\0\0\x004\x007\0\0\x002\0\0\0C\x006\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\x009\0\0\0;\0\0\0:\0<\0=\0\0\x008\0\0\0E\0\x02\0\0\0'\0&\0%\0\x03\0\0\0a\0\0\0\0\0\0\0\0\0j\x01 \0\0\x01!")],N7=[0,[0,16,f('\b\xac\x1a\xd0\0\0\x11\x9e\0\0\0\0\x18\xc6\0\x06\0\0\0\0\0>\0\0\0\x98\0\0\0\xaa\0\0\x01<\0\0\x01J\0\0\x01N\0\0\x01v\0\0\x01\x90\0\0\x01\xae\0\0\x01\xe6\0\0\x01\xec\0\0\0\t\0N\0\0\x01&\0\0\x02$\0\0\0\0\0\x8e\0N\x16\x8e\0\0\0\0\0\0\0\0\x16\xfe\0\0\0\0\x15P\x13\xa6\x16\xfe\0\x03\0N\0\0\x01\xb0\x19.\x05:\x01\x94\0\0\0\0\0\0\x01\x94\x02*\0\0\0\0\x02V\0\0\0\0\0\x9a\x02\x8a\0\0\0\0\x02n\0\0\0\0\0\0\x01\x96\x02r\0\0\0\0\0\xb8\x05\xb4\0N\0\0\0\0\0\0\0\0\0\0\x16\xfe\x07\xb6\x16\xfe\0\0\0\0\0\0\0\0\x04\xee\x02\x18\x16\xfe\0\0\0\0\x05\b\x02X\x01\x1c\0\xb8\0\0\0N\0\x84\0\0\x01\n\x19v\x19v\bb\x16\xfe\0\0\x07\n\x16\xfe\0\0\x16\xfe\0\0\0\0\0\0\x11\x1a\0\xb8\0\0\x16\xfe\0\0\0\0\0\0\x15\xce\x19v\0\0\x19v\0\0\x16z\x19v\0\0\0\0\x02R\x16\xfe\0\0\x16\xfe\0\0\0\0\x02\x84\0\0\x004\x02\xf6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01&\x19v\0\0\0\0\x01\xd4\0\0\x19v\0\0\x04\xee\x19\xd4\0\0\x1aD\0\x1e\0\0\x1az\0\x1e\0\0\x16\xc4\x024\x01B\0\x1e\x01\xa4\0\0\x02\xe4\0\0\0\0\0\0\x02B\x02\xd2\0\0\0\0\0\0\x06\xfa\x06^\x06^\x06^\x03\xbe\x03\xbe\x17\x82\0\0\x06^\x19v\0\xbe\x19v\x03\x14\x19v\0\0\x03\xbe\x14\xe2\0\0\x13\xae\0\0\0\0\x06^\x05\x98\x01\x96\x02\xe0\x06^\x17\x82\x06^\x06^\x03\xd0\0\0\x01\x8c\x04\xee\x02\xc4\x01\x8c\0\0\x034\x19v\x02\xf4\x16\xfe\x03\x16\x06^\x19v\0\0\x03n\x06^\0\0\x01\xe4\0N\x01F\x06^\0\0\0\0\0\0\x03\xbe\x16\xfe\b\x16\x16\xfe\0\0\0\x11\x16\xfe\0\0\0\0\x03r\0\0\x02\x82\0N\0\0\0\0\0\xa8\x02\xea\x02\xc0\x06^\0\0\x10n\x06^\x03 \t\x06\x06^\t\xa4\0\0\x06^\nB\x06^\n\xe0\x06^\x11\xbe\x06^\x0b~\x06^\f\x1c\x06^\f\xba\x06^\rX\x06^\r\xf6\x06^\x0e\x94\x06^\x0f2\x06^\x0f\xd0\x06^\x12\\\x19v\0\0\0\0\x06^\x03\x18\x06^\0\0\x186\0\0\x14J\x06^\0\0\x12\xfa\x06^\0\0\0N\x03,\x06^\x04\xa0\0\0\0\0\0\0\0\0\x06^\x03"\x06^\0\0\0\0\x03\x82\0\0\0\0\0\0\x02\xe0\x03(\0\0\0\0\0\0\0\0\x03\x9c\x06^\0\0\x03\x9e\x06^\x17\xea\x06^\0\0\0\0\x10n\x06^\0\0\0\0\x01\xf4\0N\0\x88\0\0\0\0\x01\x96\0\0\0\0\x03J\x16\xfe\x16\xfe\x16\xfe\x16\x0e\x16\xfe\0\0\0\0\x04\xee\x038\x16\xfe\0\0\x16\xfe\0\0\0\0\x07J\x16\xfe\0\0\x1a\xb6\x16\xfe\0\0\x1a@\x16\xfe\x1a\xde\0\0\x1b"\0\0\x1b.\x19v\x19F\0\0\0\0\0\0\x19\xb8\0\0\0\x88\x03N\x16\xfe\x1b.\0\0\x03t\x06^\0\0\x1bf\x01\xf4\0\0\0N\x06\xb0\x02X\x19v\x06>\x01\x94\x03d\x19v\x17\xe0\x03|\x06^\0\0\0N\x17j\x1br\0\x9a\0\0\x04\xee\x1b\x9a\0\x9a\0\0\x01\x94\tJ\0\0\tJ\0\0\0\0\x03~\x06^\0\0\x02\x04\x03\x86\x06^\0\0\x1b\xa6\0\x1e\0\0\0\0\x19\x04\x06^\0\0\x03n\0\0\0\0\x15\xd6\x04\\\x03\xc6\0\0\x03\xe8\x07\x9a\0\x1e\x02N\x06^\x02\xd8\0\0\x03x\0\0\0\0\x02\xde\x06^\x02\xf2\0\x1e\0\0\0\0\x02|\0\0\0\t\0\0\x03\xa2\x06^\0\0\x03\xac\x03\xbe\x01\xb8\x06^\x03\x9e\0\0\0\0\x16\xfe\x03\xa4\x06^\x03\xcc\0\0\0\0\0\0\0\0\x03\xd0\0\0\x01\xf4\0\0\0N\0\0\0N\0\0\0\0\x03\xb2\0\0\b\xac\0\0\0\0\0\0\t\xe8\0N\x03\x98\x19v\x10\xb8\x01\xf4\0\0\0N\0\0\0N\0\0\0\0\0\0\x03\xb8\0\0\t\xe8\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\x02\0\0\0\x03\xd4\0\xc4\x03\xb4\x03\xe0\0\0\0\0\x03\xc8\0\0')],[0,16,f('\x041\x041\x041\x04\xa2\x041\x041\x041\x041\0\x16\x041\x041\x03\x99\x041\x041\x041\x041\x041\0\xba\x041\x041\0"\x041\0\x12\0\x16\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x041\x07B\x041\x02R\x041\x041\x041\x03\xb9\0\x8a\0.\x041\x041\x04\xd2\x041\x041\0\x1a\0\x82\x041\x041\x041\x041\x041\x041\x03\xe2\x041\x041\x041\x041\x041\0\x86\x041\x041\0\xda\x041\0\xbe\x041\x041\x041\x041\0\xaa\0\xae\x041\x041\x041\x041\x041\x041\0\xb5\x02\x85\x02\x85\0\xb5\x05n\x02\x85\0\xb5\x006\0\xb5\0\xb5\x03\xa1\x03\xa1\x01\x91\0\xb5\0\xb5\0\xb5\0>\x03\xb9\0\xb5\x05r\0\xb5\x04y\x04y\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\0\xb5\x01\xa1\0\xb5\0\xb5\0\xb5\0\xb5\0\xf5\0\xb5\x04\n\0\xb5\0\xb5\0\xb5\0\xaa\x01N\x01F\0\xb5\x01\xa1\x01\xae\0\xb5\x03\xa9\x03\xa9\x01f\0\xb5\0\xb5\0\xb5\x02\x85\0\xb5\x01\x91\x01\x1e\0\xb5\0\xb5\0\xb5\0\xa6\0\xb5\0e\0\xb5\0\xb5\x01\xa1\0\xb5\0Q\0\xb5\0\xb5\0\xb5\0Q\b:\0\x92\x03\x1d\0\xb5\0\xb5\x03\x1d\0\xb5\0\xb5\x03\x1d\x02\x8a\x03\x1d\x03\x1d\0F\x01\xa1\0a\x03\x1d\x03\x1d\x03\x1d\0a\0N\x03\x1d\0V\x03\x1d\0\xaa\x01N\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x01\xa6\x03\x1d\x03\x1d\x03\x1d\x03\x1d\0^\x03\x1d\0\xf2\x03\xba\x03\x1d\x03\x1d\x01\xbe\0\xf6\x01\xae\x03\x1d\x03\xa9\x03\xa9\x03\x1d\0f\x02\xc2\0Q\x03\x1d\x03\x1d\x03\x1d\x03\xe9\x03\x1d\0\xfa\0]\x03\x1d\x03\x1d\x03\x1d\0]\x03\x1d\0n\x03\x1d\x03\x1d\x03\xe9\x03\x1d\x01\x15\x03\x1d\x03\x1d\x03\x1d\0\xfe\0\xe6\0\xae\x01\xf1\x03\x1d\x03\x1d\x01\xf1\x03\x1d\x03\x1d\x01\xf1\x02\x86\x01\xf1\x01\xf1\x01F\0\xe6\0\xae\x01\xf1\x01\xf1\x01\xf1\0v\x01f\x01\xf1\0~\x01\xf1\0\x12\0\x16\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\b\x1a\x01\xf1\x01\xf1\x01\xf1\x01\xf1\0\xbe\x01\xf1\x03\xfa\x05f\x01\xf1\x01\xf1\0\xaa\0\xae\0\x9a\x01\xf1\b\x1e\x01\x06\x01\xf1\x07b\0\x1a\0\x82\x01\xf1\x01\xf1\x01\xf1\x04\r\x01\xf1\x01\x1d\x02\xe2\x01\xf1\x03\xb2\x01\xf1\x03\xc9\x01\xf1\x02\x8a\x01\xf1\x01\xf1\x01}\x01\xf1\x01\x12\x01\xf1\x01\xf1\x01\xf1\x03\xf5\0\xaa\0\xae\x01\xe9\x01\xf1\x01\xf1\x01\xe9\x01\xf1\x01\xf1\x01\xe9\x01.\x01\xe9\x01\xe9\x01B\b"\x01\x8e\x01\xe9\x01\xe9\x01\xe9\0\xaa\0\xae\x01\xe9\x02J\x01\xe9\x01u\x01u\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x06F\x01\xe9\x01\xe9\x01\xe9\x01\xe9\x07>\x01\xe9\0\xe6\0\xae\x01\xe9\x01\xe9\0Y\x022\x02:\x01\xe9\0Y\x06N\x01\xe9\0\xa6\x07\n\x03\xf5\x01\xe9\x01\xe9\x01\xe9\x01m\x01\xe9\x03\xfa\x05\x1a\x01\xe9\x03\xfa\x01\xe9\x03\xc1\x01\xe9\x02\xd2\x01\xe9\x01\xe9\x04\x01\x01\xe9\x03&\x01\xe9\x01\xe9\x01\xe9\x01]\0\xaa\0\xae\x01\xf1\x01\xe9\x01\xe9\x01\xf1\x01\xe9\x01\xe9\x01\xf1\x04\x12\x01\xf1\x01\xf1\0\xaa\0\xae\x03V\x01\xf1\x01\xf1\x01\xf1\0\xaa\0\xae\x01\xf1\x03z\x01\xf1\x01U\x01e\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x03y\x01\xf1\x01\xf1\x01\xf1\x01\xf1\x07\x02\x01\xf1\0\xaa\0\xae\x01\xf1\x01\xf1\0\xa6\x07&\x03\x86\x01\xf1\x03\x8e\x03\x96\x01\xf1\x07.\x03\xa6\x01]\x01\xf1\x01\xf1\x01\xf1\x03\xf2\x01\xf1\x04\xaa\x04\xda\x01\xf1\x03\xfa\x01\xf1\x04\xfa\x01\xf1\x05\n\x01\xf1\x01\xf1\x052\x01\xf1\x05>\x01\xf1\x01\xf1\x01\xf1\x05\x86\x05\xaa\x06\x16\x01\xe5\x01\xf1\x01\xf1\x01\xe5\x01\xf1\x01\xf1\0\x16\x06&\x01\xe5\x01\xe5\x06V\x06b\x06\xaa\x01\xe5\x01\xe5\x01\xe5\x06\xba\x06\xe2\x01\xe5\x06\xf6\x01\xe5\x06\xfe\x07\x1a\x01\xe5\x03\x06\x01\xe5\x01\xe5\x01\xe5\x01\xe5\x01\xe5\x01\xe5\x01\xe5\x01\xe5\x01\xe5\x07N\x01\xe5\x03\n\x032\0\xd6\x07Z\x03\xce\x07j\x07z\x03>\x01\xe5\x07\x82\x01%\x07\x96\x01\xe5\0\xe2\x07\xbb\x03B\x07\xda\b\x07\b6\x01\xe5\x01\xe5\x01\xe5\b>\x01\xe5\bB\bO\x01\xe5\x01%\x01\xe5\0\0\x01\xe5\0\0\x01\xe5\x01\xe5\x01%\x01\xe5\0\0\x01\xe5\x03F\x01\xe5\0\0\0\0\0\0\x01\xdd\x01\xe5\x01\xe5\x01\xdd\x01\xe5\x01\xe5\0\x16\0\0\x01\xdd\x01\xdd\0\0\0\0\0\0\x01\xdd\x01\xdd\x01\xdd\0\0\0\0\x01\xdd\0\0\x01\xdd\0\0\0\0\x01\xdd\x03\x06\x01\xdd\x01\xdd\x01\xdd\x01\xdd\x01\xdd\x01\xdd\x01\xdd\x01\xdd\x01\xdd\0\0\x01\xdd\x03\n\x032\0\xd6\0\0\x03\xce\0\0\x04\xe2\x03>\x01\xdd\0\0\0\0\0\0\x01\xdd\0\0\0\0\x03B\0\0\0\0\0\0\x01\xdd\x01\xdd\x01\xdd\0\0\x01\xdd\0\0\0\0\x01\xdd\0\0\x01\xdd\0\0\x01\xdd\0\0\x01\xdd\x01\xdd\0\0\x01\xdd\0\0\x01\xdd\x03F\x01\xdd\0\0\0\xc2\0\xc6\0\x16\x01\xdd\x01\xdd\0\0\x01\xdd\x01\xdd\0\xad\0\xad\0\xad\0\0\0\xad\0\xad\0\xad\0\xad\0\0\0\xad\0\xad\x04\xe6\0\0\0\0\0\xad\0\xad\0\xad\0\0\0\xad\0\xad\0\0\0\0\x04\xea\0\0\0\0\0\xca\0\xd6\0\0\0\0\0\0\0\0\0\0\0\0\x04\xee\0\xad\0\0\0\0\0\0\0\xad\0\xad\0\0\x001\x01\x9e\x001\x001\0\xad\x01^\0\0\x01b\0\xad\0\xad\0\0\0\0\0\xad\0\0\0\0\0\xad\0\xad\0\xad\0\xad\0\xad\0\xad\0\0\0\xad\0\0\0\xad\0\xad\0\xad\0\0\0\xad\x001\0\0\0\xad\0\0\0\xad\0\0\0\xad\0\0\x03U\x03U\0\xad\0\xad\0\xad\0\xad\0\xad\0\xad\x041\x041\x041\0\n\x041\x041\x041\x041\x001\x041\x041\0\xee\0\0\0\0\x041\x041\x041\0\0\x041\x041\0\0\0\0\0\0\0\0\x03U\x03U\0\0\0\0\0\0\0\0\0\0\x03U\0\0\0\0\x041\0\0\0\0\x03N\x041\x041\0\0\0\0\0\0\0\0\0\0\x041\0\0\0\0\0\0\x041\x041\0\0\0\0\x05b\0\0\0\0\x041\x041\x041\x041\x041\x041\0\0\x041\0\0\x041\0\0\x041\x06:\x041\x06j\x01R\x041\0\r\x041\0\0\x041\0\0\0\0\0\0\x041\x041\x041\x041\x041\x041\x02e\x01\x95\0\0\x02e\0\0\0\0\0\x16\0\0\x02e\x02e\x02\xfa\x02\xfe\x03\x02\0\0\0\0\x02e\0\0\0\r\0\0\x03\x16\0\0\0\0\x03\x1e\0\0\x03\x06\0\0\0\0\0\0\0\r\0\0\0\0\0\0\0\0\x02e\0\0\x03.\x03\n\x032\0\xd6\x03J\0\r\0\0\0\0\x03>\x02e\x03Z\x03b\x03f\x02e\x01\x95\0\r\x03B\0\0\0\0\0\0\0\0\x02e\x02e\0\0\x02\x8a\0\0\x05n\x02e\0\0\x02e\0\r\x02e\0\r\0\0\0\0\0\0\0\0\x07~\x02e\x03F\x02e\x05r\x03\x9a\x04y\x04y\x02e\x02e\0\0\x02e\x02e\x02E\x02E\x02E\0\0\x02E\x02E\x02E\x02E\0\0\x02E\x02E\0\xf5\0\0\0\0\x02E\x02E\x02E\0\0\x02E\x02E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\0\0\0\0\x01%\0\0\0\0\0\xe2\x02E\0\0\x03m\0\0\x02E\x02E\0\0\0\0\0\0\0\0\0\0\x02E\0\0\x01%\x02\xf6\x02E\x02E\0\0\0\0\0\0\x01%\0\0\x02E\x02E\x02E\x02E\x02E\x02E\0\0\x02E\x07r\x02E\x03m\x02E\0\0\x02E\0\0\0\xa6\x02E\0\0\x02E\0\0\x02E\x03m\0\x12\0\x16\x02E\x02E\x02E\x01\xd6\x02E\x02E\x02\xb9\x02\xb9\x02\xb9\x03m\x02\xb9\0\xc2\0\xc6\0\x16\0\0\x02\xb9\x02\xb9\0\0\0\0\x03m\x02\xb9\x02\xb9\x02\xb9\0\0\x02\xb9\x02\xb9\0\0\0\0\x05\xc2\0\0\0\x1a\0\x82\0\0\x03m\x03m\x03m\x03m\0\0\0\0\0\0\x02\xb9\0\0\0\0\0\0\0\xca\0\xd6\0\0\0\0\0\0\0\0\x03\xdd\x02\xb9\0\0\0\0\0\0\x02\xb9\x02\xb9\0\0\0\0\x015\x015\x015\x02\xb9\x02\xb9\x02\xb9\x01^\x02\xb9\x01b\x07\x02\x02\xb9\0\0\x02\xb9\x015\x02\xb9\0\0\x02\xb9\0\0\0\0\x02\xb9\0\0\x02\xb9\0\0\x02\xb9\0\0\0\0\0\0\x01r\x02\xb9\x02\xb9\0\0\x02\xb9\x02\xb9\x015\x015\x015\0\0\x015\x015\x015\x015\0\0\x015\x015\0\0\0\0\0\0\x015\x015\x015\0\0\x03\xd6\x015\0\0\x015\0\0\x015\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x015\0\0\0\0\x015\0\0\0\0\0\0\x015\x015\0\0\0\x06\x015\0\0\0\0\x015\0\0\0\0\0\0\x015\x015\0\0\0\0\0\0\0\0\0\0\x015\x015\x015\x015\x015\x015\0\0\x015\0\0\x015\0\0\x015\0\0\x015\0\0\x07\x92\x01\xca\0\0\x015\0\0\x015\x015\0\0\0\0\x015\x015\x015\x01\xcd\x015\x015\x01\xcd\0\0\0\0\0\0\0\0\x01\xcd\x01\xcd\0\0\x01\x05\0\0\x01\xcd\x01\xcd\x01\xcd\0\0\0\0\x01\xcd\0\0\x01\xcd\x07\x9a\0\0\x01\xcd\0\0\x04*\x01\xcd\x01\xcd\x01\xcd\x01\xcd\x01\xcd\x01\xcd\x01\xcd\x01\xcd\0\0\x01\xcd\x07\xa2\0\xfd\x07\xaa\0\0\0\0\0\0\0\0\0\0\x01\xcd\0\0\0\0\0\0\x01\xcd\0\0\0\0\0\0\0\0\0\0\0\0\x01\xcd\x01\xcd\x01\xcd\0\0\x01\xcd\0\0\0\0\x01\xcd\0\0\x01\xcd\0\0\x01\xcd\0\xfd\x01\xcd\x01\xcd\0\0\x01\xcd\0\0\x01\xcd\0\0\x01\xcd\0\0\0\0\0\xfd\x01\xc5\x01\xcd\x01\xcd\x01\xc5\x01\xcd\x01\xcd\0\0\x06v\x01\xc5\x01\xc5\0\0\0\xfd\0\0\x01\xc5\x01\xc5\x01\xc5\0\0\0\0\x01\xc5\0\0\x01\xc5\0\xfd\0\0\x01\xc5\0\0\x04*\x01\xc5\x01\xc5\x01\xc5\x01\xc5\x01\xc5\x01\xc5\x01\xc5\x01\xc5\0\0\x01\xc5\0\xfd\x07\xd2\0\xfd\0\0\0\0\0\0\0\0\0\0\x01\xc5\0\0\0\0\0\0\x01\xc5\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc5\x01\xc5\x01\xc5\0\0\x01\xc5\0\0\0\0\x01\xc5\0\0\x01\xc5\0\0\x01\xc5\x07\x92\x01\xc5\x01\xc5\0\0\x01\xc5\0\0\x01\xc5\0\0\x01\xc5\0\0\0\0\0\0\x01\xd5\x01\xc5\x01\xc5\x01\xd5\x01\xc5\x01\xc5\0\0\0\0\x01\xd5\x01\xd5\0\0\x01\r\0\0\x04\x1e\x01\xd5\x01\xd5\0\0\0\0\x01\xd5\0\0\x01\xd5\x07\xe2\0\0\x01\xd5\0\0\x04*\x04>\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\0\0\x01\xd5\x07\xea\0\0\x07\xf2\0\0\0\0\0\0\0\0\0\0\x01\xd5\0\0\0\0\0\0\x01\xd5\0\0\0\0\0\0\0\0\0\0\0\0\x01\xd5\x01\xd5\x01\xd5\0\0\x01\xd5\0\0\0\0\x01\xd5\0\0\x01\xd5\0\0\x01\xd5\0\0\x01\xd5\x01\xd5\0\0\x01\xd5\0\0\x01\xd5\0\0\x01\xd5\0\0\0\0\0\0\x01\xc1\x01\xd5\x01\xd5\x01\xc1\x01\xd5\x01\xd5\0\0\0\0\x01\xc1\x01\xc1\0\0\0\0\0\0\x01\xc1\x01\xc1\x01\xc1\0\0\0\0\x01\xc1\0\0\x01\xc1\0\0\0\0\x01\xc1\0\0\x04*\x01\xc1\x01\xc1\x01\xc1\x01\xc1\x01\xc1\x01\xc1\x01\xc1\x01\xc1\0\0\x01\xc1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc1\0\0\0\0\0\0\x01\xc1\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc1\x01\xc1\x01\xc1\0\0\x01\xc1\0\0\0\0\x01\xc1\0\0\x01\xc1\0\0\x01\xc1\0\0\x01\xc1\x01\xc1\0\0\x01\xc1\0\0\x01\xc1\0\0\x01\xc1\0\0\0\0\0\0\x01\xbd\x01\xc1\x01\xc1\x01\xbd\x01\xc1\x01\xc1\0\0\0\0\x01\xbd\x01\xbd\0\0\0\0\0\0\x04\x1e\x01\xbd\x01\xbd\0\0\0\0\x01\xbd\0\0\x01\xbd\0\0\0\0\x01\xbd\0\0\x04*\x04>\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\0\0\x01\xbd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xbd\0\0\0\0\0\0\x01\xbd\0\0\0\0\0\0\0\0\0\0\0\0\x01\xbd\x01\xbd\x01\xbd\0\0\x01\xbd\0\0\0\0\x01\xbd\0\0\x01\xbd\0\0\x01\xbd\0\0\x01\xbd\x01\xbd\0\0\x01\xbd\0\0\x01\xbd\0\0\x01\xbd\0\0\0\0\0\0\x01\xb9\x01\xbd\x01\xbd\x01\xb9\x01\xbd\x01\xbd\0\0\0\0\x01\xb9\x01\xb9\0\0\0\0\0\0\x04\x1e\x01\xb9\x01\xb9\0\0\0\0\x01\xb9\0\0\x046\0\0\0\0\x01\xb9\0\0\x04*\x04>\x04N\x04V\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xb9\0\0\0\0\0\0\x01\xb9\0\0\0\0\0\0\0\0\0\0\0\0\x01\xb9\x01\xb9\x01\xb9\0\0\x01\xb9\0\0\0\0\x01\xb9\0\0\x01\xb9\0\0\x01\xb9\0\0\x01\xb9\x01\xb9\0\0\x01\xb9\0\0\x01\xb9\0\0\x01\xb9\0\0\0\0\0\0\x01\xd1\x01\xb9\x01\xb9\x01\xd1\x01\xb9\x01\xb9\0\0\0\0\x01\xd1\x01\xd1\0\0\0\0\0\0\x04\x1e\x01\xd1\x01\xd1\0\0\0\0\x01\xd1\0\0\x01\xd1\0\0\0\0\x01\xd1\0\0\x04*\x04>\x01\xd1\x01\xd1\x01\xd1\x01\xd1\x01\xd1\x01\xd1\x01\xd1\0\0\x01\xd1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xd1\0\0\0\0\0\0\x01\xd1\0\0\0\0\0\0\0\0\0\0\0\0\x01\xd1\x01\xd1\x01\xd1\0\0\x01\xd1\0\0\0\0\x01\xd1\0\0\x01\xd1\0\0\x01\xd1\0\0\x01\xd1\x01\xd1\0\0\x01\xd1\0\0\x01\xd1\0\0\x01\xd1\0\0\0\0\0\0\x01\xb5\x01\xd1\x01\xd1\x01\xb5\x01\xd1\x01\xd1\0\0\0\0\x01\xb5\x01\xb5\0\0\0\0\0\0\x04\x1e\x01\xb5\x01\xb5\0\0\0\0\x01\xb5\0\0\x046\0\0\0\0\x01\xb5\0\0\x04*\x04>\x04N\x04V\x01\xb5\x01\xb5\x01\xb5\x01\xb5\x01\xb5\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xb5\0\0\0\0\0\0\x01\xb5\0\0\0\0\0\0\0\0\0\0\0\0\x01\xb5\x01\xb5\x01\xb5\0\0\x01\xb5\0\0\0\0\x01\xb5\0\0\x01\xb5\0\0\x01\xb5\0\0\x01\xb5\x01\xb5\0\0\x01\xb5\0\0\x01\xb5\0\0\x01\xb5\0\0\0\0\0\0\x01\xb1\x01\xb5\x01\xb5\x01\xb1\x01\xb5\x01\xb5\0\0\0\0\x01\xb1\x01\xb1\0\0\0\0\0\0\x04\x1e\x01\xb1\x01\xb1\0\0\0\0\x01\xb1\0\0\x046\0\0\0\0\x01\xb1\0\0\x04*\x04>\x04N\x04V\x04f\x01\xb1\x01\xb1\x01\xb1\x01\xb1\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xb1\0\0\0\0\0\0\x01\xb1\0\0\0\0\0\0\0\0\0\0\0\0\x01\xb1\x01\xb1\x01\xb1\0\0\x01\xb1\0\0\0\0\x01\xb1\0\0\x01\xb1\0\0\x01\xb1\0\0\x01\xb1\x01\xb1\0\0\x01\xb1\0\0\x01\xb1\0\0\x01\xb1\0\0\0\0\0\0\x01\xad\x01\xb1\x01\xb1\x01\xad\x01\xb1\x01\xb1\0\0\0\0\x01\xad\x01\xad\0\0\0\0\0\0\x04\x1e\x01\xad\x01\xad\0\0\0\0\x01\xad\0\0\x046\0\0\0\0\x01\xad\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x01\xad\x01\xad\x01\xad\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xad\0\0\0\0\0\0\x01\xad\0\0\0\0\0\0\0\0\0\0\0\0\x04~\x01\xad\x01\xad\0\0\x01\xad\0\0\0\0\x01\xad\0\0\x01\xad\0\0\x01\xad\0\0\x01\xad\x01\xad\0\0\x01\xad\0\0\x01\xad\0\0\x01\xad\0\0\0\0\0\0\x01\xc9\x01\xad\x01\xad\x01\xc9\x01\xad\x01\xad\0\0\0\0\x01\xc9\x01\xc9\0\0\0\0\0\0\x04\x1e\x01\xc9\x01\xc9\0\0\0\0\x01\xc9\0\0\x046\0\0\0\0\x01\xc9\0\0\x04*\x04>\x04N\x04V\x04f\x01\xc9\x01\xc9\x01\xc9\x01\xc9\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc9\0\0\0\0\0\0\x01\xc9\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc9\x01\xc9\x01\xc9\0\0\x01\xc9\0\0\0\0\x01\xc9\0\0\x01\xc9\0\0\x01\xc9\0\0\x01\xc9\x01\xc9\0\0\x01\xc9\0\0\x01\xc9\0\0\x01\xc9\0\0\0\0\0\0\x01\xa9\x01\xc9\x01\xc9\x01\xa9\x01\xc9\x01\xc9\0\0\0\0\x01\xa9\x01\xa9\0\0\0\0\0\0\x04\x1e\x01\xa9\x01\xa9\0\0\0\0\x01\xa9\0\0\x046\0\0\0\0\x01\xa9\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x01\xa9\x01\xa9\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xa9\0\0\0\0\0\0\x01\xa9\0\0\0\0\0\0\0\0\0\0\0\0\x04~\x01\xa9\x01\xa9\0\0\x01\xa9\0\0\0\0\x01\xa9\0\0\x01\xa9\0\0\x01\xa9\0\0\x01\xa9\x01\xa9\0\0\x01\xa9\0\0\x01\xa9\0\0\x01\xa9\0\0\0\0\0\0\x03\x19\x01\xa9\x01\xa9\x03\x19\x01\xa9\x01\xa9\0\0\0\0\x03\x19\x03\x19\0\0\0\0\0\0\x04\x1e\x03\x19\x03\x19\0\0\0\0\x03\x19\0\0\x046\0\0\0\0\x04F\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x04\x86\x03\x19\0\0\x04^\0\0\0\0\0\0\0\0\x04-\0\0\0\0\0\0\x03\x19\0\0\0\0\0\0\x03\x19\0\0\0\0\0\0\0\0\0\0\0\0\x04~\x03\x19\x03\x19\0\0\x03\x19\0\0\0\0\x03\x19\0\0\x03\x19\0\0\x03\x19\0\0\x05V\x04\x8e\x04-\x04\x96\0\0\x03\x19\0\0\x03\x19\0\0\0\0\0\0\0\0\x03\x19\x03\x19\0\0\x03\x19\x03\x19\x02A\x02A\x02A\0\0\x02A\x02A\x02A\x02A\x04-\x02A\x02A\0\0\0\0\0\0\x02A\x02A\x02A\0\0\x04-\x02A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x8a\0\0\0\0\0\0\0\0\0\0\x04-\x02A\x04-\0\0\0\0\x02A\x02A\0\0\0\0\0\0\0\0\0\0\x02A\0\0\0\0\0\0\x02A\x02A\0\0\0\0\0\0\0\0\0\0\x01\xf2\x02A\x02A\x02A\x02A\x02A\0\0\x02A\0\0\x02A\0\0\x02A\0\0\x02A\x01\x1d\0\0\0\x12\0\x16\x02A\0\0\x02A\x01\xfa\0\0\0\0\x02A\x02A\x02A\x01\xe1\x02A\x02A\x01\xe1\0\0\0\0\0\0\0\0\x01\xe1\x01\xe1\0\0\0\0\0\0\x04\x1e\x01\xe1\x01\xe1\0\0\x01\x1d\x01\xe1\0\0\x046\0\x1a\0\x82\0\0\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x04\x86\x01\xe1\0\0\x04^\0\0\0\0\0\0\0\0\x01\x1d\0\0\0\0\0\0\x01\xe1\0\0\0\0\0\0\x01\xe1\0\0\x01\x1d\0\0\0\0\0\0\0\0\x04~\x01\xe1\x01\xe1\0\0\x01\xe1\0\0\0\0\x01\xe1\0\0\x01\xe1\x01\x1d\x01\xe1\x01\x1d\x01\xe1\x04\x8e\0\0\x01\xe1\0\0\x01\xe1\0\0\x01\xe1\0\0\0\0\0\0\x01\xd9\x01\xe1\x01\xe1\x01\xd9\x01\xe1\x01\xe1\0\0\0\0\x01\xd9\x01\xd9\0\0\0\0\0\0\x04\x1e\x01\xd9\x01\xd9\0\0\0\0\x01\xd9\0\0\x046\0\0\0\0\x01\xd9\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x04\x86\x01\xd9\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\xd9\0\0\0\0\0\0\x01\xd9\0\0\0\0\0\0\0\0\0\0\0\0\x04~\x01\xd9\x01\xd9\0\0\x01\xd9\0\0\0\0\x01\xd9\0\0\x01\xd9\0\0\x01\xd9\0\0\x01\xd9\0\0\0\0\x01\xd9\0\0\x01\xd9\0\0\x01\xd9\0\0\0\0\0\0\x03\x81\x01\xd9\x01\xd9\x03\x81\x01\xd9\x01\xd9\0\0\0\0\x03\x81\x03\x81\0\0\0\0\0\0\x04\x1e\x03\x81\x03\x81\0\0\0\0\x03\x81\0\0\x046\0\0\0\0\x04F\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x04\x86\x03\x81\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x81\0\0\0\0\0\0\x03\x81\0\0\0\0\0\0\0\0\0\0\0\0\x04~\x03\x81\x03\x81\0\0\x03\x81\0\0\0\0\x03\x81\0\0\x03\x81\0\0\x03\x81\0\0\x04\xca\x04\x8e\0\0\0\0\0\0\x03\x81\0\0\x03\x81\0\0\0\0\0\0\0\0\x03\x81\x03\x81\0\0\x03\x81\x03\x81\x02=\x02=\x02=\0\0\x02=\x02=\x02=\x02=\0\0\x02=\x02=\0\x16\0\0\0\0\x02=\x02=\x02=\0\0\0\0\x02=\x006\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x06\0\0\0\0\0\0\0\0\x02=\0\0\0\0\0\0\x02=\x02=\0\0\x03\n\x032\0\xd6\0\0\x02=\0\0\0\0\x03>\x02=\x02=\0\0\0\0\0\0\0\0\0\0\x03B\x02=\x02=\x02=\x02=\x02=\0\0\x02=\0\0\x02=\0\0\x02=\0\0\x02=\0\0\0\0\0\xd2\0\0\x02=\0\0\x02=\0\0\0\0\x03F\x02=\x02=\x02=\x03\x19\x02=\x02=\x03\x19\0\0\0\0\0\0\0\0\x03\x19\x03\x19\0\0\0\0\0\0\x04\x1e\x03\x19\x03\x19\0\0\0\0\0\0\0\0\x046\0\0\0\0\x04F\0\0\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x04\x86\x03\x19\0\0\x04^\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x19\0\0\0\0\0\0\x03\x19\0\0\0\0\0\0\0\0\0\0\0\0\x04~\x03\x19\x03\x19\0\0\0\0\0\0\0\0\x03\x19\0\0\x03\x19\0\0\x03\x19\0\0\x04\xbe\x04\x8e\0\0\x04\x96\0\0\x03\x19\0\0\x03\x19\0\0\x01\x95\0\0\0\0\x03\x19\x03\x19\0\x16\x03\x19\x03\x19\0\0\x02\xfa\x02\xfe\x03\x02\0\x1e\0\0\x036\0\0\0\0\0\0\x03\x16\0*\0\0\x03\x1e\0\0\x03:\0:\0B\0J\0R\0Z\0b\0j\0r\0\0\0\0\x06\xea\x03\n\x032\0\xd6\x03J\0\0\0\0\0\0\x03>\0\0\x03Z\x03b\x03f\0\0\x01\x95\0\0\x03B\0\0\0\0\0\0\0\x8e\0\0\0\0\0\0\0\xc2\0\xce\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\0\x96\x02n\0\0\0\0\0\0\x03F\0*\0\0\x03\x9a\0\0\x002\0:\0B\0J\0R\0Z\0b\0j\0r\0\0\0\0\0z\0\0\0\xca\0\xd6\0\0\0\xe2\x01:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01F\x02r\0\0\0\0\x01^\0\0\x01b\x01f\x03A\x03A\x03A\0\0\x03A\x01\xc2\0\0\0\x96\0\0\x03A\x03A\0\x16\0\0\x02v\x02\x0e\x03A\x03A\0\0\0\0\x03A\0~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x06\0\0\0\0\0\0\0\0\x03A\0\0\x02\xcd\0\xc2\0\xc6\0\x16\0\0\x03\n\x032\0\xd6\0\0\x03A\0\0\0\0\x03>\x03A\x03A\0\0\0\0\0\0\0\0\0\0\x03B\x03A\x03A\0\0\x03A\0\0\0\0\x03A\0\0\x03A\x02\xcd\x03A\0\0\x02\x16\0\xca\0\xd6\0\0\0\0\x03A\0\0\x03A\x02\xcd\0\0\x03F\0\0\x03A\x03A\0\0\x03A\x03A\x03\x91\x03\x91\x03\x91\x02\xcd\x03\x91\x01^\0\0\x01b\0\0\x03\x91\x03\x91\0\0\0\0\x02\xcd\0\0\x03\x91\x03\x91\0\0\0\0\x03\x91\0\0\0\0\x02\xcd\0\0\0\x1e\0\0\x05\x96\x02\xcd\x02\xcd\x02\xcd\x02\xcd\0*\0\0\0\0\x03\x91\x002\0:\0B\0J\0R\0Z\0b\0j\0r\0\0\x03\x91\0z\0\0\0\0\x03\x91\x03\x91\0\0\0\xbd\0\xbd\0\0\0\0\0\xbd\x03\x91\x03\x91\0\0\x03\x91\0\0\0\0\x03\x91\0\0\x03\x91\0\x8e\x03\x91\0\0\x02"\x03\xd1\0\xc2\0\xc6\0\x16\x03\x91\0\xbd\x03\x91\0\0\0\xbd\x02\xba\0\x96\x03\x91\x03\x91\0\0\x03\x91\x03\x91\0\0\0\0\0\0\0\0\0\0\0\0\0\xbd\0\xbd\0\0\0\0\0\0\0\0\0\0\0\xbd\x03\xd1\x05\x8a\0\0\0\0\0\xca\0\xd6\0\xbd\0\xe2\x01:\0\xbd\0\0\x03\xd1\0\0\0\0\0\0\0\0\0\xbd\0\xbd\0\0\0\0\0\0\x01F\x01J\x03\xd1\0\xf5\x01^\0\0\x01b\x01f\0\0\0\0\0\0\0\0\x03\xd1\0\x85\0\0\0\0\0\0\0\0\0\x85\0\0\x05n\x05\xd6\0\x85\0\x85\0\x85\0\0\x03\xd1\x03\xd1\x03\xd1\x03\xd1\0\0\0\x85\0\0\0\xf5\0\x85\x05r\0\x85\x04y\x04y\0\0\0\0\0\0\0\0\0\0\0\xf5\0\0\0\0\0\x85\0\x85\0\x85\0\x85\0\x85\0\xf5\0\0\0\0\0\x85\0\xf5\0\x85\0\x85\0\x85\0\0\0\x85\0\x11\0\x85\x02\xe9\x03\x0e\0\xf5\x02\xe9\0\0\0\0\0\0\0\xf5\x02\xe9\x02\xe9\0\0\0\0\0\0\0\0\x02\xe9\x02\xe9\0\0\0\xf5\x02\xe9\0\xf5\0\0\0\0\0\x85\0\0\0\0\0\x85\0\0\0\0\0\x11\0\0\0\0\0\0\0\0\x02\xe9\0\0\0\0\0\0\0\0\x02\x81\0\x11\0\0\x02\x81\0\0\0\0\x02\xe9\0\0\x02\x81\x02\x81\x02\xe9\0\0\0\0\0\x11\x03M\x02\x81\0\0\0\0\x02\xe9\x02\xe9\0\0\x05F\0\0\0\x11\x02\xe9\0\0\x02\xe9\0\0\x02\xe9\0\0\0\0\0\0\x02\x8a\x02\x81\0\0\x02\xe9\0\0\x02\xe9\0\x11\0\0\0\x11\0\0\x02\xe9\x02\xe9\x02\x81\x02\xe9\x02\xe9\0\0\x02\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x81\x02\x81\0\0\0\0\0\0\0\0\x02\x81\0\0\x02\x81\0\0\x02\x81\0\0\0\0\0\0\0\0\0\0\0\0\x02\x81\0\0\x02\x81\0\0\0\x12\0\x16\0\0\x02\x81\x02\x81\0\0\x02\x81\x02\x81\0\x1e\0\0\0&\0\0\0\0\0\0\0\0\0*\0\0\0\0\0\0\x002\0:\0B\0J\0R\0Z\0b\0j\0r\0\0\0\0\0z\0\0\0\x1a\0\x82\0\0\0\0\0\0\0\0\0\0\x04\x1e\x03\x19\x03\x19\0\0\0\0\0\0\0\0\x046\0\0\0\0\x04F\0\x8e\x04*\x04>\x04N\x04V\x04f\x04n\x04v\x04\x86\0\0\0\x1e\x04^\x01\x8d\0\0\0\x96\0\0\0\0\0*\0\0\0\0\0\0\x002\0:\0B\0J\0R\0Z\0b\0j\0r\0\0\x04~\0z\x03\x19\0\xe6\0\xae\0\0\0\xc2\0\xce\0\x16\0\0\0\0\x01\x8d\0\0\x06\xd6\x04\x8e\0\0\x04\x96\x02n\0\0\0\0\0\0\0\x8e\x01\x8d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x8d\0\x96\0\0\0\0\0\xf5\0\xca\0\xd6\0\0\0\xe2\x01:\x01\x8d\0\0\0\0\0\0\0\0\0\0\x02]\0\0\x02]\x02\x8a\0\0\x05n\x01F\x01J\x01\x8d\x01\x8d\x01^\x01\x8d\x01b\x01f\x02]\0\0\0\0\0\0\0\xf5\x01\xc2\x05r\0\0\x04y\x04y\0\0\0\0\0\0\x02v\0\0\0\xf5\0\0\0\0\x02]\0\0\0\0\0\0\0\0\0\xf5\0\0\0\0\0\xf5\0\xf5\0\0\x02]\0\0\0\0\0\0\0\0\x02]\0\0\0\0\0\xf5\0\0\0\0\0\0\x02]\0\xf5\0\xc2\0\xc6\0\x16\0\0\0\0\0\0\0\0\x01\x8e\x02]\0\xf5\0\0\0\xf5\x02\xa1\x02\xa1\0\0\0\0\x02\xa1\x02]\0\0\0\0\0\0\0\0\x02]\x02]\0\0\x02]\0\0\0\0\0\0\0\0\x05\xda\0\0\0\0\0\xca\0\xd6\x02\xa1\0\xe2\x01:\x02\xa1\x03\x89\x03\x89\0\0\0\0\x03\x89\0\0\0\0\0\0\0\0\0\0\0\0\x01F\x01J\x02\xa1\x02\xa1\x01^\0\0\x01b\x01f\x03i\x02\xa1\0\0\0\0\x03\x89\0\0\0\0\x03\x89\x02\xa2\0\0\0\0\x02\xa1\0\0\x03U\0\0\x03U\x03U\0\0\x02\xa1\x02\xa1\x01I\x03\x89\x03\x89\0\0\0\0\0\0\0\n\0\0\x03\x89\0\0\x03i\0\0\0\0\0\0\0\0\x02\xae\0\0\0\0\x03\x89\0\0\0\0\x03i\0\0\x03U\0\0\x03\x89\x03\x89\x03U\x03U\0\0\x01I\0\0\0\0\x03i\x01E\0\0\0\0\0\0\0\0\0\0\x01\x89\x01I\0\0\x03i\0\0\0\0\x03U\0\0\0\0\0\0\0\0\0\0\x05\xce\x01I\0\0\0\0\x03U\x03i\x03i\x03i\x03i\0\0\0\0\x01I\x01E\0\0\0\0\0\0\x03Y\0\0\x01\x89\x03U\x05\xd6\x03U\0\xfd\x01E\0\0\x01I\x01I\x01I\x01I\x01\x89\0\0\0\0\0\0\0\0\0\0\x01E\0\0\0\0\0\0\0\0\0\0\x01\x89\x03\xb1\0\0\0\0\x01E\x03Y\0\0\x03a\0\0\0\0\x01\x89\0\xfd\0\0\x05\xd6\0\0\0\0\x03Y\0\0\x01E\x01E\x01E\x01E\0\xfd\0\0\x01\x89\x01\x89\x05\xf2\x01\x89\x03Y\0\0\x06v\x03\xb1\0\0\0\0\0\xfd\0\0\0\0\x03a\x03Y\0\0\0\0\0\0\x03\xb1\0\0\0\xfd\0\0\0\0\0\0\x03a\x06\x8e\x03\xb1\0\0\x062\x03Y\x03\xb1\x03Y\0\0\0\0\0\0\0\xfd\x03a\0\xfd\0\0\x06\x86\x03\xb1\0\0\0\0\0\0\0\0\0\0\x03a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\xb1\0\0\x03\xb1\0\0\0\0\x06\xc6\x03a\0\0\x03a')]],N8=[0,8,f("\x02\x01\0ffeedccccbba``____^^]]\\\\[[[[ZYXXWVVVUUUUTTSSRRQPPPPPONNNNNMMLLKKJJIIHHGGFFEEDDCCCCBBAA@@??>>==<;;::99887777777777777777666555555555444443333333221111000000000//.....---,,+*****)))))(('''''''''''''&&%%%$$##\"\"\"!  \x1f\x1f\x1e\x1e\x1d\x1d\x1d\x1d\x1c\x1c\x1b\x1b\x1a\x1a\x19\x19\x18\x18\x17\x17\x16\x16\x15\x15\x14\x14\x13\x13\x12\x12\x11\x11\x11\x10\x10\x10\x0f\x0f\x0f\x0e\x0e\x0e\r\r\r\f\f\f\x0b\x0b\n\n\t\b\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x06\x05\x05\x05\x04\x03")],N9=[0,[0,16,f('\x01\xfc\x007\0\0\0\x04\0\0\0\0\0\xc2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\n\x84\0\0\0\0\0\x0f\0\0\n\x94\0\0\0*\0\0\0\x10\0\0\0\0\0e\0\0\0\0\0\0\0Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0V\0\0\0\0\0\0\0\0\0\0\0\0\x01\xc6\0\0\0\0\0\0\0\t\0\0\0*\0\0\0\0\0\0\0\0\0\0\n\xea\x02\x02\x0b\x04\0\0\0\0\0\0\0\0\x02n\0\0\x0b\x18\0\0\0\0\0\0\0L\0\0\0\f\0\0\0\x07\0\0\0\0\0\0\x02\x1a\x06(\0\0\x0b2\0\0\0\0\x0b\x88\0\0\x0b\x98\0\0\0\0\0\0\0\0\0h\0\0\x0b\xee\0\0\0\0\0\0\0\0\x02v\0\0\x02\xd2\0\0\0\0\x03.\0\0\0\0\0\0\f\b\0\0\f\x1c\0\0\0\0\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\x03\x8a\0\0\0\0\0\0\0\0\x03\xe6\0\0\x02\xba\0\0\0\0\0\0\x04p\0\0\0\0\x05\xb4\0\0\0\0\0\r\0\0\x03\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x1e\0\0\0\0\0\0\0\x1e\x016\x01\xee\x02\xa6\x07\xc4\x04Z\0<\0\0\x03^\0N\0\0\x04B\0\0\x04\x9e\0\0\x10\xea\x04\x16\0\0\x04Z\0\0\0\0\x04\xce\0\xee\0\b\0\0\x06\x1e\0\xa4\x06t\x06\xaa\0(\0\0\0i\x04*\0\0\0g\0\0\x01\b\0\x0f\0\0\f6\0\0\x06\xe0\x04\xfa\0\0\0\0\x07\x16\0\0\0\0\x01l\0\0\x0e\x82\0\0\0\0\0\0\x07\xfa\x006\0\0\f\x8c\0\0\0\0\x05\xbc\0\0\0\0\0\0\0\0\0\0\x01\x86\0\0\0\0\0\0\x04\xa0\0\0\x0e\x92\0\0\0\0\x02\xe8\0\0\0\0\x0f~\0\0\0\0\x0f\xaa\0\0\x0f\xb0\0\0\x0f\xd4\0\0\x0f\xe0\0\0\x0f\xf8\0\0\x10"\0\0\x10*\0\0\x10N\0\0\x10r\0\0\x10z\0\0\x10\xa2\0\0\x10\xc6\0\0\x05V\0\0\0\0\x07L\0\0\x0e\xa6\0\0\0\0\0\0\0\0\b\xd4\0\0\0\0\t\x90\0\0\0&\0\0\x07\x82\x01t\0\0\0\0\0\0\0\0\x07\xb8\0\0\x0e\xd4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0b\0\0\0\0\0\0\0\0\0\0\x0f\x16\0\0\0\0\x0f&\0\0\x0fh\0\0\0\0\0\0\t\xbe\0\0\0\0\x01~\x022\0\x06\0\0\0\0\x01\x1a\0\0\0\0\0\0\x05n\f\xa4\f\xd4\x02\x02\r$\0\0\0\0\x07\xcc\0\0\rT\0\0\r\xa4\0\0\0\0\0\0\x07\xe6\0\0\0\0\b,\0\0\r\xd4\x0e$\x01\xce\0\0\x01\xe6\0\0\x02\f\0\xaa\0\0\0\0\0\0\0\0\x01r\0\0\x01\x9e\0\0\x05\xc8\x02"\0\0\0\0\bZ\0\0\0\0\x01\x8c\0\0\x012\x01\xec\0\0\x01\x06\0\0\x01\xda\0\0\x01b\0\0\0\0\b\xae\0\0\0\xce\x01\xf6\0\x8a\x01\xbc\0\0\bF\0\0\x01\xce\0\0\x01\xe2\0\x98\0\0\x01X\0\0\0\0\0\0\b\xdc\0\0\0\xbc\0\0\t(\0\0\0\0\x01x\0\0\0\0\0\0\tL\0\0\0\0\0\0\0\0\x10\xea\x07\xfa\0\0\0\0\0\0\x05\x10\x05$\0\0\t\x98\x02.\0\0\0\0\0\0\0\0\0\0\t\xc6\0\0\x03X\0\0\0\0\0\0\x02*\0\0\0\0\0\0\x0fZ\0\0\0\0\x0b\xc2\0\0\n\x12\0\0\0\0\0\0\x0e4\0\0\n@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x90\0\0\x02$\0\0\x02\x18\0\0\0\0\0\0\0\0\0r\0\0\0\0\0\0\0\xec\0D\0\0\x01\xbe\0\0\x01\xda\0\0\x02\x9e\0\0\x02\x1c\0\0\0\0\0\0\0\0\0\0\x01^\0\0\0\0\x016\0\0\0\0\0\0\0\0\x02\x8e\0\0\x02L\0\0\0\0\0\0\0\0\0\0\0\0\0\0')],[0,16,f("\0r\0\xb0\0[\0V\0m\0\x04\0\xb4\0;\x01^\0(\0D\0;\0\xb6\0V\0\xd5\0;\0\xdd\0\xdd\0G\0n\0-\0\xe1\0\xe0\0K\0\xdb\x016\x01A\0\xa0\x008\0\xdb\0\\\0M\0\xbc\0^\0\xf5\0_\0[\0z\0\xf8\0\x82\x01\xf6\x01A\0\xa1\0\x83\0a\0i\0r\0\xbd\0[\0C\0;\0\xfc\0o\0G\0\xa8\0A\x01\x04\0\xb7\0\x8b\0V\0\x8c\0b\0|\0g\0\\\0W\0I\0^\x01H\0_\0N\0\xfb\0\xae\0\xa0\x01\xe4\0k\0\\\0u\0a\0^\x01a\0_\0x\0z\0\xb3\0\x82\0\xdc\0\xb8\0\xc7\0\x83\0a\0\xdc\0r\x01\xb1\0[\0b\0f\0g\0F\0i\x01\x82\0(\0F\0\x91\0(\0J\0F\0b\0|\0g\x01\x9c\0u\0\x96\x01I\0\x8c\x01\xe3\0x\x01\xed\0\xc5\0\xa0\x01K\0~\0\\\0u\0\xbc\0^\x01\xff\0_\0x\0z\0\x92\0\x82\x01\xf1\0\x94\x01~\0\x83\0a\x01\xf0\0r\0\xbd\0[\0F\0)\x01F\0.\x01\xa9\0\xa8\x01\xf2\x01_\0\xa8\0\xb0\x01\xad\x01\xa6\0b\0|\0g\x01\xa7\0\x97\x02\n\x02\x0b\x01\x90\0\xba\0V\x01\xa7\0\xae\0\xa0\x01\xae\0\xae\0\\\0u\0\xd8\0^\0\xe3\0_\0x\0z\0\xb3\0\x82\x02\0\0\xb3\x01\x93\0\x83\0a\x01\xff\0r\x01\xb1\0[\0\x94\0\xe9\0\xee\x01^\x01\xdc\x02\x01\0\xec\x01-\0(\x02\x03\x02\x05\x01\x84\0b\0|\0g\x01\0\x01.\x01\xaa\x01\x84\0\xbb\x01\x84\0\xf2\0\xf3\x01/\0\xa0\x01^\x01(\0\\\0u\x02\x13\0^\x01\xb3\0_\0x\0z\x01\x89\0\x82\x01\x01\x01\x02\x01\x97\0\x83\0a\x01\x8e\0r\x01\xe8\0[\0\xbd\0;\x02\0\0\xb8\0G\x01\r\x01`\0\xa8\x02\r\0P\x01\x9f\x01\x84\0b\0|\0g\x01\xa8\x02\x04\0M\x01^\x01\xa3\x02\x03\0V\x01\x98\x01^\0\xa0\0\xae\x01\xa7\0\\\0u\x01\x83\0^\0V\0_\0x\0z\x01\xfa\0\x82\0\xb3\x01=\x01\xf8\0\x83\0a\x01\x9c\0r\x01\x9c\0[\x01\xb1\0\xe9\x01\x90\x01\x82\x01\xd6\x01\x85\0\xec\x01-\x01\x8c\x01[\0N\x01\xa0\0b\0|\0g\x01\x8c\x01.\x01\x8c\0^\x01y\x01\xa0\0\xf2\0\xf3\x01/\0\x81\x01\x82\x01(\0\\\0u\0\x99\0^\x01{\0_\0x\0z\x01\xed\0\x82\x01\x01\x01\x02\0V\0\x83\0a\x01\x7f\0r\x01\x91\0[\0F\0f\0g\x01\x9d\x01\xee\x01\r\x02\x0b\x01\x88\x01\x8c\x01\xf0\x01\xf3\x01\x95\0b\0|\0g\x01\xa5\0\x98\x01\x90\x01\x82\x01\xf2\x01\xc5\0V\x01\xd2\x01\x82\0\x85\x02\x12\0^\0\\\0u\0\0\0^\0V\0_\0x\0z\0\0\0\x82\0c\0\0\0\0\0\x83\0a\0\0\0r\x01\xec\0[\x01\xfe\0\xe9\0\0\0\0\x01\xd3\x01\xea\0\xec\x01-\0V\0f\0g\0\0\0b\0|\0g\0\x87\x01.\x02\f\0^\0\0\0\0\0\xf2\0\xf3\x01/\0\x98\0\0\x01(\0\\\0u\0\xa6\0^\0\0\0_\0x\0z\0\0\0\x82\x01\x01\x01\x02\x01\t\0\x88\0a\x02\r\0r\0\0\0[\0\0\0f\0g\0\0\0\0\x01\r\0\0\0\0\0\xf2\0\xf3\x01\n\0\0\0b\0|\0g\0\x8a\0\x98\0\0\0(\0\0\x01\xfc\0V\0\0\0\0\x01\x01\x01\x02\0\0\0\\\0u\0\0\0^\0\0\0_\0x\0z\0\0\0\x82\0\0\x01\r\x01\xcd\0\x88\0a\0\0\0r\0\0\0[\0\0\0\xe9\0\0\0\0\x01\xbf\0\0\0\xec\x01-\0(\0\0\x01\xc9\0\0\0b\0|\0g\0\0\x01.\0\xa8\0\0\0\0\0\0\0\xf2\0\xf3\x01/\0\x9f\0\0\x01(\0\\\0u\0\0\0^\0\0\0_\0x\0z\0\xae\0\x82\x01\x01\x01\x02\0\0\0\x83\0a\0\0\0r\0\0\0[\0)\0\xb3\0\xb2\0\0\0\0\x01\r\0\0\0\xa8\0\0\0\0\0\0\0\0\0b\0|\0g\0\0\0\0\0\0\0\0\0\0\0\0\0V\0\0\0\0\0\xa4\0\xae\0\0\0\\\0u\0\0\0^\0V\0_\0x\0z\0\0\0\x82\0\xb3\0\0\0\0\0\x83\0a\0\0\0r\0\0\0[\0\0\0\xe9\0\0\0\0\0\0\0\0\0\xec\x01-\0\0\0V\0\0\0\0\0\xa5\0|\0g\0\0\x01\xb4\0\0\0^\0\0\0(\0\xf2\0\xf3\x01\xb5\0\xc9\x01\xbd\x01(\0\\\0u\0\xde\0^\0\0\0_\0x\0z\0\0\0\x82\x01\x01\x01\x02\0\xaa\0\x83\0a\0\0\0r\x01\x04\0[\0\0\0f\0g\0\0\x01B\x01\r\0\0\0\0\0\0\x01\xba\x01D\0\0\0b\0|\0g\0\0\0\x98\0\0\0\0\0\xab\0\0\0V\0\0\0\0\0\xcb\x01\x01\x01\x02\0\\\0u\0\0\0^\0\0\0_\0x\0z\0\0\0\x82\0\xae\0\0\x01\r\0\x83\0a\0\0\0r\0\0\0[\0\0\0\xe9\0\0\0\xb3\0\0\0\0\0\xec\x01-\0(\x01E\0\0\0\0\0b\0|\0g\0\0\x01\xb4\x01\xc6\0(\0\0\0\0\0\xf2\0\xf3\x01\xb5\0\xe8\x01\xb8\x01(\0\\\0u\x01\xc8\0^\0\0\0_\0x\0z\0\0\0\x82\x01\x01\x01\x02\x01F\0\x83\0a\0\0\0r\0\0\0[\x01\xc9\0\0\0\0\0\0\0\0\x01\r\0\0\0\xa8\0\0\0V\x01\xc2\x01d\0b\0|\0g\0\0\0\0\0\xa8\0\0\x01|\0\0\x01\xce\0\0\0\0\x01'\0\xae\0\0\0\\\0u\0\0\0^\x01\x80\0_\0x\0z\0\xae\0\x82\0\xb3\0\0\x01e\0\x83\0a\0^\x01g\0(\x01s\0\0\0\xb3\0\xf5\0\0\0[\0\0\0\xf8\0a\0V\0\0\x01d\0\0\0b\0|\0g\0\0\0\0\0\xad\x01\x87\0\xfa\0\0\0\0\0\0\x01\x81\x01i\0f\0g\0\0\0u\0\0\x01\x80\0\0\0\\\0x\0\0\0^\0\0\0_\x01e\0\xfb\0\x98\0^\x01g\0\xab\x01s\x01m\0a\0\0\0\0\0\0\0\0\0V\0a\0\0\0\0\0\0\0r\0\0\0[\0\0\0\0\0\xae\0\0\0b\0f\0g\0\0\0\0\x01\x81\x01i\0f\0g\0\0\0\xb3\0\0\0\0\0\0\0\xe9\0\0\0u\x01X\0\0\0\xec\x01-\0x\0\x98\0\\\0\0\0\0\0^\x01m\0_\x01.\0z\0V\0{\0\0\0\xf2\0\xf3\x01/\0a\0\0\x01(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0b\0|\0g\0\xe9\0V\0\0\x01O\0\0\0\xec\x01-\x01\r\0\0\0\0\0\0\0\0\0\0\0u\0\0\x01.\0\0\0\0\0x\0\0\0\xf2\0\xf3\x01/\0\0\0\0\x01(\0\0\0\xe9\0V\0\0\x01L\0\0\0\xec\x01-\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0\0\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\x01\r\0\0\x01(\0\0\0\xe9\0V\0\0\x01J\0\0\0\xec\x01-\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0\0\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\x01\r\0\0\x01(\0\0\0\xe9\0V\0\0\0\xeb\0\0\0\xec\x01-\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0\0\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\x01\r\0\0\x01(\0\0\0\xe9\0V\0\0\x01*\0\0\0\xec\x01-\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0\0\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\x01\r\0\0\x01(\0\0\0\xe9\0V\0\0\x018\0\0\0\xec\x01-\0V\0\0\x01\x01\x01\x02\0V\0\0\0\0\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\x01\r\0V\x01(\x01d\0\xe9\0\0\0\0\x01>\0\0\0\xec\x01-\0V\0\0\x01\x01\x01\x02\x01\xcf\0\0\0\0\0\0\x01.\0\0\0^\0\0\x01r\0\xf2\0\xf3\x01/\x01\r\0\0\x01(\0\xf2\x01e\x01j\0\0\0^\x01g\0V\x01s\x01d\0\0\x01\x01\x01\x02\0\xfe\0\0\0\0\0a\x01\x01\x01\x02\0\0\0V\0f\0g\0\0\0\0\x01\r\0\0\0\0\0\xf2\x01u\0V\x01\r\0\0\x01i\0f\0g\0\x98\x01e\0\0\0\0\0^\x01g\0\0\x01s\x01\x01\x01\x02\0\0\0\0\0\0\0\x98\0\0\0a\0\0\0^\x01m\0\0\0\xe9\0\0\x01\r\x01\x8b\0\0\0\xec\x01-\0\0\x01\xa1\0\0\0\0\0\0\x01i\0f\0g\x01.\0V\0\0\0\0\0\0\0\xf2\0\xf3\x01/\0\0\0\0\x01(\0f\0g\0\x98\0\0\0\0\0\0\0\0\x01m\0\0\0V\x01\x01\x01\x02\0\0\0V\0\0\0\x98\0\xe9\0\0\0\0\x01\x9a\0\0\0\xec\x01-\0\0\x01\r\0\0\0\0\0\0\0\0\x011\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\0\xe9\x01\t\x01(\x01\xac\0\0\0\xec\x01-\0\0\0\0\0\0\0\0\0\0\0V\x01\x01\x01\x02\x01.\0\xf2\0\xf3\x012\0\0\0\xf2\0\xf3\x01/\0\0\0\0\x01(\0\0\x01\r\0\0\0\0\0V\0\0\x01\x01\x01\x02\0\0\0\0\x01\x01\x01\x02\0\xe9\0\0\0\0\x01\xb0\0\0\0\xec\x01-\0\0\x01\r\0\0\0\0\0\0\x01\r\0\0\0\0\x01.\0\0\0\0\0\xe9\0\0\0\xf2\0\xf3\x01/\0\xec\x01-\x01(\0V\0\0\0\0\0\0\0V\0\0\0\0\x01\xb4\0\0\0\0\x01\x01\x01\x02\0\xf2\0\xf3\x01\xb5\0\0\x01\xb7\x01(\0\0\0\0\x014\0\0\0\0\0V\x01\r\0\0\0\0\0V\x01\x01\x01\x02\0\xe9\x01\t\0\0\x01\xc4\0\0\0\xec\x01-\0\0\0\0\0\0\0\0\0\0\x01\r\x01W\0\0\x01.\0\xf2\0\xf3\x012\0\0\0\xf2\0\xf3\x01/\0\xe9\x01\t\x01(\x01\xcb\0\0\0\xec\x01-\0\0\0\0\x01\x01\x01\x02\0\0\0V\x01\x01\x01\x02\x01.\0\xf2\0\xf3\x012\0\0\0\xf2\0\xf3\x01/\x01\r\0\0\x01(\0\0\x01\r\0\0\0\0\0\0\0\0\x01\x01\x01\x02\0\0\0V\x01\x01\x01\x02\0\xe9\0\0\0\0\x01\xda\0\0\0\xec\x01-\0\0\x01\r\0\0\0\0\0\0\x01\r\0\0\0\0\x01.\0\0\0\0\0\0\0\0\0\xf2\0\xf3\x01/\0\xe9\0\0\x01(\x01\xe2\0\0\0\xec\x01-\0\0\0V\0\0\0[\0\0\0\0\x01\x01\x01\x02\x01.\0V\0\0\0[\0\0\0\xf2\0\xf3\x01/\0\0\0\0\x01(\0\0\x01\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x02\0\\\0\0\0\0\0^\0\0\0_\0\0\0\xa7\0\\\0\0\0\0\0^\x01\r\0_\0a\0\x9b\0\0\0\0\0\0\0\0\0\0\0V\0a\0[\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0b\0f\0g\0V\0\0\0[\0\0\0\0\0b\0f\0g\0\0\0\0\0V\0\0\0[\0u\0\0\0\0\0\0\0\\\0x\0\0\0^\0u\0_\0V\0\x9a\0[\0x\0\0\0\0\0\0\0\\\0a\0\0\0^\0\0\0_\0\0\0`\0\0\0\0\0\\\0\0\0\0\0^\0a\0_\0\0\0e\0b\0f\0g\0\0\0\0\0\\\0a\0\0\0^\0\0\0_\0\0\0t\0b\0f\0g\0u\0\0\0V\0a\0[\0x\0\0\0b\0f\0g\0V\0\0\0[\0u\0\0\0\0\0\0\0\0\0x\0\0\0b\0f\0g\0u\0\0\0\0\0\0\0\0\0x\0\0\0\0\0V\0\\\0\0\0\0\0^\0u\0_\0\0\0w\0\\\0x\0\0\0^\0\0\0_\0a\0y\0\0\0\0\0\0\0\0\0\0\0V\0a\0[\0\0\0\0\0\0\0\0\0\0\0\0\x01\xd8\0b\0f\0g\0V\0\0\0[\0\0\0\0\0b\0f\0g\0\0\0\0\0V\0\xf2\0[\0u\0\0\0\0\0\0\0\\\0x\0\0\0^\0u\0_\0V\0\x80\0[\0x\x01\x01\x01\x02\0\0\0\\\0a\0\0\0^\0\0\0_\0\0\0\x8e\0\0\0\0\0\\\x01\r\0\0\0^\0a\0_\0\0\0\x90\0b\0f\0g\0\0\0\0\0\\\0a\0\0\0^\0\0\0_\0\0\0\xe5\0b\0f\0g\0u\0\0\0V\0a\0[\0x\0\0\0b\0f\0g\0\0\0\0\0\0\0u\0V\0\0\x01d\0\0\0x\0\0\0b\0f\0g\0u\0\0\0\0\0\0\0\0\0x\0\0\0\0\0\0\0\\\0\0\0\0\0^\0u\0_\0V\0\xf7\x01d\0x\0\0\0\0\x01e\0\0\0a\0^\x01g\0\0\x01p\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\0\0\0\0\0\0\0\0b\0f\0g\0\0\0\0\x01e\0\0\0\0\0^\x01g\0\0\x01o\x01i\0f\0g\0V\0u\x01d\0\0\0a\0\0\0x\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\0\x01m\0\0\0\0\x01i\0f\0g\0V\0\0\x01d\0\0\0\0\0\0\x01e\0\0\0\0\0^\x01g\0\0\x01h\0\x98\0\0\0\0\0\0\0\0\x01m\0\0\0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01e\0\0\0\0\0^\x01g\0\0\x01l\x01i\0f\0g\0V\0\0\x01d\0\0\0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\0\x01m\0\0\0\0\x01i\0f\0g\0V\0\0\x01d\0\0\0\0\0\0\x01e\0\0\0\0\0^\x01g\0\0\x01n\0\x98\0\0\0\0\0\0\0\0\x01m\0\0\0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01e\0\0\0\0\0^\x01g\0\0\x01z\x01i\0f\0g\0V\0\0\x01d\0\0\0a\0\0\0\0\0\0\0V\0\0\0[\0\0\0\0\0\x98\0\0\0\0\0\0\0\0\x01m\0\0\0\0\x01i\0f\0g\0\0\0\0\0\0\0\0\0\0\0\0\x01e\0\0\0\0\0^\x01g\0\0\x01x\0\x98\0\\\0\0\0\0\0^\x01m\0_\0a\x01\xde\0\0\0V\0\0\0\0\0\0\0\0\0a\0\0\0\0\0V\0\0\0\0\0\0\0\0\0\0\x01i\0f\0g\0\0\0V\0\0\0\0\0\0\0b\0f\0g\0\0\0\xf0\0\0\0\0\0\0\0\x98\0\xec\0\xf1\0\0\x01\x06\x01m\0\0\0\0\0u\0\xec\0\xf1\0V\0\0\0x\x01,\0\0\0\xf2\0\xf3\x01\x07\0\xec\0\xf1\x01(\0\0\0\0\0\xf2\0\xf3\x01\x07\0\0\0\0\x01(\0\0\0\0\x01\x01\x01\x02\0\xf2\0\xf3\x01\x07\x01@\0\0\x01(\x01\x01\x01\x02\0\xec\0\xf1\0V\0\0\x01\r\0\0\0\0\0\0\x01\x01\x01\x02\0V\0\0\x01\r\0\0\0\0\0\xf2\0\xf3\x01\x07\0\0\0\0\x01(\0\0\x01\r\0\0\0\0\0\0\0\0\0\0\x01N\0\0\0\0\x01\x01\x01\x02\0\xec\0\xf1\0\0\0V\0\0\x01Q\0\0\0\0\0\xec\x01T\0V\0\0\x01\r\0\0\0\0\0\xf2\0\xf3\x01\x07\0\0\0\0\x01(\0V\0\0\0\xf2\0\xf3\x01U\0\0\0\0\x01(\x01\xd5\0\0\x01\x01\x01\x02\0\0\0\xec\0\xf1\0\0\0\0\x01S\x01\x01\x01\x02\0\xec\x01T\0V\0\0\x01\r\0V\0\0\0\0\0\xf2\0\xf3\x01\x07\x01\t\x01\r\x01(\0\0\0\xf2\0\xf3\x01U\0\0\0\0\x01(\0\0\0\0\0V\x01\x01\x01\x02\0\xf2\0\xf3\x01\f\0V\0\0\x01\x01\x01\x02\x01\t\0\0\0\0\x01\t\0\0\x01\r\0\0\0\0\0V\x01\x01\x01\x02\0\0\x01\r\0\0\0\0\0\xf2\0\xf3\x01\x0f\0\xf2\0\xf3\x01\x11\x01\t\0\0\x01\r\0\0\0\0\0\0\x01\t\0\0\0V\0\0\x01\x01\x01\x02\0V\x01\x01\x01\x02\0\xf2\0\xf3\x01\x13\x01\t\0\0\0\0\0\xf2\0\xf3\x01\x15\x01\r\0\0\0\0\x01\r\0\0\0\0\0V\x01\x01\x01\x02\0\xf2\0\xf3\x01\x17\0\0\x01\x01\x01\x02\x01\t\0\0\0\0\0\0\x01\t\0\0\x01\r\0\0\0\0\0V\x01\x01\x01\x02\x01\r\0V\0\0\0\xf2\0\xf3\x01\x19\0\0\0\xf2\0\xf3\x01\x1b\x01\t\0\0\x01\r\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x02\0V\0\0\x01\x01\x01\x02\0\xf2\0\xf3\x01\x1d\x01\t\0\0\0\0\0\0\x01\t\x01\r\0\0\0\0\0\0\x01\r\0\0\0V\0\0\x01\x01\x01\x02\0\xf2\0\xf3\x01\x1f\0\0\0\xf2\0\xf3\x01!\0\0\0\0\x01\t\0\0\0\0\x01\r\0\0\0V\0\0\x01\x01\x01\x02\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0\xf2\0\xf3\x01#\x01\t\0\0\0\0\x01\r\0\0\0\0\0\0\x01\r\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x02\0\xf2\0\xf3\x01%\x01\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\r\0\0\0\0\0\0\x01\x01\x01\x02\0\xf2\x01\xbc\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\r\0\0\0\0\0\0\x01\x01\x01\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\r")]],ST=[0,[0,f("above"),68],[0,[0,f(w8),67],[0,[0,f(xI),66],[0,[0,f(xp),65],[0,[0,f(o5),64],[0,[0,f(o_),62],[0,[0,f(pn),61],[0,[0,f(yP),58],[0,[0,f("below"),57],[0,[0,f(y9),56],[0,agY,agX]]]]]]]]]]],Tg=[0,f(x7),313,8],Th=[0,f(x7),324,8],Td=f("%a\nUnexpected end of comment"),Te=f("%a\nUnterminated comment"),Tf=f("%a\nLexing error: %s"),S$=f('File "%s", line %i, characters %i-%i:\n'),Ta=f('File "%s", line %i, char %i to line %i, char %i:\n'),SU=f("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),SV=f("\x01\0\0\x01\x01\x01\0\0\x02\x03\x01\0\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\x01\0\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01"),SW=f("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),SX=f("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x04\x02\x05"),SY=f("\x01\0\0\x01\x01\x01\0\0\0\x01\x01\0\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\x01\0\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01"),SZ=f("\x01\0\0\x01\x01\x01\0\0\0\x01\x01\0\x02\x01\x01\0\0\0\0\0\0\0\0\0\0\x01\0\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01"),S0=f("\x01\0\0\x01\x01\x01\0\0\0\x01\x01\0\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\x01\0\x01\x01\x02\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01"),S1=f("\x01\0\0\x01\x01\x01\0\0\0\x01\x01\0\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\x01\0\x01\x02\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01"),S2=f("\x01\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\x01\0\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\xx02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02"),S3=f("\x01\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\xx02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02"),S4=f("\x01\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\x01\0\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\xx02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02"),S5=f("\x01\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),S6=f("\x01\0\0\x02"),S7=f("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\xx03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03"),S8=f('\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x05\x02\x02\x06\x07\b\x02\t\n\x0b\f\r\x0e\x0f\x07\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x11\x12\x13\x14\x15\x16\x17\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x19\x02\x1a\x1b\x1c\x02\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1e\x1d\x1d\x1d\x1d\x1d\x1d\x1f !\x16\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x02\x02\x02\x02\x02\x02\x02\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d"\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d'),S9=f("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01"),S_=f("<dummy>"),Tb=f("Lexer.LexingError"),Ti=f("__mz_adopter"),Tj=f(kj),Tk=f(hM),Tl=f(h2),Tn=[0,f(o5),[0,f(o_),[0,f(pn),[0,f(yP),[0,f("class"),[0,f("constraint"),[0,f(y2),[0,f("done"),[0,f(x2),[0,f(kA),[0,f(pm),ag2]]]]]]]]]]],TC=f(xo),TD=f(c),TA=f("|]"),TB=f("[|"),Tv=f("%c%c"),agr=f("dumb"),ags=f("TERM"),To=f("->"),Tp=f("=>"),Ts=f("<-"),Tt=f("tag of "),Tw=f(" and "),Ty=f(hR),TJ=f("<current>"),TI=f('Internal failure: unknown module: %s (while evaluating "open %s")'),TH=f("Internal failure: undefined variable or data constructor: %s"),TG=f("extend_qualified: %s::%s is already defined."),TF=f("Internal failure: unknown module: %s (while looking up %s::%s)"),Us=[0,f(a2),515,7],Ut=[0,f(a2),529,7],Uw=f("%aA fail instruction was encountered.\n"),Ux=[0,f(a2),570,7],Uy=f("_mz_array_max_length"),Uz=[0,f(a2),639,9],UA=[0,f(a2),709,6],UB=f("%aA take instruction failed.\n"),UC=f("%aMatch failure. No pattern matches this value:\n%s"),UD=[0,f(a2),yw,6],UJ=f("Interpreter: evaluating a lone module."),UI=f("Interpreter: evaluating module: %s."),UH=[0,f(a2),901,6],UG=[0,f(a2),874,6],UE=[0,f(a2),840,16],Uu=[0,f(a2),547,4],Uq=[0,f(a2),482,4],T1=f("_mz_address_eq"),T2=f("_mz_array_append_prim"),T3=f("_mz_array_create"),T4=f("_mz_array_get"),T5=f("_mz_array_length"),T6=f("_mz_array_set"),T7=f("_mz_array_unsafe_blit"),T8=f("_mz_array_unsafe_get"),T9=f("_mz_array_unsafe_set"),T_=f("_mz_array_unsafe_sub"),T$=f("_mz_iadd"),Ua=f("_mz_iand"),Ub=f("_mz_idiv"),Uc=f("_mz_ieq"),Ud=f("_mz_ige"),Ue=f("_mz_igt"),Uf=f("_mz_ile"),Ug=f("_mz_ilt"),Uh=f("_mz_imul"),Ui=f("_mz_ine"),Uj=f("_mz_isub"),Uk=f("_mz_magic"),Ul=f("_mz_print_value"),Um=f("%aUnknown builtin function: %s\n"),Up=f("%aInvalid length at array creation: %d.\n"),Uo=f("%aInvalid index at array access: %d (%d).\n"),Un=f("%aInvalid index at array update: %d (%d).\n"),T0=[0,f(a2),yu,6],TZ=[0,f(a2),366,6],TY=[0,f(a2),358,6],TX=[0,f(a2),350,6],TW=[0,f(a2),342,6],TV=[0,f(a2),334,6],TQ=f("Interpreter: failed to find the built-in data constructor: bool::%s"),TN=[0,f(a2),h5,4],TL=f(yb),TM=f("<fun>"),TK=f(c),TO=f(kj),TR=f("False"),TT=f("True"),Ur=f("Interpreter.MatchFailure"),UM=f(x$),UN=f(kx),UO=f(pE),UP=f(pf),UQ=[0,f(hK),41,6],UR=f(" ->"),UU=f(ke),UT=f(" @"),US=[0,f(hK),80,6],UV=f(y5),UW=[0,f(hK),kl,6],UX=f(" *"),UZ=f(pk),UY=f(pk),U0=f(pk),U1=[0,f(hK),158,6],U3=f(" adopts "),U2=[0,f(hK),178,4],U4=f(ke),U6=f("-1+2..4-5+6"),VR=[0,f(e9),774,6],VT=f(gh),VS=f("type or perm"),VU=[0,f(e9),934,6],VW=[0,f(e9),1204,8],VV=[0,f(e9),1171,10],VP=f(bP),VO=f(yJ),VN=f(yE),VM=f(yJ),VL=f(yE),Vv=f(b9),Vg=f("The consumes keyword is allowed only in the left-hand side of an arrow."),Vi=f("An assumption in a fact must bear on a type variable."),Vj=f("Implication => is permitted only on top of a function type."),Vk=f("The %s %s has not been defined."),Vl=f("The %s %s is defined twice."),Vm=f("The variable %s is fictional and cannot appear in an expression."),Vs=[0,f(e9),y8,6],Vn=[0,f(e9),200,7],Vo=f(xo),Vq=f(c),Vp=f("This type constructor expects %d argument%s."),Vr=f(yf),Vt=f("This type expects %d parameter%s, but is applied to %d argument%s."),Vu=f(yf),Vw=f("The conclusion of this fact must bear on the type %s."),Vx=f("Distinct facts must concern distinct modes.\nIn the declaration of %a, two distinct facts concern the mode %s."),Vy=f("The type %a carries an adopts clause: it should be declared mutable."),Vz=f("The fields are not those of the data constructor %a."),VA=[0,f(e9),h8,6],VE=f(xY),VG=f(yr),VF=f("\nThe following field%s missing: %a"),VB=f(xY),VD=f(yr),VC=f("\nThe following field%s superfluous: %a"),VH=f("The variable %a is advertised in the interface,\nbut is not defined in the implementation."),VI=f("This type is declared mutable, so there is no need to declare\nthe data constructor %s mutable."),VJ=f("The following is not a valid branch definition: %a"),Vh=f(e8),U$=f("variety = "),Va=f(hR),Vb=f("kind = "),Vc=f(hR),U_=f("fictional"),U9=f("real"),U7=f("level = %d"),U8=f("external point"),Vf=f("KindCheck.KindError"),V0=[0,f(pD),67,2],VZ=[0,f(pD),58,2],VY=[0,f(pD),62,4],V1=[0,f("lib/PersistentUnionFind.ml"),fb,13],V9=f(y4),V6=[0,f(kz),176,8],V5=[0,f(kz),157,8],V3=[0,f(kz),xH,6],V2=[0,f(kz),78,12],Wk=f(bN),Wl=f("Not a branch: %a"),W_=f("%a inconsistency detected: type %a has level %d, but env has level %d\n"),W8=f("Binding a new flexible before %a (level %d)"),W9=[0,6],W7=f("Must bind before a variable that's still flexible"),W5=f("Binding flexible #%d (%a) @ level %d"),W6=[0,6],WX=f("env (max_level = %d): %a"),WY=[0,6],WZ=f("sub_env: %a"),W0=[0,6],W1=f("kept %d flexible"),W2=[0,6],W3=f("we are dropping some flexible variables!"),WW=f("env.current_level = %d\n"),WT=f("Flexible #%d (original level=%d) is "),WU=f("not instantiated, level=%d\n"),WV=f("instantiated with %a\n"),WO=f("Kind mismatch when merging"),WP=f("%sMerging%s %a (level=%d) with %a (level=%d)"),WQ=[0,5],WR=f("\xe2\x86\x92 facts: merging %a into %a"),WS=[0,6],WJ=f("[VarMap] used in the presence of flexible variables"),WE=f("[instantiate_flex] wants flexible"),WF=[0,f(df),958,44],WG=f("%sInstantiating%s flexible #%d a.k.a. %a (level=%d) with %a (level=%d)"),WH=[0,f(df),968,8],WI=f("%s!! NOT instantiating !!%s\n  level(%a) = %d\n  level(%a) = %d"),WD=f(bN),WC=f(c),WB=f(c),Wy=f("Setting the definition of a type that had one in the first place"),Wx=f("Refining the variance of a type that didn't have one in the first place"),Ww=[0,f(df),573,6],Wv=f(yR),Wu=f(yR),Wt=[0,f(df),y6,6],Ws=[0,0,0],Wr=[0,f(df),484,12],Wq=[0,f(df),469,10],Wp=f("[assert_point] failed (%a is not a point)"),Wo=f("[assert_var] failed (%a is not a var)"),Wm=f(kf),Wg=[0,f(df),268,72],We=[0,f(df),267,73],Wd=[0,f(df),266,81],Wc=[0,f(df),265,74],V$=[0,f(bd),f(bM)],Wa=[0,f(a3),f(ca),f(b4),f(b3),f(ce),f(cb),f(bd),f(b7),f(b$),f(b5),f(bo),f(b8),f(bK),f(b_),f(b6),f(b2),f(bM),f(bJ)],Wb=[0,f(a3),f(bd)],Wh=f("<none>"),Wn=f("TypeCore.UnboundPoint"),W$=[0,0],Xa=f("\xe2\x8a\xa5"),Xb=[0,f("typing/Exports.ml"),92,15],Xg=f(c),Xh=f(bo),Xd=f(c),Xe=f(bo),Xc=f(bJ),Xj=[0,f(yl),151,77],Xi=[0,f(yl),150,79],Xm=f(c),Xn=f(c),Xo=f(a3),Xk=[0,f(b5),f(bJ),f(b4),f(b$),f(bd),f(b3),f(b2),f(bK),f(cV),f(bo),f(ce),f(ca),f(cb),f(bP),f(b1),f(b6),f(b_),f(b8),f(cU),f(b7),f(bM),f(a3)],Xl=[0,f(b1),f(cU),f(bJ),f(bP),f(bM),f(cV),f(b2),f(b6),f(b_),f(bK),f(b8),f(bo),f(b5),f(b$),f(b7),f(bd),f(cb),f(ce),f(b3),f(b4),f(ca),f(a3)],Xr=f(kf),Xq=f(xj),Xx=[0,f(dJ),fg,6],Xy=[0,f(dJ),44,6],Xz=[0,f(dJ),112,6],XA=[0,f(dJ),kp,6],XC=[0,f(dJ),em,6],XD=[0,f(dJ),x0,6],XB=[0,f(dJ),152,6],XE=[0,f(dJ),181,2],Xv=[0,f(dJ),29,43],Xt=f(yI),Xu=f(yI),Xs=f(xf),XM=f("No free variables"),XT=f("Bad internal usage of [flatten_star]."),X2=f("inst\xe2\x86\x92"),X1=f(xf),X3=f(kx),X4=f(pE),X5=f(pf),X6=f(ys),X7=f("TyBound("),X8=f(ke),X9=f(xv),X_=f(xI),Yc=f(" \xe2\x9a\xa0 inconsistent \xe2\x9a\xa0"),Yf=f(c),Yd=f("PERMISSIONS:"),Ye=f("FLOATING:"),Ya=f(kx),X$=f("Fact for"),X0=f(" : "),XY=f(cu),XZ=f(c),XW=f("Variable "),XX=f("The subexpression "),XU=f(hR),XV=f("[no name]"),XS=f(c),XQ=f(c),XO=[0,f(pj),367,40],XN=[0,f(pj),354,12],XL=f("This is not a concrete data type."),XK=[0,f(pj),235,12],XI=f("Not a ty_equals %a"),XH=f("Not a TyOpen %a"),XF=[0,f(a3),f(bd),f(bK),f(bM)],XG=[0,f(a3),f(bP),f(b1)],Yl=[0,f("typing/Derivations.ml"),209,27],Yh=f("Inconsistency in [prove_judgement]."),Yi=f("Inconsistency in [prove_judgement]"),Yj=[1,0],Ym=f("%a is flexible, bailing out of fold."),Yn=[0,5],Yo=f(xQ),Yp=[0,5],Yq=f("%a has no interesting permission, bailing out of fold."),Yr=[0,5],Ys=f(xQ),Yt=[0,5],Yu=f("All types should've been opened at that stage"),Yv=[0,f("typing/ResugarFold.ml"),76,6],Yw=f("Huh I don't think we should have that here"),YS=f("rule"),YT=f("using"),YU=f("none of the following worked:"),YX=f("no rule was found"),YV=f("because"),YW=f("could not"),Y4=f("No good explanation, sorry"),Y5=f(xA),Y6=f(xA),Y7=f("Here's one, among several possible reasons for failure: "),Y8=f("No idea how to prove the following: "),Zc=f("Inconsistency in the premises of a failed rule."),Y$=f("This function's only for failed derivations."),Za=f("This is atomic: %a\n"),Zb=[0,4],Y9=[0,f(w7),218,8],Y_=[0,f(w7),228,6],YY=f(c),Y1=f(bN),Y2=f("location(s) total"),Y3=f("is defined around there:"),YZ=f("The following permissions are available for it: "),Y0=f("No useful permissions are available for it."),Yx=f("succeed"),Yy=f("subtract:"),Yz=f("subtract"),YA=f(pe),YB=f("subtract permission"),YC=f("subtract a set of permissions"),YD=f("subtract floating permission"),YE=f(xE),YF=f(xE),YG=f("prove equality:"),YH=f("\xe2\x89\xa4"),YI=f(yT),YJ=f("\xe2\x89\xa5"),YK=f(yT),YL=f(xv),YM=f(o4),YN=f(o4),YO=f("perform:"),YP=f("t2 ="),YQ=f("t1 ="),YR=f("debug info:"),_E=f(xZ),_q=f("Debug is enabled, here's some verbose information."),_r=[0,1],_s=f("Last checked expression: %a at %a\n"),_t=[0,1],_u=f(e8),_v=[0,1],_w=f("%a\n\n"),_x=[0,1],_y=f("%s\n\n%!"),_z=[0,1],_A=f("%a\n%!"),_D=f(c),_B=f(xZ),_C=f("x11"),_k=f("file://%s/viewer/viewer.html?json_file=%s"),_l=f("--args"),_m=f("-a"),_n=f(kE),_o=f(kE),_p=f("-new-window"),_c=f(bN),_d=f("dot"),_e=f(xe),_f=f("root"),_g=f(yS),_h=f("sub_envs"),_i=f("merged_env"),_j=[0,f(gh),[0,bL,f("merge")]],Z_=f("error_message"),Z$=f(xe),_a=f(yS),_b=[0,f(gh),[0,bL,f("single")]],Z7=f("file_name"),Z8=f("current_location"),Z9=f("syntax"),Z4=f(py),Z5=f(dh),Z6=f("%s/viewer/data/%s.json"),Z2=f("dot -Tsvg"),Z3=f(bN),ZX=f(bN),ZU=[0,bL,f("user")],ZV=[0,bL,f("auto")],ZW=f(bN),ZY=f("permissions"),ZZ=f("kind"),Z0=f("locations"),Z1=f("names"),ZQ=f("col"),ZR=f("line"),ZS=f(pm),ZT=f("start"),ZP=f("pygmentize -l ocaml -f html -O encoding=utf-8 %s"),ZN=f("dot -Tx11"),ZO=f(bN),ZM=f("}"),ZI=f("digraph g {\n"),ZJ=f("graph [\n"),ZK=f('  rankdir = "BT"\n'),ZL=f(pB),Zt=f('"node%d":%s -> "node%d" [\n'),Zu=f(pB),ZC=f("_%d"),Zj=f("Need [unfold]"),Zk=f("<%s>%s"),Zh=f(pt),Zi=f(ke),ZD=f(kw),ZE=f(x$),ZF=f(kw),ZG=f(kw),ZH=f(c),Zl=f(bN),Zm=f(" +"),Zn=f(b9),Zo=f(e8),Zp=f(c),Zq=f("[<>| {}]"),Zr=f("\\\\\\0"),Zs=f("\xe2\x80\xa6"),Zv=f('"node%d" [\n'),Zw=f('  id = "node%d"\n'),Zx=f('  color = "#B00040"\n'),Zy=f('  label = "{{%s}|%s}"\n'),ZB=f('  label = "%s"\n'),Zz=f('  shape = "record"\n'),ZA=f(pB),Zd=f(kd),Ze=f("Darwin"),Zf=f("uname"),$n=f("No error for that number"),$m=f("Malformed warn-error list"),$l=f(bN),$k=f(kv),_G=f("\nPrinting permissions.\n\n%a"),_H=f("\nError message follows.\n\n"),_I=f("Recursive definitions are enabled for functions only"),_J=f("Functions take only one (tuple) argument"),_K=f("In this \xe2\x80\x9cgive e1 to e2\xe2\x80\x9d statement, please provide a type annotation for e1"),_L=f("The variance annotations do not match the inferred ones"),_M=f("This merge operation led us into trying to merge local types (see tests/local-types.mz). Discarding these types."),_N=f("You can only pack an existential"),_O=f("There is already a core module named %s which you can't override"),_P=f("There is a cyclic dependency on module %a"),_Q=f("%a is not a function, it has type:\n%a"),_R=f(bN),_S=f("Could not extract from this subexpression (named %a) the following type:\n%a\nsome explanations follow:\n%a\n\nHere's a tentatively short, potentially misleading error message.\n%a\n%a\n%a"),_T=f(bN),_U=f("Could not extract the following perm:\n%a\nsome explanations follow:\n%a\n\nHere's a tentatively short, potentially misleading error message.\n%a\n%a\n%a"),_V=f("Field %a is missing in that constructor"),_W=f("Field %a is superfluous in that constructor"),_X=f("%a has no field named %a.\n%a"),_Y=f("%a cannot be assigned a tag.\n%a"),_Z=f("The pattern %a mentions field %a which is unknown for that branch"),_0=f("%a cannot be matched with pattern %a.\n%a"),_1=f("This pattern mentions field %a but data constructor %a has no such field"),_2=f("%a doesn't have a type with two constructors.\n%a"),_3=f("%a cannot be matched with data constructor %a.\n%a"),_4=f("%a cannot be matched as a tuple.\n%a"),_5=f("This value has type %a: constructor %a belongs to a data type that is not defined as exclusive"),_6=f("This value has type %a: constructor %a belongs to a data type that does not have the same number of fields"),_7=f("Exclusive resource allocation conflict on %a"),_8=f("Merging distinct constructors into a nominal type with type parameters, results are unpredictable, you should consider providing annotations for %a"),_9=f("The context provides a type annotation, namely %a but here is a type annotation, namely %a, that is conflicting the context-provided type annotation"),__=f("While applying type %a: this type has kind %a but the sub-expression has a polymorphic type with kind %a"),_$=f("%a does not have a polymorphic type.\n%a"),$a=f("Type %a cannot be adopted, because it is not exclusive"),$b=f("Trying to give/take to/from %a but this expression cannot adopt; the only permissions available for it are %a"),$c=f("%a cannot be taken, as it has no dynamic type.\n%a"),$d=f("%a is given or taken. There is a mismatch: the adopter adopts %a.\n%a"),$e=f("While merging %a and %a, it turns out they have different adopts clauses, namely %a and %a; I refuse to merge these, so please annotate using identical adopts clauses"),$f=f("This file exports a variable named %a, but it does not have type %a. Here's a tentatively short, potentially misleading error message.\n%a\n%a\n%a"),$g=f("Cannot match the definition of %a (from %a.mz) against the signature (from %a.mzi) because of: %s"),$h=f("This module exports variable %a with a non-duplicable type, this is no longer allowed"),$i=f("We instantiated %a as %a"),$j=f("Several function types can be used for calling %a, picking an arbitrary one."),_F=f("TypeErrors.TypeCheckerError"),$p=f("[infer] %a"),$q=[0,10],$r=f("There should be no bound variables here."),$s=[0,f(kg),269,6],$t=[0,f(kg),yL,8],$u=f("[has_mode] %a"),$v=[0,10],$y=[0,f(kg),492,8],$w=f("fact [is_ok=%b] for %a: %a"),$x=[0,10],$o=[0,f(kg),81,24],$G=f("Before instantiation: %a"),$H=f("After instantiation: %a"),$J=[0,f(kt),65,6],$M=[0,f(kt),84,6],$O=f("Wrong variable count for [psubst]"),$P=f("You ran a pattern through [psubst] twice"),$Q=[0,f(kt),148,61],$V=f(o5),$W=[0,4],$X=f(o_),$Y=f(xJ),$Z=f(ys),$0=f("EVar("),$1=f(y9),$2=f(h0),$3=f(hY),$4=f(h0),$5=f(xM),$6=f(hY),$7=f(h0),$8=f("[some data type group]"),$9=f(hY),$_=f(pF),$$=[1,0],aaa=f("lambda "),aab=f(pn),aac=f(y3),aad=f(ym),aae=f(pG),aaf=[0,0],aag=f(pr),aah=f(ky),aai=f(pG),aaj=f(kA),aak=f(kF),aal=f(ko),aam=f(pg),aan=f(xu),aao=f(pe),aap=f(yd),aaq=f(ye),aar=f(" rec"),aas=f(pd),$U=[0,f(kt),704,4],$T=f("::invalid::"),$I=[1,0],aaO=f("Instantiate"),aaP=f("[unify p1 p2] expects [p1] and [p2] to be variables with kind term, not type"),aaX=f("Datacon order invariant"),aaQ=f("You can only add permissions to a var that represents a program identifier."),aa4=f("Notice: not adding %a to %a because its left-hand side is flexible"),aa5=[0,1],aaR=f("%s[%sadding to %a] %a"),aaS=[0,4],aaT=f("%s]%s (exists)"),aaU=[0,4],aaV=f("%s]%s (two exclusive perms!)"),aaW=[0,4],aaZ=[0,f(er),542,14],aaY=[0,f(er),543,14],aa0=f("%s]%s (singleton)"),aa1=[0,4],aa2=f("%s]%s (and-constraints)"),aa3=[0,4],aa6=f("This function only works with types of kind perm."),aa9=f("[add_perm] %a"),aa_=[0,4],aa7=f("Notice: not adding permission %a because its left-hand side is flexible"),aa8=[0,1],abc=f("Add"),abd=[0,0],abe=f("Maybe-Duplicable"),aa$=f("You can only subtract permissions from a var that represents a program identifier."),aba=f("Inconsistent"),abb=f("Must-Be-Singleton"),abf=f("Try-Perms"),abg=f("Constraint"),abh=f("Constraints"),abj=f("stwu-ng"),abk=[0,f(er),yw,8],abi=f("With-Unfolding"),abZ=f("%sArrow / End -- adding back permissions%s"),ab0=[0,4],abX=f("%sArrow / Arrow, facts%s"),abY=[0,4],abV=f("%sArrow / Arrow, right%s"),abW=[0,4],abO=f(x6),abF=f("Invariance"),abG=f("Covariance"),abH=f("Contravariance"),abI=f("Bivariance"),abl=f("[sub_type] %a %s\xe2\x80\x94%s %a"),abm=[0,4],abn=f("Equal"),abA=f("Flex-L-Tuple"),abB=f("Flex-L-Concrete"),abz=f("Flex-L"),abC=f(w$),abD=f(yX),abE=f("Intro-Flex"),abJ=f("Application"),abK=f("Flex-R-Tuple"),abL=f("Tuple"),abM=f("Flex-R-Concrete"),abN=f("Fold-L"),abR=[0,f(er),991,8],abQ=[0,f(er),992,8],abP=f("Concrete"),abS=f("Singleton"),abT=f("%sArrow / Arrow, left%s"),abU=[0,4],ab1=f("Arrow"),ab2=f("[add_sub] entering..."),ab3=[0,4],ab4=f("Bar-vs-Bar"),aby=f("Flex-R"),abw=f("Fold-L-2"),abx=f("And-L"),abu=f("Forall-R"),abv=f("And-R"),abt=[0,f(er),925,6],abs=f(yX),abr=f(w$),abq=f("Wrap-Bar-R"),abp=f("Wrap-Bar-L"),abo=f("Singleton-Fold"),ab5=f("About to add %a"),ab6=f(xN),ab$=f("[add_sub] final case\n   ps1: %a\n   ps2: %a"),aca=[0,4],acg=f("This was meant to be solved by [strip_syntactically_equal]!"),ace=[0,f(er),1342,8],acf=[0,f(er),1340,8],acc=f("Add-sub case #2"),acd=[0,5],acb=f(xN),ab9=f("[add_sub] ended up with ps1=%a, ps2=%a"),ab_=[0,4],ach=f("Remaining-Add-Sub"),ab7=f("[add_sub] starting with ps1=%a, ps2=%a"),ab8=[0,4],aci=f("Add-Sub"),acj=f("This type does not have kind perm"),acp=f("[sub_perm] %a"),acq=[0,4],ack=f("Sub-Empty"),acl=f("Exists-Perm-R"),acm=f("Sub-Anchored-Double-Flex"),acn=f("Sub-Anchored"),aco=f("Sub-Star"),acr=f("Perms"),acs=f("Star not flattened: %a (%a)"),act=f("Floating-In-Env"),aaK=[0,0,0,0],aaJ=f(bp),aaI=f(c),aaH=f("flt"),aaG=f("frc"),aaF=f("sp"),aaD=[0,0],aaE=[6,[0,0]],aaC=f(py),aaB=f("Star not flattened"),aaA=f("Merge-Left"),aaz=f("%a inconsistency detected: not one singleton type for %a\n%a\n"),aay=f("%a inconsistency detected: more than one exclusive type for %a\n%a\n"),aav=[0,f(b5),f(bJ),f(b4),f(b$),f(bd),f(b3),f(b2),f(bK),f(cV),f(bo),f(ce),f(ca),f(cb),f(bP),f(b1),f(b6),f(b_),f(b8),f(cU),f(b7),f(bM),f(a3)],aaw=[0,f(b1),f(cU),f(bJ),f(bP),f(bM),f(cV),f(b2),f(b6),f(b_),f(bK),f(b8),f(bo),f(b5),f(b$),f(b7),f(bd),f(cb),f(ce),f(b3),f(b4),f(ca),f(a3)],aax=[0,f(a3),f(bP),f(b1)],acw=f("Illegal wildcard (FIXME: turn this into a real error message)"),acx=f("/root"),acD=f("[clean_pattern] should've been called on that type before!"),acE=f("/_"),acF=[0,0,0],acG=[0,0,0],acI=f("/a"),acH=f("/arg"),acJ=f(xU),acK=[15,0],acL=[15,0],acM=[1,0],acN=[1,0],acO=f(xU),acP=f("/max"),acQ=f("<="),acR=f(gd),acW=f(">="),acX=f(ct),acY=f(xS),acZ=f(gd),ac0=f(kH),ac1=f(ct),acS=[0,[22,1],0],acT=[15,0],acU=f(pl),acV=[1,0],ac4=f("[translate_interface]\n%a"),ac5=[0,10],ac2=f("[translate_implementation]\n%a"),ac3=[0,10],acB=[0,0,0],acC=f("%a nested type annotations are forbidden"),acz=[0,f(kr),376,15],acA=[0,f(kr),392,2],acy=[0,f(kr),335,23],acu=[0,f(kr),80,6],ada=f("different definitions between %a and %a"),ac9=f("kinds"),adc=f("variance"),ac_=f("facts"),adb=f("abbreviations not compatible"),ac$=f("definition mismatch"),add=[0,f(ph),cc,8],ade=f("*** Checking sig item %a"),adf=[0,3],adg=f("\nDerivation for %a: %a\n"),adh=[0,6],ac7=[0,f(ph),72,8],ac8=[0,f(ph),52,50],ac6=f("Massive import, %a"),adn=f("FACTS:"),ado=f("KINDS:"),adk=f(xp),adj=f(xt),adi=f(w8),adp=f(hR),adq=f("Found dependencies for %a (left-to-right) = %s"),aet=[0,0,0,0],aeu=[0,0,0,0],adN=f("[merge_vars] %a / %a / %a."),adO=[0,3],adP=f("FIXME wicked wicked case"),adQ=f("  \xe2\x86\x92 this merge between %a and %a was succesful (got: %a)"),adR=[0,4],aed=f("\xe2\x86\x92 fast_path, the types are equal in the original environment, don't touch them"),aee=[0,5],ad_=f(yD),aea=f(yD),ad6=f("Sanity check failed"),ad7=f("  [p2p] %b, %b"),ad8=[0,5],aeb=f("Kinds inconsistent!"),aec=f("Remove this when we have a testcase, and try to understand what's happening, and whether it's correct!"),ad$=f(xL),ad9=f(xL),ad4=f("[cons_vs_cons] subtractions performed, got: %a vs %a"),ad5=[0,3],adZ=f(x6),ad0=f("[cons_vs_cons] left"),ad1=[0,4],ad2=f("[cons_vs_cons] right"),ad3=[0,4],adX=[0,f(pp),971,16],adY=[0,f(pp),980,16],adS=f("merge_var"),adT=f("  [push_job] %a / %a / %a"),adU=[0,4],adV=f("  [merge_type] %a with %a"),adW=[0,4],aef=f("[merge_type_with_unfolding] %a"),aeg=f("mtwu"),adI=f("\n--------- START MERGE @ %a (annot: %b) ----------\n\n%a\n\n"),adJ=[0,3],adK=f("merge_root"),adL=f("[make_base] annot: %a"),adM=[0,4],adA=f("\n------------ LEFT --------------\n\n%a"),adB=[0,3],adC=f("\n------------ RIGHT -------------\n\n%a"),adD=[0,3],adE=f("\n------------ DEST -------------\n\n%a"),adF=[0,3],adG=f(y0),adH=[0,3],ads=f("[oracle] merge job %a \xe2\x86\x92 %a"),adt=[0,3],adu=f(yv),adv=f("[oracle] processing job %a / %a / %a."),adw=[0,3],adx=f("[oracle] discarding job since %a has been visited already"),ady=[0,4],adz=[0,f(pp),h5,23],adr=f(yv),aeh=f("\nInitial floating permissions: %a (extracted with annot: %a)"),aei=[0,3],aej=f("\nRemaining floating permissions (left): %a"),aek=[0,3],ael=f("\nRemaining floating permissions (right): %a"),aem=[0,3],aen=f("\nMerged floating permissions: %a\n"),aeo=[0,3],aep=f("\n--------- END MERGE ----------\n\n%a"),aeq=[0,3],aer=f(y0),aes=[0,3],aeP=f("[type_for_function_def], as the name implies, expects a function expression..."),aeQ=f("[unify_pattern] takes a pattern that has been run through [subst_pat] first"),aeR=f("Bad desugaring?!!"),afh=[0,f(hV),1035,12],afg=f("[perm] must be a nominal type, and we don't allow the user to declare a nominal type that adopts [ty_bottom]."),afc=[0,f(hV),966,18],ae_=[0,f(hV),781,22],ae6=[0,1],ae7=[0,0],aeY=f("/x_"),aeS=f(pl),aeT=f(pl),aeU=f(kj),aeV=f(kj),aeW=f(y1),aeX=f(y1),aeZ=f("/inconsistent"),ae0=f("[check_expression] expects an expression where all variables has been opened"),ae1=f("Please annotate your builtins"),ae2=f(pF),ae3=[0,f(hV),633,48],ae4=f(bN),ae5=[0,8],ae8=f(pq),ae9=f(pF),ae$=f("_inst"),afa=f(ky),afb=f(ko),afd=f("Contradicts [is_data_type_with_two_constructors]"),afe=f(kF),aff=f(kA),aeL=f("Expecting return type %a; permissions for the var: %a"),aeM=[0,4],aeN=f("%a\n------------\n"),aeO=[0,4],aeB=f("[sub-annot]"),aeC=[0,5],aeD=f("[sub-annot SUCCEEDED]"),aeE=[0,5],aeF=f("[check_function_call] %a - %a"),aeG=[0,5],aez=[0,f(hV),191,8],aex=f("[check_function_call], f = %a, x = %a, env below\n\n%a\n"),aey=[0,5],aeA=[0,0,0],aeH=f("[check_function_call] subtraction succeeded \\o/"),aeI=[0,5],aeJ=f("\nDerivation: %a\n"),aeK=[0,6],aev=f("Several concrete permissions. Weird, but maybe ok."),aew=[0,5],af4=f(x5),af2=f(fd),af3=f(xG),af0=f(kv),af1=f(kv),afZ=f(x5),afV=f(fd),afW=f(x_),afX=f(hX),afY=f(xG),afO=f("The parser should forbid this"),afK=f("\n%s***%s Processing data type group:\n%a"),afL=[0,2],afM=f("\n%s***%s Processing declarations:\n%a"),afN=[0,2],afP=f("\n%s***%s Done type-checking:\n%a"),afQ=[0,2],afG=f("\n%s***%s Computing dependencies for %a"),afH=[0,2],afI=f("\n%s***%s Importing the dependencies of %a in scope"),afJ=[0,2],afR=f("\n%s***%s Type-checking the implementation of %a, environment so far:\n\n%a"),afS=[0,2],afT=f("\n%s***%s Matching %a against its signature"),afU=[0,2],afF=f(fd),afE=f(hX),afB=f(kf),afC=f("Unable to find a file named %s"),afx=f(fd),afy=f(hX),afz=f("In core directory? %b"),afA=f(fd),afw=f("autoload"),afs=[0,f(hS),f(c)],aft=f(hS),afu=f(xz),afv=f(hS),afn=f("Lexing error at offset %i\n"),afo=f("Invalid code var %i at offset %i\n"),afp=f("%a\nError: Syntax error\n"),afq=f(kv),afr=f("Exception during lexing/parsing: %s@."),afi=f(fd),afj=f(fd),afk=f(hX),afl=f(hX),afm=f("chop_mz_or_mzi"),afD=f("::toplevel"),agq=f("Editor successfully loaded, hit Ctrl-M or Command-M.\n"),agj=f(dh),agg=f(hS),agh=f(xr),agi=f(bp),agk=f("demos"),agl=f(xr),agm=f(hS),agn=f("message"),ago=f("message error-message"),agp=f("timestamp"),af9=f("Not backtrace"),agf=f("Type-checked and interpreted"),age=f("Type-checked"),agd=f("Interpreted"),aga=f("Did nothing"),agb=f("%s successfully (in about %.2fs)\n"),agc=f("Mezzo terminated abruptly\n"),af_=f("Mezzo threw an Exception : %s, %s\n%s\n."),af$=f("Mezzo threw an Exception : %s\n"),af6=f(yU),af7=[0,0],af5=f("/dev/null");function
aT(a){throw[0,cf,a]}function
S(a){throw[0,di,a]}var
fh=[0,zz];function
eu(a,b){return or(a,b)?a:b}function
cw(a,b){return wR(a,b)?a:b}function
pT(a){return 0<=a?a:-a|0}function
gm(a){return a^-1}var
zA=xn,dj=km;function
u(a,b){var
c=a.getLen(),e=b.getLen(),d=ae(c+e|0);cR(a,0,d,0,c);cR(b,0,d,c,e);return d}function
ic(a){if(0<=a)if(!(X<a))return a;return S(zB)}function
cW(a){return f(c+a)}function
D(a,b){if(a){var
c=a[1];return[0,c,D(a[2],b)]}return b}var
pU=os(0),cx=j8(1),ev=j8(2);function
kP(a){return j8(ot(a,zG,438))}function
zH(a){var
b=ah1(0);for(;;){if(b){var
c=b[2],d=b[1];try{j9(d)}catch(f){}var
b=c;continue}return 0}}function
fi(a,b){return wS(a,b,0,b.getLen())}function
gn(a,b,c,d){if(0<=c)if(0<=d)if(!((b.getLen()-d|0)<c))return wS(a,b,c,d);return S(zI)}function
go(a){j9(a);return wT(a)}function
pV(a,b,c){return os(ot(c,a,b))}function
kQ(a){return pV(zJ,0,a)}function
zK(a){return pV(zL,0,a)}function
gp(a,b,c,d){if(0<=c)if(0<=d)if(!((b.getLen()-d|0)<c))return j_(a,b,c,d);return S(zM)}function
gq(a){fi(cx,a);wU(cx,10);return j9(cx)}function
pW(a,b){return u(a,u(zO,b))}var
kR=[0,zH];function
kS(a){return h(kR[1],0)}function
dN(a){kS(0);return aik(a)}ou(zQ,kS);function
fj(a){return wT(a)}function
pX(a,b){return wU(a,b)}function
id(a){return j9(a)}function
pY(a,b,c){if(0<=c)if(!((a.length-1-c|0)<b))return ov(a,b,c);return S(zR)}function
fk(a,b,c,d,e){if(0<=e)if(0<=b)if(!((a.length-1-e|0)<b))if(0<=d)if(!((c.length-1-e|0)<d))return ahg(a,b,c,d,e);return S(zS)}function
dO(a,b){var
d=b.length-1;if(0===d)return[0];var
e=$(d,h(a,b[0+1])),f=d-1|0,g=1;if(!(f<1)){var
c=g;for(;;){e[c+1]=h(a,b[c+1]);var
i=c+1|0;if(f!==c){var
c=i;continue}break}}return e}function
pZ(a){var
b=a.length-1-1|0,c=0;for(;;){if(0<=b){var
d=[0,a[b+1],c],b=b-1|0,c=d;continue}return c}}function
x(a){var
c=0,b=a;for(;;){if(b){var
c=c+1|0,b=b[2];continue}return c}}function
a4(a){return a?a[1]:aT(zT)}function
ie(a){return a?a[2]:aT(zU)}function
fl(a,b){if(0<=b){var
c=a,d=b;for(;;){if(c){var
e=c[2],f=c[1];if(0===d)return f;var
c=e,d=d-1|0;continue}return aT(zV)}}return S(zW)}function
ew(a,b){var
c=a,d=b;for(;;){if(c){var
e=[0,c[1],d],c=c[2],d=e;continue}return d}}function
L(a){return ew(a,0)}function
fm(a){if(a){var
b=a[1];return D(b,fm(a[2]))}return 0}function
p(a,b){if(b){var
c=b[2],d=h(a,b[1]);return[0,d,p(a,c)]}return 0}function
p0(a,b,c){if(c){var
d=c[2],e=j(b,a,c[1]);return[0,e,p0(a+1|0,b,d)]}return 0}function
kT(a,b){return p0(0,a,b)}function
M(a,b){var
c=b;for(;;){if(c){var
d=c[2];h(a,c[1]);var
c=d;continue}return 0}}function
w(a,b,c){var
e=b,d=c;for(;;){if(d){var
f=d[2],e=j(a,e,d[1]),d=f;continue}return e}}function
aH(a,b,c){if(b){var
d=b[1];return j(a,d,aH(a,b[2],c))}return c}function
dk(a,b,c){if(b){if(c){var
d=c[2],e=b[2],f=j(a,b[1],c[1]);return[0,f,dk(a,e,d)]}}else
if(!c)return 0;return S(zX)}function
ig(a,b,c){var
e=b,d=c;for(;;){if(e){if(d){var
f=d[2],g=e[2];j(a,e[1],d[1]);var
e=g,d=f;continue}}else
if(!d)return 0;return S(zY)}}function
bf(a,b,c,d){var
g=b,f=c,e=d;for(;;){if(f){if(e){var
h=e[2],i=f[2],g=k(a,g,f[1],e[1]),f=i,e=h;continue}}else
if(!e)return g;return S(zZ)}}function
gr(a,b){var
c=b;for(;;){if(c){var
e=c[2],d=h(a,c[1]);if(d){var
c=e;continue}return d}return 1}}function
aB(a,b){var
c=b;for(;;){if(c){var
e=c[2],d=h(a,c[1]);if(d)return d;var
c=e;continue}return 0}}function
ih(a,b,c){var
e=b,d=c;for(;;){if(e){if(d){var
g=d[2],h=e[2],f=j(a,e[1],d[1]);if(f){var
e=h,d=g;continue}return f}}else
if(!d)return 1;return S(z0)}}function
ex(a,b){var
c=b;for(;;){if(c){var
e=c[2],d=0===bI(c[1],a)?1:0;if(d)return d;var
c=e;continue}return 0}}function
p1(a,b){var
c=b;for(;;){if(c){var
d=c[1]===a?1:0,e=c[2];if(d)return d;var
c=e;continue}return 0}}function
cY(a,b){var
c=b;for(;;){if(c){var
d=c[1],e=c[2];if(h(a,d))return d;var
c=e;continue}throw[0,o]}}function
aN(f){var
g=0;return function(a){var
c=g,b=a;for(;;){if(b){var
d=b[2],e=b[1];if(h(f,e)){var
c=[0,e,c],b=d;continue}var
b=d;continue}return L(c)}}}function
kU(a,b){var
e=0,d=0,c=b;for(;;){if(c){var
g=c[2],f=c[1];if(h(a,f)){var
e=[0,f,e],c=g;continue}var
d=[0,f,d],c=g;continue}var
i=L(d);return[0,L(e),i]}}function
bt(a){if(a){var
b=a[1],d=b[2],e=b[1],c=bt(a[2]);return[0,[0,e,c[1]],[0,d,c[2]]]}return z1}function
dP(a,b){if(a){if(b){var
c=b[1],d=a[1];return[0,[0,d,c],dP(a[2],b[2])]}}else
if(!b)return 0;return S(z2)}function
p2(a,b){var
d=a,c=b;for(;;){if(0===d)return c;if(c){var
d=d-1|0,c=c[2];continue}throw[0,l,z3]}}function
dQ(c,b){function
k(a,b){if(2===a){if(b){var
r=b[2];if(r){var
k=r[1],l=b[1];return 0<j(c,l,k)?[0,k,[0,l,0]]:[0,l,[0,k,0]]}}}else
if(3===a)if(b){var
n=b[2];if(n){var
s=n[2];if(s){var
d=s[1],e=n[1],f=b[1];return 0<j(c,f,e)?0<j(c,f,d)?0<j(c,e,d)?[0,d,[0,e,[0,f,0]]]:[0,e,[0,d,[0,f,0]]]:[0,e,[0,f,[0,d,0]]]:0<j(c,e,d)?0<j(c,f,d)?[0,d,[0,f,[0,e,0]]]:[0,f,[0,d,[0,e,0]]]:[0,f,[0,e,[0,d,0]]]}}}var
m=a>>1,v=p2(m,b),w=q(m,b),i=w,h=q(a-m|0,v),g=0;for(;;){if(i){if(h){var
o=h[1],p=i[1],t=h[2],u=i[2];if(0<j(c,p,o)){var
i=u,g=[0,p,g];continue}var
h=t,g=[0,o,g];continue}return ew(i,g)}return ew(h,g)}}function
q(a,b){if(2===a){if(b){var
r=b[2];if(r){var
l=r[1],m=b[1];return 0<j(c,m,l)?[0,m,[0,l,0]]:[0,l,[0,m,0]]}}}else
if(3===a)if(b){var
o=b[2];if(o){var
s=o[2];if(s){var
d=s[1],e=o[1],f=b[1];return 0<j(c,f,e)?0<j(c,e,d)?[0,f,[0,e,[0,d,0]]]:0<j(c,f,d)?[0,f,[0,d,[0,e,0]]]:[0,d,[0,f,[0,e,0]]]:0<j(c,f,d)?[0,e,[0,f,[0,d,0]]]:0<j(c,e,d)?[0,e,[0,d,[0,f,0]]]:[0,d,[0,e,[0,f,0]]]}}}var
n=a>>1,v=p2(n,b),w=k(n,b),i=w,h=k(a-n|0,v),g=0;for(;;){if(i){if(h){var
p=h[1],q=i[1],t=h[2],u=i[2];if(0<j(c,q,p)){var
h=t,g=[0,p,g];continue}var
i=u,g=[0,q,g];continue}return ew(i,g)}return ew(h,g)}}var
a=x(b);return 2<=a?k(a,b):b}function
aK(a){if(0<=a)if(!(X<a))return a;return S(z4)}function
ey(a){var
b=65<=a?90<a?0:1:0;if(!b){var
c=hN<=a?x3<a?0:1:0;if(!c){var
d=216<=a?222<a?1:0:1;if(d)return a}}return a+32|0}function
ii(a){var
b=97<=a?yM<a?0:1:0;if(!b){var
c=gf<=a?ac<a?0:1:0;if(!c){var
d=e$<=a?h8<a?1:0:1;if(d)return a}}return a+kh|0}function
aU(a,b){var
c=ae(a);ahp(c,0,a,b);return c}function
p3(a){var
b=a.getLen(),c=ae(b);cR(a,0,c,0,b);return c}function
Y(a,b,c){if(0<=b)if(0<=c)if(!((a.getLen()-c|0)<b)){var
d=ae(c);cR(a,b,d,0,c);return d}return S(z$)}function
cy(a,b,c,d,e){if(0<=e)if(0<=b)if(!((a.getLen()-e|0)<b))if(0<=d)if(!((c.getLen()-e|0)<d))return cR(a,b,c,d,e);return S(Aa)}function
dR(d,b){if(b){var
a=b[1],g=[0,0],f=[0,0],h=b[2];M(function(a){g[1]++;f[1]=f[1]+a.getLen()|0;return 0},b);var
e=ae(f[1]+hB(d.getLen(),g[1]-1|0)|0);cR(a,0,e,0,a.getLen());var
c=[0,a.getLen()];M(function(a){cR(d,0,e,c[1],d.getLen());c[1]=c[1]+d.getLen()|0;cR(a,0,e,c[1],a.getLen());c[1]=c[1]+a.getLen()|0;return 0},h);return e}return Ab}function
p4(a,b){var
d=b.getLen();if(0===d)return b;var
e=ae(d),f=d-1|0,g=0;if(!(f<0)){var
c=g;for(;;){e.safeSet(c,h(a,b.safeGet(c)));var
i=c+1|0;if(f!==c){var
c=i;continue}break}}return e}function
kV(a){return p4(ey,a)}function
p5(a,b){if(0===b.getLen())return b;var
c=p3(b);c.safeSet(0,h(a,b.safeGet(0)));return c}function
p6(a,b,c,d){var
e=c;for(;;){if(b<=e)throw[0,o];if(a.safeGet(e)===d)return e;var
e=e+1|0;continue}}function
gs(a,b){return p6(a,a.getLen(),0,b)}function
fn(a,b){return hC(a,b)}var
cg=ail(0)[1],fo=aij(0),ij=(1<<(fo+hL|0))-1|0,dl=hB(fo/8|0,ij)-1|0;function
cZ(a,b,c){var
e=j$(a,b,c);if(0<=e){c[11]=c[12];var
d=c[12];c[12]=[0,d[1],d[2],d[3],c[4]+c[6]|0]}return e}function
ik(a,b,c){var
e=ah7(a,b,c);if(0<=e){c[11]=c[12];var
d=c[12];c[12]=[0,d[1],d[2],d[3],c[4]+c[6]|0]}return e}function
fp(a){var
b=[0],c=1,d=0,e=0,f=0,g=0,h=0,i=a.getLen(),j=u(a,Ag);return[0,function(a){a[9]=1;return 0},j,i,h,g,f,e,d,c,b,il,il]}function
kW(a){var
b=a[6]-a[5]|0,c=ae(b);cR(a[2],a[5],c,0,b);return c}function
aV(a,b,c){var
d=c-b|0,e=ae(d);cR(a[2],b,e,0,d);return e}function
eA(a,b){return a[2].safeGet(b)}function
p9(g){function
p(a){return a?a[4]:0}function
e(a,b,c){var
d=a?a[4]:0,e=c?c[4]:0,f=e<=d?d+1|0:e+1|0;return[0,a,b,c,f]}function
f(a,b,c){var
g=a?a[4]:0,h=c?c[4]:0;if((h+2|0)<g){if(a){var
d=a[3],k=a[2],i=a[1],m=p(d);if(m<=p(i))return e(i,k,e(d,b,c));if(d){var
n=d[2],o=d[1],q=e(d[3],b,c);return e(e(i,k,o),n,q)}return S(Ah)}return S(Ai)}if((g+2|0)<h){if(c){var
j=c[3],l=c[2],f=c[1],r=p(f);if(r<=p(j))return e(e(a,b,f),l,j);if(f){var
s=f[2],t=f[1],u=e(f[3],l,j);return e(e(a,b,t),s,u)}return S(Aj)}return S(Ak)}var
v=h<=g?g+1|0:h+1|0;return[0,a,b,c,v]}function
i(a,b){if(b){var
d=b[3],c=b[2],e=b[1],h=j(g[1],a,c);return 0===h?b:0<=h?f(e,c,i(a,d)):f(i(a,e),c,d)}return[0,0,a,0,1]}function
t(a){return[0,0,a,0,1]}function
y(a,b){if(b){var
c=b[3],d=b[2];return f(y(a,b[1]),d,c)}return t(a)}function
z(a,b){if(b){var
c=b[2],d=b[1];return f(d,c,z(a,b[3]))}return t(a)}function
d(a,b,c){if(a){if(c){var
g=c[4],h=a[4],i=c[3],j=c[2],k=c[1],l=a[3],m=a[2],n=a[1];return(g+2|0)<h?f(n,m,d(l,b,c)):(h+2|0)<g?f(d(a,b,k),j,i):e(a,b,c)}return z(b,a)}return y(b,c)}function
q(a){var
b=a;for(;;){if(b){var
c=b[1];if(c){var
b=c;continue}return b[2]}throw[0,o]}}function
a(a){var
b=a;for(;;){if(b){var
c=b[3],d=b[2];if(c){var
b=c;continue}return d}throw[0,o]}}function
u(a){if(a){var
b=a[1];if(b){var
c=a[3],d=a[2];return f(u(b),d,c)}return a[3]}return S(Al)}function
k(a,b){if(a){if(b){var
c=u(b);return d(a,q(b),c)}return a}return b}function
c(a,b){if(b){var
e=b[3],f=b[2],h=b[1],l=j(g[1],a,f);if(0===l)return[0,h,1,e];if(0<=l){var
i=c(a,e),m=i[3],n=i[2];return[0,d(h,f,i[1]),n,m]}var
k=c(a,h),o=k[2],p=k[1];return[0,p,o,d(k[3],f,e)]}return Am}var
G=0;function
H(a){return a?0:1}function
I(a,b){var
c=b;for(;;){if(c){var
f=c[3],h=c[1],d=j(g[1],a,c[2]),e=0===d?1:0;if(e)return e;var
i=0<=d?f:h,c=i;continue}return 0}}function
v(a,b){if(b){var
c=b[3],e=b[2],d=b[1],h=j(g[1],a,e);if(0===h){if(d){if(c){var
i=u(c);return f(d,q(c),i)}return d}return c}return 0<=h?f(d,e,v(a,c)):f(v(a,d),e,c)}return 0}function
l(a,b){if(a){if(b){var
g=b[4],e=b[2],h=a[4],f=a[2],m=b[3],n=b[1],o=a[3],p=a[1];if(g<=h){if(1===g)return i(e,a);var
j=c(f,b),q=j[1],r=l(o,j[3]);return d(l(p,q),f,r)}if(1===h)return i(f,b);var
k=c(e,a),s=k[1],t=l(k[3],m);return d(l(s,n),e,t)}return a}return b}function
m(a,b){if(a){if(b){var
f=a[3],g=a[2],h=a[1],e=c(g,b),i=e[1];if(0===e[2]){var
j=m(f,e[3]);return k(m(h,i),j)}var
l=m(f,e[3]);return d(m(h,i),g,l)}return 0}return 0}function
n(a,b){if(a){if(b){var
f=a[3],g=a[2],h=a[1],e=c(g,b),i=e[1];if(0===e[2]){var
j=n(f,e[3]);return d(n(h,i),g,j)}var
l=n(f,e[3]);return k(n(h,i),l)}return a}return 0}function
r(a,b){var
c=a,d=b;for(;;){if(c){var
e=[0,c[2],c[3],d],c=c[1],d=e;continue}return d}}function
A(a,b){var
m=r(b,0),d=r(a,0),c=m;for(;;){if(d){if(c){var
f=c[3],h=c[2],i=d[3],k=d[2],e=j(g[1],d[1],c[1]);if(0===e){var
l=r(h,f),d=r(k,i),c=l;continue}return e}return 1}return c?-1:0}}function
J(a,b){return 0===A(a,b)?1:0}function
s(a,b){var
c=a,d=b;for(;;){if(c){if(d){var
i=d[3],k=d[1],e=c[3],f=c[2],h=c[1],l=j(g[1],f,d[2]);if(0===l){var
m=s(h,k);if(m){var
c=e,d=i;continue}return m}if(0<=l){var
n=s([0,0,f,e,0],i);if(n){var
c=h;continue}return n}var
o=s([0,h,f,0,0],k);if(o){var
c=e;continue}return o}return 0}return 1}}function
B(a,b){var
c=b;for(;;){if(c){var
d=c[3],e=c[2];B(a,c[1]);h(a,e);var
c=d;continue}return 0}}function
C(a,b,c){var
d=b,e=c;for(;;){if(d){var
f=d[3],g=d[2],h=j(a,g,C(a,d[1],e)),d=f,e=h;continue}return e}}function
D(a,b){var
c=b;for(;;){if(c){var
g=c[3],i=c[1],d=h(a,c[2]);if(d){var
e=D(a,i);if(e){var
c=g;continue}var
f=e}else
var
f=d;return f}return 1}}function
E(a,b){var
c=b;for(;;){if(c){var
g=c[3],i=c[1],d=h(a,c[2]);if(d)var
e=d;else{var
f=E(a,i);if(!f){var
c=g;continue}var
e=f}return e}return 0}}function
w(a,b){if(b){var
c=b[2],g=b[3],e=w(a,b[1]),i=h(a,c),f=w(a,g);return i?d(e,c,f):k(e,f)}return 0}function
x(a,b){if(b){var
c=b[2],m=b[3],e=x(a,b[1]),f=e[2],g=e[1],n=h(a,c),i=x(a,m),j=i[2],l=i[1];if(n){var
o=k(f,j);return[0,d(g,c,l),o]}var
p=d(f,c,j);return[0,k(g,l),p]}return An}function
b(a){if(a){var
c=a[1],d=b(a[3]);return(b(c)+1|0)+d|0}return 0}function
F(a,b){var
d=a,c=b;for(;;){if(c){var
e=c[2],f=c[1],d=[0,e,F(d,c[3])],c=f;continue}return d}}function
K(a){return F(0,a)}return[0,G,H,I,i,t,v,l,m,n,A,J,s,B,C,D,E,w,x,b,K,q,a,q,c,function(a,b){var
c=b;for(;;){if(c){var
d=c[2],f=c[3],h=c[1],e=j(g[1],a,d);if(0===e)return d;var
i=0<=e?f:h,c=i;continue}throw[0,o]}}]}function
dm(m){function
i(a){return a?a[5]:0}function
e(a,b,c,d){var
e=i(a),f=i(d),g=f<=e?e+1|0:f+1|0;return[0,a,b,c,d,g]}function
s(a,b){return[0,0,a,b,0,1]}function
f(a,b,c,d){var
h=a?a[5]:0,j=d?d[5]:0;if((j+2|0)<h){if(a){var
f=a[4],m=a[3],n=a[2],k=a[1],q=i(f);if(q<=i(k))return e(k,n,m,e(f,b,c,d));if(f){var
r=f[3],s=f[2],t=f[1],u=e(f[4],b,c,d);return e(e(k,n,m,t),s,r,u)}return S(Ao)}return S(Ap)}if((h+2|0)<j){if(d){var
l=d[4],o=d[3],p=d[2],g=d[1],v=i(g);if(v<=i(l))return e(e(a,b,c,g),p,o,l);if(g){var
w=g[3],x=g[2],y=g[1],z=e(g[4],p,o,l);return e(e(a,b,c,y),x,w,z)}return S(Aq)}return S(Ar)}var
A=j<=h?h+1|0:j+1|0;return[0,a,b,c,d,A]}var
a=0;function
H(a){return a?0:1}function
t(a,b,c){if(c){var
d=c[4],h=c[3],e=c[2],g=c[1],k=c[5],i=j(m[1],a,e);return 0===i?[0,g,a,b,d,k]:0<=i?f(g,e,h,t(a,b,d)):f(t(a,b,g),e,h,d)}return[0,0,a,b,0,1]}function
I(a,b){var
c=b;for(;;){if(c){var
e=c[4],f=c[3],g=c[1],d=j(m[1],a,c[2]);if(0===d)return f;var
h=0<=d?e:g,c=h;continue}throw[0,o]}}function
J(a,b){var
c=b;for(;;){if(c){var
f=c[4],g=c[1],d=j(m[1],a,c[2]),e=0===d?1:0;if(e)return e;var
h=0<=d?f:g,c=h;continue}return 0}}function
q(a){var
b=a;for(;;){if(b){var
c=b[1];if(c){var
b=c;continue}return[0,b[2],b[3]]}throw[0,o]}}function
K(a){var
b=a;for(;;){if(b){var
c=b[4],d=b[3],e=b[2];if(c){var
b=c;continue}return[0,e,d]}throw[0,o]}}function
u(a){if(a){var
b=a[1];if(b){var
c=a[4],d=a[3],e=a[2];return f(u(b),e,d,c)}return a[4]}return S(As)}function
v(a,b){if(b){var
c=b[4],h=b[3],e=b[2],d=b[1],i=j(m[1],a,e);if(0===i){if(d){if(c){var
g=q(c),k=g[2],l=g[1];return f(d,l,k,u(c))}return d}return c}return 0<=i?f(d,e,h,v(a,c)):f(v(a,d),e,h,c)}return 0}function
z(a,b){var
c=b;for(;;){if(c){var
d=c[4],e=c[3],f=c[2];z(a,c[1]);j(a,f,e);var
c=d;continue}return 0}}function
c(a,b){if(b){var
d=b[5],e=b[4],f=b[3],g=b[2],i=c(a,b[1]),j=h(a,f);return[0,i,g,j,c(a,e),d]}return 0}function
w(a,b){if(b){var
c=b[2],d=b[5],e=b[4],f=b[3],g=w(a,b[1]),h=j(a,c,f);return[0,g,c,h,w(a,e),d]}return 0}function
A(a,b,c){var
d=b,e=c;for(;;){if(d){var
f=d[4],g=d[3],h=d[2],i=k(a,h,g,A(a,d[1],e)),d=f,e=i;continue}return e}}function
B(a,b){var
c=b;for(;;){if(c){var
g=c[4],h=c[1],d=j(a,c[2],c[3]);if(d){var
e=B(a,h);if(e){var
c=g;continue}var
f=e}else
var
f=d;return f}return 1}}function
C(a,b){var
c=b;for(;;){if(c){var
g=c[4],h=c[1],d=j(a,c[2],c[3]);if(d)var
e=d;else{var
f=C(a,h);if(!f){var
c=g;continue}var
e=f}return e}return 0}}function
D(a,b,c){if(c){var
d=c[4],e=c[3],g=c[2];return f(D(a,b,c[1]),g,e,d)}return s(a,b)}function
E(a,b,c){if(c){var
d=c[3],e=c[2],g=c[1];return f(g,e,d,E(a,b,c[4]))}return s(a,b)}function
g(a,b,c,d){if(a){if(d){var
h=d[5],i=a[5],j=d[4],k=d[3],l=d[2],m=d[1],n=a[4],o=a[3],p=a[2],q=a[1];return(h+2|0)<i?f(q,p,o,g(n,b,c,d)):(i+2|0)<h?f(g(a,b,c,m),l,k,j):e(a,b,c,d)}return E(b,c,a)}return D(b,c,d)}function
r(a,b){if(a){if(b){var
c=q(b),d=c[2],e=c[1];return g(a,e,d,u(b))}return a}return b}function
F(a,b,c,d){return c?g(a,b,c[1],d):r(a,d)}function
n(a,b){if(b){var
c=b[4],d=b[3],e=b[2],f=b[1],k=j(m[1],a,e);if(0===k)return[0,f,[0,d],c];if(0<=k){var
h=n(a,c),l=h[3],o=h[2];return[0,g(f,e,d,h[1]),o,l]}var
i=n(a,f),p=i[2],q=i[1];return[0,q,p,g(i[3],e,d,c)]}return At}function
p(a,b,c){if(b){var
d=b[2],h=b[5],j=b[4],m=b[3],o=b[1];if(i(c)<=h){var
e=n(d,c),q=e[2],r=e[1],s=p(a,j,e[3]),t=k(a,d,[0,m],q);return F(p(a,o,r),d,t,s)}}else
if(!c)return 0;if(c){var
f=c[2],u=c[4],v=c[3],w=c[1],g=n(f,b),x=g[2],y=g[1],z=p(a,g[3],u),A=k(a,f,x,[0,v]);return F(p(a,y,w),f,A,z)}throw[0,l,Au]}function
x(a,b){if(b){var
c=b[3],d=b[2],h=b[4],e=x(a,b[1]),i=j(a,d,c),f=x(a,h);return i?g(e,d,c,f):r(e,f)}return 0}function
y(a,b){if(b){var
c=b[3],d=b[2],m=b[4],e=y(a,b[1]),f=e[2],h=e[1],n=j(a,d,c),i=y(a,m),k=i[2],l=i[1];if(n){var
o=r(f,k);return[0,g(h,d,c,l),o]}var
p=g(f,d,c,k);return[0,r(h,l),p]}return Av}function
d(a,b){var
c=a,d=b;for(;;){if(c){var
e=[0,c[2],c[3],c[4],d],c=c[1],d=e;continue}return d}}function
L(a,b,c){var
r=d(c,0),f=d(b,0),e=r;for(;;){if(f){if(e){var
i=e[4],k=e[3],l=e[2],n=f[4],o=f[3],p=f[2],g=j(m[1],f[1],e[1]);if(0===g){var
h=j(a,p,l);if(0===h){var
q=d(k,i),f=d(o,n),e=q;continue}return h}return g}return 1}return e?-1:0}}function
M(a,b,c){var
s=d(c,0),f=d(b,0),e=s;for(;;){if(f){if(e){var
k=e[4],l=e[3],n=e[2],o=f[4],p=f[3],q=f[2],g=0===j(m[1],f[1],e[1])?1:0;if(g){var
h=j(a,q,n);if(h){var
r=d(l,k),f=d(p,o),e=r;continue}var
i=h}else
var
i=g;return i}return 0}return e?0:1}}function
b(a){if(a){var
c=a[1],d=b(a[4]);return(b(c)+1|0)+d|0}return 0}function
G(a,b){var
d=a,c=b;for(;;){if(c){var
e=c[3],f=c[2],g=c[1],d=[0,[0,f,e],G(d,c[4])],c=g;continue}return d}}return[0,a,H,J,t,s,v,p,L,M,z,A,B,C,x,y,b,function(a){return G(0,a)},q,K,q,n,I,c,w]}var
Ax=[0,Aw],Az=[0,Ay];function
AA(a){throw[0,Az]}function
dS(a){var
c=a[0+1];a[0+1]=AA;try{var
b=h(c,0);a[0+1]=b;ah$(a,bO)}catch(f){f=m(f);a[0+1]=function(a){throw f};throw f}return b}var
kX=[0,AB];function
im(a,b){return a[1+1]=b}function
p_(a){a[3]=gp(a[1],a[2],0,a[2].getLen());a[4]=0;return 0}function
p$(a,b){var
c=b;for(;;){if(typeof
c!==g)switch(c[0]){case
2:var
f=c[1],k=cS(f),p=bO===k?f[1]:ac===k?dS(f):f,c=p;continue;case
3:var
i=c[1],m=i[1];if(m){var
n=m[1];if(n){var
q=n[1];i[1]=0;return[0,q,c]}return 0}var
o=h(i[2],a);return o?[0,o[1],c]:(i[1]=AD,0);case
4:var
d=c[1];if(d[3]<=d[4])p_(d);if(0===d[3])return 0;var
r=d[2].safeGet(d[4]);d[4]=d[4]+1|0;return[0,r,c];case
0:break;default:var
j=c[2],e=p$(a,c[1]);if(typeof
e===g){var
c=j;continue}else{if(0===e[0])return[0,e[1],[1,e[2],j]];throw[0,l,AC]}}return c}}function
qa(a){for(;;){var
b=a[2];if(typeof
b===g)return 0;else
switch(b[0]){case
1:var
d=p$(a[1],a[2]);if(typeof
d===g)return 0;else{if(0===d[0]){var
m=d[1];im(a,d);return[0,m]}throw[0,l,AE]}case
2:var
e=b[1],i=cS(e),n=bO===i?e[1]:ac===i?dS(e):e;im(a,n);continue;case
3:var
f=b[1],j=f[1];if(j)return j[1];var
k=h(f[2],a[1]);f[1]=[0,k];return k;case
4:var
c=b[1];if(c[3]<=c[4])p_(c);return 0===c[3]?(im(a,0),0):[0,c[2].safeGet(c[4])];default:return[0,b[1]]}}}function
dT(a){var
f=qa(a);if(f){var
i=f[1];for(;;){var
b=a[2];if(typeof
b===g)var
c=0;else
switch(b[0]){case
0:var
h=b[2];a[1]=a[1]+1|0;im(a,h);var
c=1;break;case
3:var
d=b[1],c=d[1]?(a[1]=a[1]+1|0,d[1]=0,1):0;break;case
4:var
e=b[1];a[1]=a[1]+1|0;e[4]=e[4]+1|0;var
c=1;break;default:var
c=0}if(!c)if(qa(a))continue;return i}}throw[0,kX]}function
aw(a){var
b=1<=a?a:1,c=dl<b?dl:b,d=ae(c);return[0,d,0,c,d]}function
aO(a){return Y(a[1],0,a[2])}function
gt(a){a[2]=0;return 0}function
qb(a){a[2]=0;a[1]=a[4];a[3]=a[1].getLen();return 0}function
kY(a,b){var
c=[0,a[3]];for(;;){if(c[1]<(a[2]+b|0)){c[1]=2*c[1]|0;continue}if(dl<c[1])if((a[2]+b|0)<=dl)c[1]=dl;else
aT(AF);var
d=ae(c[1]);cy(a[1],0,d,0,a[2]);a[1]=d;a[3]=c[1];return 0}}function
Q(a,b){var
c=a[2];if(a[3]<=c)kY(a,1);a[1].safeSet(c,b);a[2]=c+1|0;return 0}function
io(a,b,c,d){var
e=c<0?1:0;if(e)var
f=e;else
var
h=d<0?1:0,f=h||((b.getLen()-d|0)<c?1:0);if(f)S(AG);var
g=a[2]+d|0;if(a[3]<g)kY(a,d);cy(b,c,a[1],a[2],d);a[2]=g;return 0}function
aW(a,b){var
c=b.getLen(),d=a[2]+c|0;if(a[3]<d)kY(a,c);cy(b,0,a[1],a[2],c);a[2]=d;return 0}function
ip(a,b){return io(a,b[1],0,b[2])}function
qc(a,b){return gn(a,b[1],0,b[2])}function
dn(a){return 0<=a?a:aT(u(AH,cW(a)))}function
kZ(a,b){return dn(a+b|0)}var
AI=1;function
qd(a){return kZ(AI,a)}function
fq(a,b,c){return Y(a,b,c)}function
gu(a){return fq(a,0,a.getLen())}function
qe(a,b,c){var
d=u(AK,u(a,AJ)),e=u(AL,u(cW(b),d));return S(u(AM,u(aU(1,c),e)))}function
gv(a,b,c){return qe(gu(a),b,c)}function
k0(a){return S(u(AO,u(gu(a),AN)))}function
eB(e,b,c,d){function
h(a){if((e.safeGet(a)+ax|0)<0||9<(e.safeGet(a)+ax|0))return a;var
b=a+1|0;for(;;){var
c=e.safeGet(b);if(48<=c){if(!(58<=c)){var
b=b+1|0;continue}}else
if(36===c)return b+1|0;return a}}var
i=h(b+1|0),f=aw((c-i|0)+10|0);Q(f,37);var
a=i,g=L(d);for(;;){if(a<=c){var
j=e.safeGet(a);if(42===j){if(g){var
k=g[2];aW(f,cW(g[1]));var
a=h(a+1|0),g=k;continue}throw[0,l,AP]}Q(f,j);var
a=a+1|0;continue}return aO(f)}}function
qf(a,b,c,d,e){var
f=eB(b,c,d,e);if(78!==a)if(e_!==a)return f;f.safeSet(f.getLen()-1|0,h3);return f}function
qg(m,p,c,d,e){var
n=d.getLen();function
o(a,b){var
q=40===a?41:gc,c=b;for(;;){if(n<=c)return h(m,d);if(37===d.safeGet(c)){var
e=c+1|0;if(n<=e)return h(m,d);var
f=d.safeGet(e),g=f+xw|0;if(g<0||1<g){var
j=g-83|0;if(j<0||2<j)var
i=1;else
switch(j){case
1:var
i=1;break;case
2:var
l=1,i=0;break;default:var
l=0,i=0}if(i){var
c=e+1|0;continue}}else
var
l=0===g?0:1;if(l)return f===q?e+1|0:k(p,d,b,f);var
c=o(f,e+1|0)+1|0;continue}var
c=c+1|0;continue}}return o(c,e)}function
qh(c){return function(a,b){return qg(k0,gv,c,a,b)}}function
qi(i,b,c){var
n=i.getLen()-1|0;function
s(a){var
m=a;a:for(;;){if(m<n){if(37===i.safeGet(m)){var
f=0,h=m+1|0;for(;;){if(n<h)var
e=k0(i);else{var
o=i.safeGet(h);if(58<=o){if(95===o){var
f=1,h=h+1|0;continue}}else
if(32<=o)switch(o+kh|0){case
1:case
2:case
4:case
5:case
6:case
7:case
8:case
9:case
12:case
15:break;case
0:case
3:case
11:case
13:var
h=h+1|0;continue;case
10:var
h=k(b,f,h,eq);continue;default:var
h=h+1|0;continue}var
d=h;b:for(;;){if(n<d)var
e=k0(i);else{var
l=i.safeGet(d);if(em<=l)var
g=0;else
switch(l){case
78:case
88:case
dM:case
eq:case
ek:case
h3:case
h4:var
e=k(b,f,d,eq),g=1;break;case
69:case
70:case
71:case
hO:case
ge:case
cd:var
e=k(b,f,d,ge),g=1;break;case
33:case
37:case
44:case
64:var
e=d+1|0,g=1;break;case
83:case
91:case
fg:var
e=k(b,f,d,fg),g=1;break;case
97:case
fb:case
ku:var
e=k(b,f,d,l),g=1;break;case
76:case
kl:case
e_:var
t=d+1|0;if(n<t)var
e=k(b,f,d,eq),g=1;else{var
q=i.safeGet(t)+hP|0;if(q<0||32<q)var
r=1;else
switch(q){case
0:case
12:case
17:case
23:case
29:case
32:var
e=j(c,k(b,f,d,l),eq),g=1,r=0;break;default:var
r=1}if(r)var
e=k(b,f,d,eq),g=1}break;case
67:case
99:var
e=k(b,f,d,99),g=1;break;case
66:case
98:var
e=k(b,f,d,66),g=1;break;case
41:case
gc:var
e=k(b,f,d,l),g=1;break;case
40:var
e=s(k(b,f,d,l)),g=1;break;case
en:var
u=k(b,f,d,l),v=j(qh(l),i,u),p=u;for(;;){if(p<(v-2|0)){var
p=j(c,p,i.safeGet(p));continue}var
d=v-1|0;continue b}default:var
g=0}if(!g)var
e=gv(i,d,l)}break}}var
m=e;continue a}}var
m=m+1|0;continue}return m}}s(0);return 0}function
k1(a){var
d=aw(a.getLen());function
e(a,b){Q(d,b);return a+1|0}qi(a,function(a,b,c){if(a)aW(d,AQ);else
Q(d,37);return e(b,c)},e);return aO(d)}function
qj(a){var
d=[0,0,0,0];function
b(a,b,c){var
f=41!==c?1:0,g=f?gc!==c?1:0:f;if(g){var
e=97===c?2:1;if(fb===c)d[3]=d[3]+1|0;if(a)d[2]=d[2]+e|0;else
d[1]=d[1]+e|0}return b+1|0}qi(a,b,function(a,b){return a+1|0});return d}function
k2(a){return qj(a)[1]}function
iq(h,g){var
c=k2(g);if(c<0||6<c){var
i=function(k,b){if(c<=k){var
l=$(c,0),m=function(a,b){return B(l,(c-a|0)-1|0,b)},d=0,a=b;for(;;){if(a){var
e=a[2],f=a[1];if(e){m(d,f);var
d=d+1|0,a=e;continue}m(d,f)}return j(h,g,l)}}return function(a){return i(k+1|0,[0,a,b])}};return i(0,0)}switch(c){case
1:return function(a){var
b=$(1,0);B(b,0,a);return j(h,g,b)};case
2:return function(a,b){var
c=$(2,0);B(c,0,a);B(c,1,b);return j(h,g,c)};case
3:return function(a,b,c){var
d=$(3,0);B(d,0,a);B(d,1,b);B(d,2,c);return j(h,g,d)};case
4:return function(a,b,c,d){var
e=$(4,0);B(e,0,a);B(e,1,b);B(e,2,c);B(e,3,d);return j(h,g,e)};case
5:return function(a,b,c,d,e){var
f=$(5,0);B(f,0,a);B(f,1,b);B(f,2,c);B(f,3,d);B(f,4,e);return j(h,g,f)};case
6:return function(a,b,c,d,e,f){var
i=$(6,0);B(i,0,a);B(i,1,b);B(i,2,c);B(i,3,d);B(i,4,e);B(i,5,f);return j(h,g,i)};default:return j(h,g,[0])}}function
qk(a,b,c){var
g=a.safeGet(c);if((g+ax|0)<0||9<(g+ax|0))return j(b,0,c);var
e=g+ax|0,d=c+1|0;for(;;){var
f=a.safeGet(d);if(48<=f){if(!(58<=f)){var
e=(10*e|0)+(f+ax|0)|0,d=d+1|0;continue}}else
if(36===f)return 0===e?aT(AR):j(b,[0,dn(e-1|0)],d+1|0);return j(b,0,c)}}function
bQ(a,b){return a?b:qd(b)}function
ql(a,b){return a?a[1]:b}function
ir(a,d,c,s,e,f,g,h,i){function
q(a,b){return I(d,ql(a,b))}function
al(o,l,c,d){var
b=d;for(;;){var
X=a.safeGet(b)+kh|0;if(!(X<0||25<X))switch(X){case
1:case
2:case
4:case
5:case
6:case
7:case
8:case
9:case
12:case
15:break;case
10:return qk(a,function(a,b){var
d=[0,q(a,l),c];return al(o,bQ(a,l),d,b)},b+1|0);default:var
b=b+1|0;continue}var
r=a.safeGet(b);if(!(fe<=r))switch(r){case
78:case
88:case
dM:case
eq:case
ek:case
h3:case
h4:var
aN=q(o,l),aO=ka(qf(r,a,s,b,c),aN);return k(e,bQ(o,l),aO,b+1|0);case
69:case
71:case
hO:case
ge:case
cd:var
aG=q(o,l),aH=ow(eB(a,s,b,c),aG);return k(e,bQ(o,l),aH,b+1|0);case
76:case
kl:case
e_:var
$=a.safeGet(b+1|0)+hP|0;if(!($<0||32<$))switch($){case
0:case
12:case
17:case
23:case
29:case
32:var
O=b+1|0,aa=r+pA|0;if(aa<0||2<aa)var
ab=0;else{switch(aa){case
1:var
ab=0,ac=0;break;case
2:var
aM=q(o,l),ar=ka(eB(a,s,O,c),aM),ac=1;break;default:var
aL=q(o,l),ar=ka(eB(a,s,O,c),aL),ac=1}if(ac)var
aq=ar,ab=1}if(!ab)var
aK=q(o,l),aq=ahB(eB(a,s,O,c),aK);return k(e,bQ(o,l),aq,O+1|0)}var
aI=q(o,l),aJ=ka(qf(e_,a,s,b,c),aI);return k(e,bQ(o,l),aJ,b+1|0);case
37:case
64:return k(e,l,aU(1,r),b+1|0);case
83:case
fg:var
z=q(o,l);if(fg===r)var
B=z;else{var
n=[0,0],ag=z.getLen()-1|0,av=0;if(!(ag<0)){var
K=av;for(;;){var
y=z.safeGet(K),aS=14<=y?34===y?1:92===y?1:0:11<=y?13<=y?1:0:8<=y?1:0,ay=aS?2:ox(y)?1:4;n[1]=n[1]+ay|0;var
az=K+1|0;if(ag!==K){var
K=az;continue}break}}if(n[1]===z.getLen())var
at=z;else{var
p=ae(n[1]);n[1]=0;var
ah=z.getLen()-1|0,aw=0;if(!(ah<0)){var
J=aw;for(;;){var
x=z.safeGet(J),C=x-34|0;if(C<0||58<C)if(-20<=C)var
P=1;else{switch(C+34|0){case
8:p.safeSet(n[1],92);n[1]++;p.safeSet(n[1],98);var
I=1;break;case
9:p.safeSet(n[1],92);n[1]++;p.safeSet(n[1],ku);var
I=1;break;case
10:p.safeSet(n[1],92);n[1]++;p.safeSet(n[1],e_);var
I=1;break;case
13:p.safeSet(n[1],92);n[1]++;p.safeSet(n[1],fb);var
I=1;break;default:var
P=1,I=0}if(I)var
P=0}else
var
P=(C-1|0)<0||56<(C-1|0)?(p.safeSet(n[1],92),n[1]++,p.safeSet(n[1],x),0):1;if(P)if(ox(x))p.safeSet(n[1],x);else{p.safeSet(n[1],92);n[1]++;p.safeSet(n[1],48+(x/dM|0)|0);n[1]++;p.safeSet(n[1],48+((x/10|0)%10|0)|0);n[1]++;p.safeSet(n[1],48+(x%10|0)|0)}n[1]++;var
ax=J+1|0;if(ah!==J){var
J=ax;continue}break}}var
at=p}var
B=u(A2,u(at,A1))}if(b===(s+1|0))var
as=B;else{var
H=eB(a,s,b,c);try{var
Q=0,v=1;for(;;){if(H.getLen()<=v)var
ai=[0,0,Q];else{var
R=H.safeGet(v);if(49<=R)if(58<=R)var
ad=0;else
var
ai=[0,de(Y(H,v,(H.getLen()-v|0)-1|0)),Q],ad=1;else{if(45===R){var
Q=1,v=v+1|0;continue}var
ad=0}if(!ad){var
v=v+1|0;continue}}var
T=ai;break}}catch(f){f=m(f);if(f[1]!==cf)throw f;var
T=qe(H,0,fg)}var
L=T[1],D=B.getLen(),aA=T[2],U=0,aB=32;if(L===D)var
V=B;else
if(L<=D)var
V=Y(B,U,D);else{var
S=aU(L,aB);if(aA)cy(B,U,S,0,D);else
cy(B,U,S,L-D|0,D);var
V=S}var
as=V}return k(e,bQ(o,l),as,b+1|0);case
67:case
99:var
t=q(o,l);if(99===r)var
ao=aU(1,t);else{if(39===t)var
w=z5;else
if(92===t)var
w=z6;else{if(14<=t)var
E=0;else
switch(t){case
8:var
w=z7,E=1;break;case
9:var
w=z8,E=1;break;case
10:var
w=z9,E=1;break;case
13:var
w=z_,E=1;break;default:var
E=0}if(!E)if(ox(t)){var
af=ae(1);af.safeSet(0,t);var
w=af}else{var
F=ae(4);F.safeSet(0,92);F.safeSet(1,48+(t/dM|0)|0);F.safeSet(2,48+((t/10|0)%10|0)|0);F.safeSet(3,48+(t%10|0)|0);var
w=F}}var
ao=u(AZ,u(w,AY))}return k(e,bQ(o,l),ao,b+1|0);case
66:case
98:var
aE=b+1|0,aF=q(o,l)?zC:zD;return k(e,bQ(o,l),aF,aE);case
40:case
en:var
am=q(o,l),an=j(qh(r),a,b+1|0);if(en===r){var
aD=k1(am);return k(e,bQ(o,l),aD,an)}return k(i,bQ(o,l),am,an);case
33:return j(h,l,b+1|0);case
41:return k(e,l,AW,b+1|0);case
44:return k(e,l,AX,b+1|0);case
70:var
Z=q(o,l);if(0===c)var
ap=A0;else{var
W=eB(a,s,b,c);if(70===r)W.safeSet(W.getLen()-1|0,cd);var
ap=W}var
ak=wV(Z);if(3===ak)var
_=Z<0?AT:AU;else
if(4<=ak)var
_=AV;else{var
N=ow(ap,Z),M=0,aC=N.getLen();for(;;){if(aC<=M)var
aj=u(N,AS);else{var
G=N.safeGet(M)-46|0,aT=G<0||23<G?55===G?1:0:(G-1|0)<0||21<(G-1|0)?1:0;if(!aT){var
M=M+1|0;continue}var
aj=N}var
_=aj;break}}return k(e,bQ(o,l),_,b+1|0);case
91:return gv(a,b,r);case
97:var
aP=q(o,l),au=qd(ql(o,l)),aQ=q(0,au);return A(f,bQ(o,au),aP,aQ,b+1|0);case
fb:return gv(a,b,r);case
ku:var
aR=q(o,l);return k(g,bQ(o,l),aR,b+1|0)}return gv(a,b,r)}}var
b=s+1|0,l=0;return qk(a,function(a,b){return al(a,c,l,b)},b)}function
k3(l,b,n,d,e,f,g){var
i=h(b,g);function
k(a){return j(d,i,a)}function
m(g,b,c,d){var
o=c.getLen();function
f(a,b){var
e=b;for(;;){if(o<=e)return h(g,i);var
f=c.safeGet(e);if(37===f)return ir(c,d,a,e,p,q,r,s,t);j(n,i,f);var
e=e+1|0;continue}}function
p(a,b,c){k(b);return f(a,c)}function
q(a,b,c,d){if(l)k(j(b,0,c));else
j(b,i,c);return f(a,d)}function
r(a,b,c){if(l)k(h(b,0));else
h(b,i);return f(a,c)}function
s(a,b){h(e,i);return f(a,b)}function
t(a,b,c){var
e=kZ(k2(b),a);return m(function(a){return f(e,c)},a,b,d)}return f(b,0)}var
c=dn(0);return iq(function(a,b){return m(f,c,a,b)},g)}function
c0(d){function
e(a){return 0}function
b(a){return d}var
c=0;return function(a){return k3(c,b,pX,fi,id,e,a)}}function
k4(a){return h(c0(cx),a)}function
k5(a){return h(c0(ev),a)}function
gw(c,b){function
d(a){return 0}function
e(a){return b}var
f=0;return function(a){return k3(f,e,Q,aW,d,c,a)}}function
am(a){return gw(function(a){return 0},a)}function
A3(a){return aw(2*a.getLen()|0)}function
k6(c){function
b(a){var
b=aO(a);gt(a);return h(c,b)}function
d(a){return 0}var
e=1;return function(a){return k3(e,A3,Q,aW,d,b,a)}}function
E(a){return h(k6(function(a){return a}),a)}var
A5=[0,A4];function
qm(a,b){var
c=b;for(;;){if(c){var
d=c[1],e=c[2],f=d[2];if(av(d[1],a))return f;var
c=e;continue}throw[0,o]}}function
qn(a){throw[0,A5,A6]}function
k7(a){var
c=a.getLen();try{var
b=gs(a,32);for(;;){if(c<=b)var
d=c;else{if(32===a.safeGet(b)){var
b=b+1|0;continue}var
d=b}break}}catch(f){f=m(f);if(f[1]===o)return c;throw f}return d}var
k8=[0,0];function
Bd(a,b){var
c=b[1],d=b[3];return 11===b[2][0]?cw(a,c.getLen()):cw(a,c.getLen()+k7(d)|0)}function
k_(a,b){var
c=a[b+1];if(wW(c)){if(cS(c)===ya)return h(E(Bg),c);if(cS(c)===pu){var
e=ow(zF,c),d=0,g=e.getLen();for(;;){if(g<=d)return u(e,zE);var
f=e.safeGet(d),i=48<=f?58<=f?0:1:45===f?1:0;if(i){var
d=d+1|0;continue}return e}}return Bh}return h(E(Bi),c)}function
qs(a,b){if(a.length-1<=b)return Bj;var
c=qs(a,b+1|0),d=k_(a,b);return j(E(Bk),d,c)}function
qt(a){var
b=k8[1];for(;;){if(b){var
r=b[2],s=b[1];try{var
t=h(s,a),e=t}catch(f){var
e=0}if(e)return e[1];var
b=r;continue}if(a[1]===Bp)return Bq;if(a[1]===qu)return Br;if(a[1]===qv){var
f=a[2],k=f[3],v=f[2],w=f[1];return ej(E(k9),w,v,k,k+5|0,Bs)}if(a[1]===l){var
g=a[2],m=g[3],x=g[2],y=g[1];return ej(E(k9),y,x,m,m+6|0,Bt)}if(a[1]===qw){var
i=a[2],n=i[3],z=i[2],A=i[1];return ej(E(k9),A,z,n,n+6|0,Bu)}var
d=a.length-1,B=a[0+1][0+1];if(d<0||2<d)var
o=qs(a,2),p=k_(a,1),c=j(E(Bl),p,o);else
switch(d){case
1:var
c=Bn;break;case
2:var
q=k_(a,1),c=h(E(Bo),q);break;default:var
c=Bm}return u(B,c)}}function
k$(a){k8[1]=[0,a,k8[1]];return 0}function
qx(a){var
l=aip(0),b=[0,$(55,0),0],h=0===l.length-1?[0,0]:l,i=h.length-1,d=0;for(;;){B(b[1],d,d);var
p=d+1|0;if(54!==d){var
d=p;continue}var
f=[0,Bv],j=54+cw(55,i)|0,m=0;if(!(j<0)){var
c=m;for(;;){var
k=c%55|0,n=f[1],g=u(n,cW(I(h,oy(c,i))));f[1]=ahT(g,0,g.getLen());var
e=f[1];B(b[1],k,(I(b[1],k)^(((e.safeGet(0)+(e.safeGet(1)<<8)|0)+(e.safeGet(2)<<16)|0)+(e.safeGet(3)<<24)|0))&hJ);var
o=c+1|0;if(j!==c){var
c=o;continue}break}}b[2]=0;return b}}function
qy(a){a[2]=(a[2]+1|0)%55|0;var
b=I(a[1],a[2]),c=(I(a[1],(a[2]+24|0)%55|0)+(b^b>>>25&31)|0)&hJ;B(a[1],a[2],c);return c}32===fo;function
Bw(a){return wX(10,dM,0,a)}try{var
agQ=e7(agP),la=agQ}catch(f){f=m(f);if(f[1]!==o)throw f;try{var
agO=e7(agN),qz=agO}catch(f){f=m(f);if(f[1]!==o)throw f;var
qz=Bx}var
la=qz}var
p7=la.getLen(),By=82,Ae=0;if(p7<0)var
lb=S(Ac);else
try{p6(la,p7,Ae,By);var
Ad=1,lb=Ad}catch(f){f=m(f);if(f[1]!==o)throw f;var
lb=0}var
is=[ac,function(a){return qx(0)}];function
aq(a,b){var
f=a?a[1]:lb,c=16;for(;;){if(!(b<=c))if(!(ij<(c*2|0))){var
c=c*2|0;continue}if(f)var
d=cS(is),g=bO===d?is[1]:ac===d?dS(is):is,e=qy(g);else
var
e=0;return[0,0,$(c,0),e,c]}}function
qA(a){a[1]=0;var
c=a[2].length-1-1|0,d=0;if(!(c<0)){var
b=d;for(;;){B(a[2],b,0);var
e=b+1|0;if(c!==b){var
b=e;continue}break}}return 0}function
qB(l,b){var
d=b[2],e=d.length-1,f=e*2|0,g=f<ij?1:0;if(g){var
c=$(f,0);b[2]=c;var
h=function(a){if(a){var
d=a[1],f=a[2];h(a[3]);var
e=j(l,b,d);return B(c,e,[0,d,f,I(c,e)])}return 0},i=e-1|0,m=0;if(!(i<0)){var
a=m;for(;;){h(I(d,a));var
n=a+1|0;if(i!==a){var
a=n;continue}break}}var
k=0}else
var
k=g;return k}function
fr(a,b){return 3<=a.length-1?wX(10,dM,a[3],b)&(a[2].length-1-1|0):oy(ahx(10,dM,b),a[2].length-1)}function
c1(a,b,c){var
d=fr(a,b);B(a[2],d,[0,b,c,I(a[2],d)]);a[1]=a[1]+1|0;var
e=a[2].length-1<<1<a[1]?1:0;return e?qB(fr,a):e}function
bR(a,b){var
i=fr(a,b),d=I(a[2],i);if(d){var
e=d[3],j=d[2];if(0===bI(b,d[1]))return j;if(e){var
f=e[3],k=e[2];if(0===bI(b,e[1]))return k;if(f){var
l=f[3],m=f[2];if(0===bI(b,f[1]))return m;var
c=l;for(;;){if(c){var
g=c[3],h=c[2];if(0===bI(b,c[1]))return h;var
c=g;continue}throw[0,o]}}throw[0,o]}throw[0,o]}throw[0,o]}function
it(a,b,c){function
e(a){if(a){var
d=a[3],f=a[1],g=a[2];return 0===bI(f,b)?[0,b,c,d]:[0,f,g,e(d)]}throw[0,o]}var
d=fr(a,b),g=I(a[2],d);try{var
f=e(g),i=B(a[2],d,f)}catch(f){f=m(f);if(f[1]===o){B(a[2],d,[0,b,c,g]);a[1]=a[1]+1|0;var
h=a[2].length-1<<1<a[1]?1:0;return h?qB(fr,a):h}throw f}return i}function
qC(a,b){var
c=[0,[0,a,0]],d=b[1];if(d){var
e=d[1];b[1]=c;e[2]=c;return 0}b[1]=c;b[2]=c;return 0}var
lc=[0,BA];function
qD(a){var
b=a[2];if(b){var
c=b[1],d=c[2],e=c[1];a[2]=d;if(0===d)a[1]=0;return e}throw[0,lc]}function
gx(a,b){a[13]=a[13]+b[3]|0;return qC(b,a[27])}var
qE=1000000010;function
ld(a,b){return k(a[17],b,0,b.getLen())}function
iu(a){return h(a[19],0)}function
qF(a,b){return h(a[20],b)}function
eC(a,b,c){iu(a);a[11]=1;a[10]=eu(a[8],(a[6]-c|0)+b|0);a[9]=a[6]-a[10]|0;return qF(a,a[10])}function
qG(a,b){return eC(a,0,b)}function
fs(a,b){a[9]=a[9]-b|0;return qF(a,b)}function
qH(a){try{for(;;){var
q=a[27][2];if(!q)throw[0,lc];var
j=q[1][1],p=j[1],b=j[2],M=p<0?1:0,Y=j[3],Z=M?(a[13]-a[12]|0)<a[9]?1:0:M,N=1-Z;if(N){qD(a[27]);var
i=0<=p?p:qE;if(typeof
b===g)switch(b){case
1:var
z=a[2];if(z)a[2]=z[2];break;case
2:var
A=a[3];if(A)a[3]=A[2];break;case
3:var
B=a[2];if(B)qG(a,B[1][2]);else
iu(a);break;case
4:if(a[10]!==(a[6]-a[9]|0)){var
v=qD(a[27]),O=v[1];a[12]=a[12]-v[3]|0;a[9]=a[9]+O|0}break;case
5:var
k=a[5];if(k){var
P=k[2];ld(a,h(a[24],k[1]));a[5]=P}break;default:var
w=a[3];if(w){var
x=w[1][1],y=function(a,b){if(b){var
c=b[1],d=b[2];return wY(a,c)?[0,a,b]:[0,c,y(a,d)]}return[0,a,0]};x[1]=y(a[6]-a[9]|0,x[1])}}else
switch(b[0]){case
1:var
c=b[2],e=b[1],C=a[2];if(C){var
D=C[1],d=D[2];switch(D[1]){case
1:eC(a,c,d);break;case
2:eC(a,c,d);break;case
3:if(a[9]<i)eC(a,c,d);else
fs(a,e);break;case
4:if(a[11])fs(a,e);else
if(a[9]<i)eC(a,c,d);else
if(((a[6]-d|0)+c|0)<a[10])eC(a,c,d);else
fs(a,e);break;case
5:fs(a,e);break;default:fs(a,e)}}break;case
2:var
l=a[6]-a[9]|0,E=a[3],R=b[2],S=b[1];if(E){var
F=E[1][1],H=F[1];if(H){var
U=H[1];try{var
f=F[1];for(;;){if(!f)throw[0,o];var
G=f[1],T=f[2];if(!wR(G,l)){var
f=T;continue}var
I=G;break}}catch(f){f=m(f);if(f[1]!==o)throw f;var
I=U}var
n=I}else
var
n=l;var
J=n-l|0;if(0<=J)fs(a,J+S|0);else
eC(a,n+R|0,a[6])}break;case
3:var
K=b[2],V=b[1];if(a[8]<(a[6]-a[9]|0)){var
r=a[2];if(r)var
s=r[1],t=s[2],u=s[1],_=a[9]<t?0===u?0:5<=u?1:(qG(a,t),1):0;else
iu(a)}var
W=a[9]-V|0,X=1===K?1:a[9]<i?K:5;a[2]=[0,[0,X,W],a[2]];break;case
4:a[3]=[0,b[1],a[3]];break;case
5:var
L=b[1];ld(a,h(a[23],L));a[5]=[0,L,a[5]];break;default:var
Q=b[1];a[9]=a[9]-i|0;ld(a,Q);a[11]=0}a[12]=Y+a[12]|0;continue}break}}catch(f){f=m(f);if(f[1]===lc)return 0;throw f}return N}function
qI(a,b){gx(a,b);return qH(a)}function
ft(a,b,c){return[0,a,b,c]}function
qJ(a,b,c){return qI(a,ft(b,[0,c],b))}var
qK=[0,[0,-1,ft(-1,BB,0)],0];function
qL(a){a[1]=qK;return 0}function
le(a,b){var
d=a[1];if(d){var
e=d[1],c=e[2],f=c[1],h=d[2],i=c[2];if(e[1]<a[12])return qL(a);if(typeof
i!==g)switch(i[0]){case
1:case
2:var
k=b?(c[1]=a[13]+f|0,a[1]=h,0):b;return k;case
3:var
j=1-b,l=j?(c[1]=a[13]+f|0,a[1]=h,0):j;return l}return 0}return 0}function
qM(a,b,c){gx(a,c);if(b)le(a,1);a[1]=[0,[0,a[13],c],a[1]];return 0}function
gy(a,b,c){a[14]=a[14]+1|0;if(a[14]<a[15])return qM(a,0,ft(-a[13]|0,[3,b,c],0));var
d=a[14]===a[15]?1:0;if(d){var
e=a[16];return qJ(a,e.getLen(),e)}return d}function
qN(a,b){var
c=1<a[14]?1:0;if(c){if(a[14]<a[15]){gx(a,[0,0,1,0]);le(a,1);le(a,0)}a[14]=a[14]-1|0;var
d=0}else
var
d=c;return d}function
lf(a,b){if(a[21]){a[4]=[0,b,a[4]];h(a[25],b)}var
c=a[22];return c?gx(a,[0,0,[5,b],0]):c}function
lg(a,b){for(;;){if(1<a[14]){qN(a,0);continue}a[13]=qE;qH(a);if(b)iu(a);a[12]=1;a[13]=1;var
c=a[27];c[1]=0;c[2]=0;qL(a);a[2]=0;a[3]=0;a[4]=0;a[5]=0;a[10]=0;a[14]=0;a[9]=a[6];return gy(a,0,3)}}function
lh(a,b,c){var
d=a[14]<a[15]?1:0;return d?qJ(a,b,c):d}function
qO(a,b,c){return lh(a,b,c)}function
li(a,b){return qO(a,b.getLen(),b)}function
BC(a,b){return li(a,cW(b))}function
qP(a,b){var
c=ae(1);c.safeSet(0,b);return qO(a,1,c)}function
iv(a,b){lg(a,0);return h(a[18],0)}function
iw(a,b,c){var
d=a[14]<a[15]?1:0;return d?qM(a,1,ft(-a[13]|0,[1,b,c],b)):d}function
lj(a,b){return iw(a,1,0)}var
qQ=aU(80,32);function
BE(a){return u(BG,u(a,BF))}function
BH(a){return u(BJ,u(a,BI))}function
BK(a){return 0}function
BL(a){return 0}function
qR(a,b){function
f(a){return 0}var
d=[0,0,0];function
g(a){return 0}var
e=ft(-1,BM,0);qC(e,d);var
c=[0,[0,[0,1,e],qK],0,0,0,0,78,10,68,78,0,1,1,1,1,dj,BN,a,b,g,f,0,0,BE,BH,BK,BL,d];c[19]=function(a){return k(c[17],BD,0,1)};c[20]=function(a){var
b=a;for(;;){var
d=0<b?1:0;if(d){if(80<b){k(c[17],qQ,0,80);var
b=b-80|0;continue}return k(c[17],qQ,0,b)}return d}};return c}function
lk(d){function
a(a){return id(d)}return qR(function(a,b,c){return gn(d,a,b,c)},a)}function
ll(d){function
a(a){return 0}return qR(function(a,b,c){return io(d,a,b,c)},a)}var
BO=aw(dK),BP=lk(cx),BQ=lk(ev);ll(BO);function
qS(a,b,c){if(c<b.getLen())var
e=b.safeGet(c),d=h(E(BR),e);else
var
d=h(E(BT),46);var
f=gu(b);return A(E(BS),a,f,c,d)}function
gz(a,b,c){return S(qS(a,b,c))}function
ix(a,b){return gz(BU,a,b)}function
eD(a,b){return S(qS(BV,a,b))}function
qT(a,b,c){try{var
e=de(c),d=e}catch(f){f=m(f);if(f[1]!==cf)throw f;var
d=eD(a,b)}return d}function
qU(a,b){var
c=aw(dK),d=ll(c);j(a,d,b);lg(d,0);var
e=aO(c);qb(c);return e}function
qV(a,b){return b?dR(BW,L([0,a,b])):a}function
qW(d,f){return function(a){var
p=[0,0];function
D(a){var
b=p[1];if(b){var
c=b[1];lh(f,c,aU(1,a));p[1]=0;return 0}return qP(f,a)}function
n(N,b,e,x){var
i=e.getLen();function
g(a,b,c){var
d=c;for(;;){if(i<=d)return h(N,f);var
A=e.safeGet(d);if(37===A)return ir(e,x,b,d,O,P,Q,R,S);if(64===A){var
g=d+1|0;if(i<=g)return ix(e,g);var
j=e.safeGet(g);if(65<=j){if(94<=j){var
B=j-123|0;if(!(B<0||2<B))switch(B){case
1:break;case
2:if(f[22])gx(f,[0,0,5,0]);if(f[21]){var
z=f[4];if(z){var
M=z[2];h(f[26],z[1]);f[4]=M;var
L=1}else
var
L=0}else
var
L=0;var
d=g+1|0;continue;default:var
s=g+1|0;if(i<=s){lf(f,B1);var
d=s;continue}if(60===e.safeGet(s)){var
J=function(a,b,c){lf(f,a);return l(b,m(c))},K=s+1|0,y=function(f,b,c,d){var
a=d;for(;;){if(i<=a)return J(qV(fq(e,dn(c),a-c|0),f),b,a);var
j=e.safeGet(a);if(37===j){var
g=fq(e,dn(c),a-c|0),k=function(a,b,c){return y([0,b,[0,g,f]],a,c,c)},l=function(a,b,c,d){return y([0,qU(b,c),[0,g,f]],a,d,d)},m=function(a,d,c){var
b=0;return y([0,qU(function(a,b){return h(d,a)},b),[0,g,f]],a,c,c)},n=function(a,b){return gz(BZ,e,b)};return ir(e,x,b,a,k,l,m,n,function(a,b,c){return gz(B0,e,c)})}if(62===j)return J(qV(fq(e,dn(c),a-c|0),f),b,a);var
a=a+1|0;continue}};return y(0,b,K,K)}lf(f,B2);var
d=s;continue}}else
if(91<=j)switch(j+yk|0){case
1:break;case
2:qN(f,0);var
d=g+1|0;continue;default:var
t=g+1|0;if(i<=t){gy(f,0,4);var
d=t;continue}if(60===e.safeGet(t)){var
n=t+1|0;if(i<=n)var
k=[0,4,n];else{var
C=e.safeGet(n);if(98===C)var
k=[0,4,n+1|0];else
if(xH===C){var
r=n+1|0;if(i<=r)var
k=[0,0,r];else{var
F=e.safeGet(r);if(ek===F){var
w=r+1|0;if(i<=w)var
k=gz(BX,e,w);else
var
G=e.safeGet(w),k=kp===G?[0,3,w+1|0]:gz(u(BY,aU(1,G)),e,w)}else
var
k=kp===F?[0,2,r+1|0]:[0,0,r]}}else
var
k=kp===C?[0,1,n+1|0]:[0,4,n]}var
H=k[2],I=k[1];return a<50?o(1+a,b,H,function(a,b,c){gy(f,a,I);return l(b,m(c))}):v(o,[0,b,H,function(a,b,c){gy(f,a,I);return l(b,m(c))}])}gy(f,0,4);var
d=t;continue}}else{if(10===j){if(f[14]<f[15])qI(f,ft(0,3,0));var
d=g+1|0;continue}if(32<=j)switch(j+kh|0){case
0:lj(f,0);var
d=g+1|0;continue;case
12:iw(f,0,0);var
d=g+1|0;continue;case
14:lg(f,1);h(f[18],0);var
d=g+1|0;continue;case
27:var
q=g+1|0;if(i<=q){lj(f,0);var
d=q;continue}if(60===e.safeGet(q))return a<50?o(1+a,b,q+1|0,function(d,b,c){return E(b,c,function(a,b,c){iw(f,d,a);return l(b,m(c))})}):v(o,[0,b,q+1|0,function(d,b,c){return E(b,c,function(a,b,c){iw(f,d,a);return l(b,m(c))})}]);lj(f,0);var
d=q;continue;case
28:return a<50?o(1+a,b,g+1|0,function(a,b,c){p[1]=[0,a];return l(b,m(c))}):v(o,[0,b,g+1|0,function(a,b,c){p[1]=[0,a];return l(b,m(c))}]);case
31:iv(f,0);var
d=g+1|0;continue;case
32:D(64);var
d=g+1|0;continue}}return ix(e,g)}D(A);var
d=d+1|0;continue}}function
s(a,b,c,d){var
e=p[1];if(e){lh(f,e[1],c);p[1]=0}else
li(f,c);return a<50?g(1+a,b,d):v(g,[0,b,d])}function
r(a,b,c,d,e){j(c,f,d);return a<50?g(1+a,b,e):v(g,[0,b,e])}function
q(a,b,c,d){h(c,f);return a<50?g(1+a,b,d):v(g,[0,b,d])}function
d(a,b,c){iv(f,0);return a<50?g(1+a,b,c):v(g,[0,b,c])}function
a(a,b,c,d){var
e=kZ(k2(c),b);return n(function(a){return l(e,d)},b,c,x)}function
o(a,b,c,d){var
f=c;for(;;){if(i<=f)return eD(e,f);var
j=e.safeGet(f);if(32===j){var
f=f+1|0;continue}if(37===j){var
l=function(a,b,c){return k(d,qT(e,c,b),a,c)},m=function(a,b,c,d){return eD(e,d)},n=function(a,b,c){return eD(e,c)},o=function(a,b){return eD(e,b)};return ir(e,x,b,f,l,m,n,o,function(a,b,c){return eD(e,c)})}var
g=f;for(;;){if(i<=g)return eD(e,g);var
h=e.safeGet(g),q=48<=h?58<=h?0:1:45===h?1:0;if(q){var
g=g+1|0;continue}var
p=g===f?0:qT(e,g,fq(e,dn(f),g-f|0));return k(d,p,b,g)}}}function
l(b,c){return y(g(0,b,c))}function
O(b,c,d){return y(s(0,b,c,d))}function
P(b,c,d,e){return y(r(0,b,c,d,e))}function
Q(b,c,d){return y(q(0,b,c,d))}function
R(b,c){return y(d(0,b,c))}function
S(b,c,d){return y(a(0,b,c,d))}function
E(b,c,d){return y(o(0,b,c,d))}function
m(a){var
b=a;for(;;){if(i<=b)return ix(e,b);var
c=e.safeGet(b);if(32===c){var
b=b+1|0;continue}return 62===c?b+1|0:ix(e,b)}}return l(b,0)}var
c=dn(0);return iq(function(a,b){return n(d,c,a,b)},a)}}function
bS(a){return qW(function(a){return 0},a)}var
zP=kR[1];kR[1]=function(a){iv(BP,0);return h(zP,0)};var
lm=0;function
ln(a){try{var
b=h(a[7],0);a[2]=b;a[3]=1;a[4]=a[4]+1|0;if(10===b)a[5]=a[5]+1|0}catch(f){f=m(f);if(f[1]===cX){a[2]=lm;a[3]=0;a[1]=1;return lm}throw f}return b}function
aL(a){return a[3]?a[2]:ln(a)}function
cz(a){var
b=aL(a);if(a[1])throw[0,cX];return b}function
aX(a){return a[1]}function
qX(a){return a[3]?a[4]-1|0:a[4]}function
gA(a){a[3]=0;return 0}function
bu(a){var
b=a[8],c=aO(b);gt(b);a[6]=a[6]+1|0;return c}function
qY(a,b){gA(b);return a}function
bg(a,b){return qY(a-1|0,b)}function
aj(a,b,c){Q(b[8],c);return bg(a,b)}var
B3=h6;function
qZ(a,b){return[0,0,lm,0,0,0,0,b,aw(B3),a]}var
lp=ae(h6),iy=[0,0],lq=[0,0],q0=[0,0],B5=h6,B7=[0,B6,pU];qZ(B7,function(a){if(iy[1]<lq[1]){var
b=lp.safeGet(iy[1]);iy[1]++;return b}if(q0[1])throw[0,cX];lq[1]=gp(pU,lp,0,B5);if(0===lq[1]){q0[1]=1;throw[0,cX]}iy[1]=1;return lp.safeGet(0)});var
lr=[0,B8];function
bh(a){throw[0,lr,a]}function
ls(a){return bh(h(E(B9),a))}function
iz(a){return bh(h(E(B_),a))}function
lt(a,b,c){var
d=gu(a);return S(k(E(Ca),c,b,d))}function
fu(a){var
b=gu(a);return S(h(E(Cb),b))}function
lu(a){return bh(Cc)}function
iA(a,b){return bh(j(E(Cd),a,b))}function
q1(a,b){var
c=b;for(;;){var
d=cz(a);if(d===c)return gA(a);if(13===d)if(10===c){gA(a);var
c=10;continue}return iA(c,d)}}function
iB(a){return bu(a).safeGet(0)}function
dU(a,b){var
e=a+hP|0;if(!(e<0||32<e)){switch(e){case
12:case
17:case
29:var
c=bu(b),d=2;break;case
0:case
32:var
c=u(Cl,bu(b)),d=2;break;case
10:var
h=u(Cm,bu(b)),d=0;break;case
23:var
h=u(Cn,bu(b)),d=0;break;default:var
d=1}switch(d){case
1:var
f=0;break;case
2:var
f=1;break;default:var
c=h,f=1}if(f){var
g=c.getLen();if(0!==g)if(43===c.safeGet(0))return Y(c,1,g-1|0);return c}}throw[0,l,Ck]}function
iC(a){return wZ(bu(a))}function
iD(a,b){var
c=a;for(;;){if(0===c)return c;var
d=aL(b);if(aX(b))return c;if(58<=d){if(95===d){var
c=bg(c,b);continue}}else
if(48<=d){var
c=aj(c,b,d);continue}return c}}function
lv(a,b){if(0===a)return iz(Co);var
c=cz(b);return(c+ax|0)<0||9<(c+ax|0)?bh(h(E(Cp),c)):iD(aj(a,b,c),b)}function
lw(a,b,c,d){if(0===c)return iz(Cq);var
g=cz(d);if(h(b,g)){var
e=aj(c,d,g);for(;;){if(0===e)return e;var
f=aL(d);if(aX(d))return e;if(h(b,f)){var
e=aj(e,d,f);continue}if(95===f){var
e=bg(e,d);continue}return e}}return bh(j(E(Cr),g,a))}function
Cs(a){return(a+ax|0)<0||1<(a+ax|0)?0:1}function
q2(a,b){return lw(Ct,Cs,a,b)}function
Cu(a){return(a+ax|0)<0||7<(a+ax|0)?0:1}function
q3(a,b){return lw(Cv,Cu,a,b)}function
Cw(a){var
b=a+ax|0,c=b<0||22<b?(b+kG|0)<0||5<(b+kG|0)?0:1:(b+hL|0)<0||6<(b+hL|0)?1:0;return c?1:0}function
q4(a,b){return lw(Cx,Cw,a,b)}function
lx(a,b){var
c=cz(b),d=c-43|0;if(!(d<0||2<d))switch(d){case
1:break;case
2:return aj(a,b,c);default:return aj(a,b,c)}return a}function
ly(a,b){return lv(lx(a,b),b)}function
q5(a,b,c,d){var
g=a+hP|0;if(!(g<0||32<g))switch(g){case
0:case
32:return q4(b,d);case
10:return q2(b,d);case
12:return ly(b,d);case
17:var
j=lx(b,d),i=cz(d);if(48===i){var
f=aj(j,d,i);if(0===f)return f;var
e=aL(d);if(aX(d))return f;if(99<=e){if(ek===e)return q3(aj(f,d,e),d);var
h=h4===e?1:0}else
if(88===e)var
h=1;else{if(98<=e)return q2(aj(f,d,e),d);var
h=0}return h?q4(aj(f,d,e),d):iD(f,d)}return lv(j,d);case
23:return q3(b,d);case
29:return lv(b,d)}throw[0,l,Cy]}function
q6(a,b){if(0===a)return a;var
c=aL(b);return aX(b)?a:(c+ax|0)<0||9<(c+ax|0)?a:iD(aj(a,b,c),b)}function
iE(a,b){if(0===a)return a;var
c=aL(b);if(aX(b))return a;if(69!==c)if(hO!==c)return a;return ly(aj(a,b,c),b)}function
q7(a,b,c){var
d=b;for(;;){if(0===d)return d;var
f=aL(c);if(aX(c))return d;if(0===a){var
e=f-9|0,g=e<0||4<e?23===e?1:0:(e-2|0)<0||1<(e-2|0)?1:0;if(g)return d;var
d=aj(d,c,f);continue}if(p1(f,a))return qY(d,c);var
d=aj(d,c,f);continue}}function
gB(a){return a-48|0}function
q8(a){return 97<=a?a-87|0:65<=a?a-55|0:a-48|0}function
q9(a,b,c){if(0===b)return iz(a);var
d=aL(c);return aX(c)?bh(h(E(B$),a)):d}function
lz(a,b){return q9(CB,a,b)}function
iF(a,b){return q9(CC,a,b)}function
q_(a,b){var
c=lz(a,b);if(40<=c)if(58<=c){var
i=c-92|0;if(i<0||28<i)var
f=0;else
switch(i){case
0:case
6:case
18:case
22:case
24:var
f=1;break;case
28:var
n=function(a){var
d=ln(b),c=d+ax|0,e=c<0||22<c?(c+kG|0)<0||5<(c+kG|0)?0:1:(c+hL|0)<0||6<(c+hL|0)?1:0;return e?d:ls(d)},o=n(0),p=n(0),x=q8(p),h=(16*q8(o)|0)+x|0;if(0<=h)if(X<h)var
l=0;else
var
q=ic(h),l=1;else
var
l=0;if(!l)var
q=bh(j(E(CA),o,p));return aj(a-2|0,b,q);default:var
f=0}}else{if(48<=c){var
r=function(a){var
c=ln(b);return(c+ax|0)<0||9<(c+ax|0)?ls(c):c},s=r(0),t=r(0),v=gB(t),w=10*gB(s)|0,g=((dM*gB(c)|0)+w|0)+v|0;if(0<=g)if(X<g)var
m=0;else
var
u=ic(g),m=1;else
var
m=0;if(!m)var
u=bh(k(E(Cz),c,s,t));return aj(a-2|0,b,u)}var
f=0}else
var
f=34===c?1:39<=c?1:0;if(f){if(e_<=c)if(h3<=c)var
d=0;else
switch(c-110|0){case
0:var
e=10,d=1;break;case
4:var
e=13,d=1;break;case
6:var
e=9,d=1;break;default:var
d=0}else
if(98===c)var
e=8,d=1;else
var
d=0;if(!d)var
e=c;return aj(a,b,e)}return ls(c)}function
q$(a,c){function
e(a,b){var
d=b;for(;;){var
h=iF(d,c);if(34===h)return bg(d,c);if(92===h){var
e=bg(d,c),i=iF(e,c);if(10===i)return a<50?f(1+a,bg(e,c)):v(f,[0,bg(e,c)]);if(13===i){var
g=bg(e,c);if(10===iF(g,c))return a<50?f(1+a,bg(g,c)):v(f,[0,bg(g,c)]);var
d=aj(g,c,13);continue}var
d=q_(e,c);continue}var
d=aj(d,c,h);continue}}function
f(a,b){var
d=b;for(;;){if(32===iF(d,c)){var
d=bg(d,c);continue}return a<50?e(1+a,d):v(e,[0,d])}}function
d(b){return y(e(0,b))}function
g(b){return y(f(0,b))}var
b=cz(c);return 34===b?d(bg(a,c)):iA(34,b)}function
lA(a,b,c){var
d=b&7,e=b>>>3,f=a.safeGet(e);return a.safeSet(e,ic(c<<d|f&gm(1<<d)))}function
ra(a){return gm(a)&1}function
iG(h,b,c){var
l=0===ra(h)?0:X,d=aU(32,ic(l)),i=b.getLen()-1|0,e=0,a=0;for(;;){if(a<=i){if(45===b.safeGet(a))if(e){var
j=b.safeGet(a-1|0),f=a+1|0;if(i<f){var
e=0,a=f-1|0;continue}var
k=b.safeGet(f);if(!(k<j)){var
g=j;for(;;){lA(d,g,h);var
m=g+1|0;if(k!==g){var
g=m;continue}break}}var
e=0,a=f+1|0;continue}lA(d,b.safeGet(a),h);var
e=1,a=a+1|0;continue}M(function(a){return lA(d,a,ra(h))},c);return function(a){return d.safeGet(a>>>3)>>>(a&7)&1}}}var
lB=aq(0,7);function
rb(a,b){try{var
f=bR(bR(lB,b),a)}catch(f){f=m(f);if(f[1]===o){if(0===b[0]){var
d=b[1],g=d.getLen();if(g<0||3<g)var
c=iG(1,d,a);else
switch(g){case
1:var
n=d.safeGet(0),c=function(a){return a===n?1:0};break;case
2:var
p=d.safeGet(0),q=d.safeGet(1),c=function(a){if(a!==p)if(a!==q)return 0;return 1};break;case
3:var
i=d.safeGet(1),r=d.safeGet(0),s=d.safeGet(2),c=45===i?iG(1,d,a):function(a){if(a!==r)if(a!==i)if(a!==s)return 0;return 1};break;default:var
c=function(a){return 0}}}else{var
e=b[1],h=e.getLen();if(h<0||3<h)var
c=iG(0,e,a);else
switch(h){case
1:var
t=e.safeGet(0),c=function(a){return a!==t?1:0};break;case
2:var
u=e.safeGet(0),v=e.safeGet(1),c=function(a){if(a!==u)if(a!==v)return 1;return 0};break;case
3:var
j=e.safeGet(1),w=e.safeGet(0),x=e.safeGet(2),c=45===j?iG(0,e,a):function(a){if(a!==w)if(a!==j)if(a!==x)return 1;return 0};break;default:var
c=function(a){return 1}}}try{var
y=bR(lB,b),l=y}catch(f){f=m(f);if(f[1]!==o)throw f;var
k=aq(0,3);c1(lB,b,k);var
l=k}c1(l,a,c);return c}throw f}return f}function
fv(a,b){var
c=a+pA|0;if(!(c<0||2<c))switch(c){case
1:break;case
2:return qX(b);default:return b[5]}return b[6]}function
CF(a,b){if(b[1]===lr)var
c=b[2];else{if(b[1]!==cf)throw b;var
c=b[2]}var
d=qX(a);return bh(j(E(CG),d,c))}function
rd(a,b){return ou(a,b[0+1])}var
lC=[0,0];ou(CJ,lC);var
CK=2;function
CL(a){var
b=[0,0],d=a.getLen()-1|0,e=0;if(!(d<0)){var
c=e;for(;;){b[1]=(h5*b[1]|0)+a.safeGet(c)|0;var
g=c+1|0;if(d!==c){var
c=g;continue}break}}b[1]=b[1]&km;var
f=hJ<b[1]?b[1]-xn|0:b[1];return f}var
dp=dm([0,function(a,b){return hC(a,b)}]),eE=dm([0,function(a,b){return hC(a,b)}]),dV=dm([0,function(a,b){return ga(a,b)}]),re=w0(0,0),CM=[0,0];function
rf(a){return 2<a?rf((a+1|0)/2|0)*2|0:a}function
rg(a){CM[1]++;var
c=a.length-1,d=$((c*2|0)+2|0,re);B(d,0,c);B(d,1,(hB(rf(c),fo)/8|0)-1|0);var
e=c-1|0,f=0;if(!(e<0)){var
b=f;for(;;){B(d,(b*2|0)+3|0,I(a,b));var
g=b+1|0;if(e!==b){var
b=g;continue}break}}return[0,CK,d,eE[1],dV[1],0,0,dp[1],0]}function
lD(a,b){var
c=a[2].length-1,d=c<b?1:0;if(d){var
e=$(b,re);fk(a[2],0,e,0,c);a[2]=e;var
f=0}else
var
f=d;return f}var
rh=[0,0],CN=[0,0];function
lE(a){var
b=a[2].length-1;lD(a,b+1|0);return b}function
dW(a,b){try{var
d=j(eE[22],b,a[3])}catch(f){f=m(f);if(f[1]===o){var
c=lE(a);a[3]=k(eE[4],b,c,a[3]);a[4]=k(dV[4],c,1,a[4]);return c}throw f}return d}function
dX(c,b){return dO(function(a){return dW(c,a)},b)}function
fx(a,b,c){CN[1]++;return j(dV[22],b,a[4])?(lD(a,b+1|0),B(a[2],b,c)):(a[6]=[0,[0,b,c],a[6]],0)}function
lF(a){return a===0?0:pZ(a)}function
dq(a,b){try{var
d=j(dp[22],b,a[7])}catch(f){f=m(f);if(f[1]===o){var
c=a[1];a[1]=c+1|0;if(O(b,CO))a[7]=k(dp[4],b,c,a[7]);return c}throw f}return d}function
ri(a){return av(a,0)?[0]:a}function
lG(a){if(a===0)return rg([0]);var
c=rg(dO(CL,a)),d=a.length-1-1|0,f=0;if(!(d<0)){var
b=f;for(;;){var
e=(b*2|0)+2|0;c[3]=k(eE[4],a[b+1],e,c[3]);c[4]=k(dV[4],e,1,c[4]);var
g=b+1|0;if(d!==b){var
b=g;continue}break}}return c}function
lH(a){rh[1]=(rh[1]+a[1]|0)-1|0;a[8]=L(a[8]);return lD(a,3+oz(I(a[2],1)*16|0,fo)|0)}function
cA(g,b,c,d,e,f){var
u=e[2],K=e[4],r=lF(b),s=lF(c),t=lF(d),q=p(function(a){return dW(g,a)},s),v=p(function(a){return dW(g,a)},t);g[5]=[0,[0,g[3],g[4],g[6],g[7],q,r],g[5]];var
x=dp[1],y=g[7];function
z(a,b,c){return ex(a,r)?k(dp[4],a,b,c):c}g[7]=k(dp[11],z,y,x);var
i=[0,eE[1]],n=[0,dV[1]];ig(function(a,b){i[1]=k(eE[4],a,b,i[1]);var
d=n[1];try{var
e=j(dV[22],b,g[4]),c=e}catch(f){f=m(f);if(f[1]!==o)throw f;var
c=1}n[1]=k(dV[4],b,c,d);return 0},t,v);ig(function(a,b){i[1]=k(eE[4],a,b,i[1]);n[1]=k(dV[4],b,0,n[1]);return 0},s,q);g[3]=i[1];g[4]=n[1];var
A=0,B=g[6];g[6]=aH(function(a,b){return ex(a[1],q)?b:[0,a,b]},B,A);var
L=f?j(u,g,K):h(u,g),a=a4(g[5]),C=a[6],D=a[5],E=a[4],F=a[3],G=a[2],H=a[1];g[5]=ie(g[5]);g[7]=w(function(a,b){var
c=j(dp[22],b,g[7]);return k(dp[4],b,c,a)},E,C);g[3]=H;g[4]=G;var
J=g[6];g[6]=aH(function(a,b){return ex(a[1],D)?b:[0,a,b]},J,F);var
M=0,N=ri(d),O=[0,dO(function(a){var
d=dW(g,a);try{var
b=g[6];for(;;){if(!b)throw[0,o];var
c=b[1],e=b[2],f=c[2];if(0!==bI(c[1],d)){var
b=e;continue}break}}catch(f){f=m(f);if(f[1]===o)return I(g[2],d);throw f}return f},N),M],P=ri(b);return ahh([0,[0,L],[0,dO(function(a){try{var
b=j(dp[22],a,g[7])}catch(f){f=m(f);if(f[1]===o)throw[0,l,CP];throw f}return b},P),O]])}function
dr(a,b){var
c=lG(a),d=h(b,c);lH(c);return[0,h(d,0),b,d,0]}function
ch(a,b){if(a)return a;var
c=w0(e$,b[1]);c[0+1]=b[2];var
d=lC[1];c[1+1]=d;lC[1]=d+1|0;return c}function
cB(a,b,c){if(a)return b;var
e=c[8];if(0!==e){var
d=e;for(;;){if(d){var
f=d[2];h(d[1],b);var
d=f;continue}break}}return b}function
iH(a){var
b=lE(a);if(0===(b%2|0))var
d=0;else
if((2+oz(I(a[2],1)*16|0,fo)|0)<b)var
d=0;else
var
c=lE(a),d=1;if(!d)var
c=b;B(a[2],c,0);return c}function
eF(a,al){var
i=[0,0],am=al.length-1;for(;;){if(i[1]<am){var
an=I(al,i[1]),e=function(a){i[1]++;return I(al,i[1])},l=e(0);if(typeof
l===g)switch(l){case
1:var
n=e(0),f=function(n){return function(a){return a[n+1]}}(n);break;case
2:var
o=e(0),b=e(0),f=function(o,b){return function(a){return a[o+1][b+1]}}(o,b);break;case
3:var
p=e(0),f=function(p){return function(a){return h(a[1][p+1],a)}}(p);break;case
4:var
q=e(0),f=function(q){return function(a,b){a[q+1]=b;return 0}}(q);break;case
5:var
r=e(0),s=e(0),f=function(r,s){return function(a){return h(r,s)}}(r,s);break;case
6:var
t=e(0),u=e(0),f=function(t,u){return function(a){return h(t,a[u+1])}}(t,u);break;case
7:var
v=e(0),w=e(0),c=e(0),f=function(v,w,c){return function(a){return h(v,a[w+1][c+1])}}(v,w,c);break;case
8:var
x=e(0),y=e(0),f=function(x,y){return function(a){return h(x,h(a[1][y+1],a))}}(x,y);break;case
9:var
z=e(0),A=e(0),B=e(0),f=function(z,A,B){return function(a){return j(z,A,B)}}(z,A,B);break;case
10:var
C=e(0),D=e(0),E=e(0),f=function(C,D,E){return function(a){return j(C,D,a[E+1])}}(C,D,E);break;case
11:var
F=e(0),G=e(0),H=e(0),d=e(0),f=function(F,G,H,d){return function(a){return j(F,G,a[H+1][d+1])}}(F,G,H,d);break;case
12:var
J=e(0),K=e(0),L=e(0),f=function(J,K,L){return function(a){return j(J,K,h(a[1][L+1],a))}}(J,K,L);break;case
13:var
M=e(0),N=e(0),O=e(0),f=function(M,N,O){return function(a){return j(M,a[N+1],O)}}(M,N,O);break;case
14:var
P=e(0),Q=e(0),R=e(0),S=e(0),f=function(P,Q,R,S){return function(a){return j(P,a[Q+1][R+1],S)}}(P,Q,R,S);break;case
15:var
T=e(0),U=e(0),V=e(0),f=function(T,U,V){return function(a){return j(T,h(a[1][U+1],a),V)}}(T,U,V);break;case
16:var
W=e(0),X=e(0),f=function(W,X){return function(a){return j(a[1][W+1],a,X)}}(W,X);break;case
17:var
Y=e(0),Z=e(0),f=function(Y,Z){return function(a){return j(a[1][Y+1],a,a[Z+1])}}(Y,Z);break;case
18:var
_=e(0),$=e(0),aa=e(0),f=function(_,$,aa){return function(a){return j(a[1][_+1],a,a[$+1][aa+1])}}(_,$,aa);break;case
19:var
ab=e(0),ac=e(0),f=function(ab,ac){return function(a){var
b=h(a[1][ac+1],a);return j(a[1][ab+1],a,b)}}(ab,ac);break;case
20:var
ad=e(0),k=e(0);iH(a);var
f=function(ad,k){return function(a){return h(cs(k,ad,0),k)}}(ad,k);break;case
21:var
ae=e(0),af=e(0);iH(a);var
f=function(ae,af){return function(a){var
b=a[af+1];return h(cs(b,ae,0),b)}}(ae,af);break;case
22:var
ag=e(0),ah=e(0),ai=e(0);iH(a);var
f=function(ag,ah,ai){return function(a){var
b=a[ah+1][ai+1];return h(cs(b,ag,0),b)}}(ag,ah,ai);break;case
23:var
aj=e(0),ak=e(0);iH(a);var
f=function(aj,ak){return function(a){var
b=h(a[1][ak+1],a);return h(cs(b,aj,0),b)}}(aj,ak);break;default:var
m=e(0),f=function(m){return function(a){return m}}(m)}else
var
f=l;fx(a,an,f);i[1]++;continue}return 0}}function
lI(a,b,c){if(W(c,CQ))return b;var
d=c.getLen()-1|0;for(;;){if(0<=d){if(j(a,c,d)){var
d=d-1|0;continue}var
f=d+1|0,e=d;for(;;){if(0<=e){if(j(a,c,e))return Y(c,e+1|0,(f-e|0)-1|0);var
e=e-1|0;continue}return Y(c,0,f)}}return Y(c,0,1)}}function
lJ(a,b,c){if(W(c,CR))return b;var
d=c.getLen()-1|0;for(;;){if(0<=d){if(j(a,c,d)){var
d=d-1|0;continue}var
e=d;for(;;){if(0<=e){if(j(a,c,e)){var
f=e;for(;;){if(0<=f){if(j(a,c,f)){var
f=f-1|0;continue}return Y(c,0,f+1|0)}return Y(c,0,1)}}var
e=e-1|0;continue}return b}}return Y(c,0,1)}}function
lL(a,b){return 47===a.safeGet(b)?1:0}function
rj(a){var
b=a.getLen()<1?1:0,c=b||(47!==a.safeGet(0)?1:0);return c}function
CU(a){var
c=rj(a);if(c){var
e=a.getLen()<2?1:0,d=e||O(Y(a,0,2),CW);if(d)var
f=a.getLen()<3?1:0,b=f||O(Y(a,0,3),CV);else
var
b=d}else
var
b=c;return b}function
CX(a,b){var
c=b.getLen()<=a.getLen()?1:0,d=c?W(Y(a,a.getLen()-b.getLen()|0,b.getLen()),b):c;return d}try{var
agM=e7(agL),lM=agM}catch(f){f=m(f);if(f[1]!==o)throw f;var
lM=CY}function
rk(a){var
d=a.getLen(),b=aw(d+20|0);Q(b,39);var
e=d-1|0,f=0;if(!(e<0)){var
c=f;for(;;){if(39===a.safeGet(c))aW(b,CZ);else
Q(b,a.safeGet(c));var
g=c+1|0;if(e!==c){var
c=g;continue}break}}Q(b,39);return aO(b)}function
C0(a){return lI(lL,lK,a)}function
C1(a){return lJ(lL,lK,a)}function
fy(a,b){var
c=a.safeGet(b),d=47===c?1:0;if(d)var
e=d;else
var
f=92===c?1:0,e=f||(58===c?1:0);return e}function
lO(a){var
e=a.getLen()<1?1:0,c=e||(47!==a.safeGet(0)?1:0);if(c){var
f=a.getLen()<1?1:0,d=f||(92!==a.safeGet(0)?1:0);if(d)var
g=a.getLen()<2?1:0,b=g||(58!==a.safeGet(1)?1:0);else
var
b=d}else
var
b=c;return b}function
rl(a){var
c=lO(a);if(c){var
g=a.getLen()<2?1:0,d=g||O(Y(a,0,2),C7);if(d){var
h=a.getLen()<2?1:0,e=h||O(Y(a,0,2),C6);if(e){var
i=a.getLen()<3?1:0,f=i||O(Y(a,0,3),C5);if(f)var
j=a.getLen()<3?1:0,b=j||O(Y(a,0,3),C4);else
var
b=f}else
var
b=e}else
var
b=d}else
var
b=c;return b}function
rm(a,b){var
c=b.getLen()<=a.getLen()?1:0;if(c)var
e=Y(a,a.getLen()-b.getLen()|0,b.getLen()),f=kV(b),d=W(kV(e),f);else
var
d=c;return d}try{var
agK=e7(agJ),rn=agK}catch(f){f=m(f);if(f[1]!==o)throw f;var
rn=C8}function
C9(h){var
i=h.getLen(),e=aw(i+20|0);Q(e,34);function
g(a,b){var
c=b;for(;;){if(c===i)return Q(e,34);var
f=h.safeGet(c);if(34===f)return a<50?d(1+a,0,c):v(d,[0,0,c]);if(92===f)return a<50?d(1+a,0,c):v(d,[0,0,c]);Q(e,f);var
c=c+1|0;continue}}function
d(a,b,c){var
f=b,d=c;for(;;){if(d===i){Q(e,34);return a<50?j(1+a,f):v(j,[0,f])}var
l=h.safeGet(d);if(34===l){k((2*f|0)+1|0);Q(e,34);return a<50?g(1+a,d+1|0):v(g,[0,d+1|0])}if(92===l){var
f=f+1|0,d=d+1|0;continue}k(f);return a<50?g(1+a,d):v(g,[0,d])}}function
j(a,b){var
d=1;if(!(b<1)){var
c=d;for(;;){Q(e,92);var
f=c+1|0;if(b!==c){var
c=f;continue}break}}return 0}function
a(b){return y(g(0,b))}function
b(b,c){return y(d(0,b,c))}function
k(b){return y(j(0,b))}a(0);return aO(e)}function
ro(a){var
c=2<=a.getLen()?1:0;if(c)var
b=a.safeGet(0),g=91<=b?(b+xD|0)<0||25<(b+xD|0)?0:1:65<=b?1:0,d=g?1:0,e=d?58===a.safeGet(1)?1:0:d;else
var
e=c;if(e){var
f=Y(a,2,a.getLen()-2|0);return[0,Y(a,0,2),f]}return[0,C_,a]}function
C$(a){var
b=ro(a),c=b[1];return u(c,lJ(fy,lN,b[2]))}function
Da(a){return lI(fy,lN,ro(a)[2])}function
Dd(a){return lI(fy,lP,a)}function
De(a){return lJ(fy,lP,a)}if(O(cg,Df))if(O(cg,Dg)){if(O(cg,Dh))throw[0,l,Di];var
bT=[0,lN,C2,C3,fy,lO,rl,rm,rn,C9,Da,C$]}else
var
bT=[0,lK,CS,CT,lL,rj,CU,CX,lM,rk,C0,C1];else
var
bT=[0,lP,Db,Dc,fy,lO,rl,rm,lM,rk,Dd,De];var
iI=bT[11],gD=bT[10],lQ=bT[9],fz=bT[7],rp=bT[5],rq=bT[3],eG=bT[1],Dj=bT[8],Dk=bT[6],Dl=bT[4],Dm=bT[2];function
ds(a,b){var
c=a.getLen();if(0!==c)if(!Dl(a,c-1|0))return u(a,u(rq,b));return u(a,b)}function
rr(a,b){var
c=a.getLen()-b.getLen()|0;return 0<=c?Y(a,0,c):S(Dn)}var
iJ=[ac,function(a){return qx(0)}],iK=b,lS=[0,Dt],Dr=iK.Array,Ds=iK.Date;rd(Du,[0,lS,{}]);var
Dq=undefined;k$(function(a){return a[1]===lS?[0,new
bq(a[2].toString())]:0});k$(function(a){return a
instanceof
Dr?0:[0,new
bq(a.toString())]});function
lT(a,b){return ah4(a,kb(function(a){return h(b,new
bq(a))}))}function
rt(a,b){var
c=a[3]+b|0,d=cw(c,2*a[2]|0),e=d<=dl?d:dl<c?S(Dv):dl,f=ae(e);cy(a[1],0,f,0,a[3]);a[1]=f;a[2]=e;return 0}function
lU(a,b){var
c=a[2]<(a[3]+b|0)?1:0;return c?j(a[6],a,b):c}function
ru(a,b){lU(a,b);var
c=a[3];a[3]=c+b|0;return c}function
iL(a,b,c,d){lU(a,d);cy(b,c,a[1],a[3],d);a[3]=a[3]+d|0;return 0}function
dY(a,b){return iL(a,b,0,b.getLen())}function
bv(a,b){var
c=ru(a,1);return a[1].safeSet(c,b)}var
lV=rs.slice();lV[1]=0;lV[5]=0;lV[7]=0;rs.slice()[5]=0;var
Dx=[0,function(a){throw[0,l,Dw]}];Dx[1]=function(a){var
c=pH;for(;;){var
b=j$(Dy,c,a);if(0===b)return kW(a);h(a[1],a);var
c=b;continue}};function
rv(a){var
b=10<=a?a+87|0:a+48|0;return aK(b)}function
eH(a,b,c,d,e){iL(d,a,b[1],c-b[1]|0);dY(d,e);b[1]=c+1|0;return 0}function
lW(a,b){bv(a,34);var
c=[0,0],j=b.getLen()-1|0,n=0;if(!(j<0)){var
d=n;for(;;){var
f=b.safeGet(d);if(92===f)eH(b,c,d,a,DC);else{if(35<=f)var
g=hZ===f?1:0;else
if(8<=f){switch(f-8|0){case
24:case
25:var
g=0,e=0;break;case
0:eH(b,c,d,a,DD);var
e=1;break;case
1:eH(b,c,d,a,DE);var
e=1;break;case
2:eH(b,c,d,a,DF);var
e=1;break;case
4:eH(b,c,d,a,DG);var
e=1;break;case
5:eH(b,c,d,a,DH);var
e=1;break;case
26:eH(b,c,d,a,DI);var
e=1;break;default:var
g=1,e=0}if(e)var
g=2}else
var
g=1;switch(g){case
1:iL(a,b,c[1],d-c[1]|0);var
h=ru(a,6),i=a[1];cy(Dz,0,i,h,4);i.safeSet(h+4|0,rv(f>>>4));i.safeSet(h+5|0,rv(f&15));c[1]=d+1|0;break;case
2:break}}var
o=d+1|0;if(j!==d){var
d=o;continue}break}}try{iL(a,b,c[1],b.getLen()-c[1]|0)}catch(f){var
l=b.getLen()-c[1]|0,m=c[1];k(k5(DA),b,m,l);aT(DB)}return bv(a,34)}var
DM=cW(zA).getLen(),DN=cw(cW(dj).getLen(),DM);function
lX(a,b,c){if(0===c)return b;var
d=lX(a,b,c/10|0);a.safeSet(d,aK((c%10|0)+48|0));return d+1|0}function
lY(a,b,c,d){if(d){var
i=d[2];j(a,c,d[1]);var
e=i;for(;;){if(e){var
f=e[2],g=e[1];h(b,c);j(a,c,g);var
e=f;continue}return 0}}return 0}function
lZ(a){return bv(a,44)}function
gE(a,b){if(typeof
b===g)return dY(a,DJ);var
c=b[1];if(708012133<=c){if(726928360===c){var
y=b[2];bv(a,40);lY(gE,lZ,a,y);return bv(a,41)}if(ff<=c){if(ep<=c){var
z=b[2],C=function(a,b){var
c=b[2];lW(a,b[1]);bv(a,58);return gE(a,c)};bv(a,en);lY(C,lZ,a,z);return bv(a,gc)}var
A=b[2];bv(a,91);lY(gE,lZ,a,A);return bv(a,93)}if(737456202<=c){var
t=b[2]?DK:DL;return dY(a,t)}var
r=b[2],s=r[2],B=r[1];bv(a,60);lW(a,B);if(s){var
D=s[1];bv(a,58);gE(a,D)}return bv(a,62)}if(kq<=c){if(365180284<=c){var
d=b[2],p=wV(d);if(3===p){var
x=0<d?DO:DP;return dY(a,x)}if(4<=p)return dY(a,DQ);var
q=h(E(DR),d),j=wZ(q)==d?q:h(E(DT),d);dY(a,j);try{var
o=j.getLen()-1|0,u=0;if(!(o<0)){var
e=u;for(;;){var
i=j.safeGet(e),F=48<=i?58<=i?0:1:45===i?1:0;if(!F)throw[0,fh];var
w=e+1|0;if(o!==e){var
e=w;continue}break}}var
v=1,k=v}catch(f){f=m(f);if(f[1]!==fh)throw f;var
k=0}return k?dY(a,DS):k}var
f=b[2];lU(a,DN);if(0<f){a[3]=lX(a[1],a[3],f);return 0}if(0<=f)return bv(a,48);var
l=a[1],n=a[3];l.safeSet(n,45);a[3]=lX(l,n+1|0,pT(f));return 0}return-752863768<=c?dY(a,b[2]):lW(a,b[2])}var
DV=[0,function(a){throw[0,l,DU]}];DV[1]=function(a){var
c=pH;for(;;){var
b=j$(DW,c,a);if(0===b)return kW(a);h(a[1],a);var
c=b;continue}};var
DY=[0,function(a){throw[0,l,DX]}];DY[1]=function(a){var
c=pH;for(;;){var
b=j$(DZ,c,a);if(0===b)return kW(a);h(a[1],a);var
c=b;continue}};function
c2(a,b){return a.safeGet(b)}function
rw(a,b){var
c=c2(a,b>>>3);return c>>>(gm(b)&7)&1}function
iM(a,b){var
c=a[2],f=a[1],e=f-1|0;if(!(e<0||15<e))switch(e){case
0:return rw(c,b);case
1:var
k=c2(c,b>>>2);return k>>>(2*(gm(b)&3)|0)&3;case
3:var
m=c2(c,b>>>1);return m>>>(4*(gm(b)&1)|0)&15;case
7:return c2(c,b);case
15:var
g=2*b|0,n=c2(c,g+1|0);return(c2(c,g)<<8)+n|0}if(32===f){var
d=4*b|0,h=c2(c,d+3|0),i=c2(c,d+2|0),j=c2(c,d+1|0);return(((((c2(c,d)<<8)+j|0)<<8)+i|0)<<8)+h|0}throw[0,l,D0]}var
iN=[0,D5];function
rz(a){return function(c){var
b=fp(D7);return j(a,function(a){var
b=h(c,0);a[11]=b[2];a[12]=b[3];return b[1]},b)}}var
bU=[0,D8],fA=$(cc,-1),j7=0;for(;;){B(fA,j7,1);var
agI=j7+1|0;if(hZ!==j7){var
j7=agI;continue}var
j6=hN;for(;;){B(fA,j6,2);var
agH=j6+1|0;if(h5!==j6){var
j6=agH;continue}var
j5=gf;for(;;){B(fA,j5,3);var
agG=j5+1|0;if(239!==j5){var
j5=agG;continue}var
j4=hU;for(;;){B(fA,j4,4);var
agF=j4+1|0;if(247!==j4){var
j4=agF;continue}var
iO=[0,D9],D$=[0,D_],Ea=-1,Eb=dK,Ec=0,Ed=0,Ee=0,Ef=0,Eg=0,Eh=0,Ei=0,Ej=[0],eI=[0,function(a,b,c){throw[0,l,Ek]},Ej,Ei,Eh,Eg,Ef,Ee,Ed,Ec],d=function(a){if(a[5]===a[3])if(a[9])var
d=Ea;else{if(a[2].length-1<(a[3]+dK|0)){var
b=a[6],c=a[3]-b|0;if((c+dK|0)<=a[2].length-1)fk(a[2],b,a[2],0,c);else{var
f=$((a[2].length-1+dK|0)*2|0,0);fk(a[2],b,f,0,c);a[2]=f}a[3]=c;a[4]=a[4]+b|0;a[5]=a[5]-b|0;a[7]=a[7]-b|0;a[6]=0}var
e=k(a[1],a[2],a[5],Eb);if(0===e){B(a[2],a[3],-1);a[3]=a[3]+1|0}else
a[3]=a[3]+e|0;var
d=I(a[2],a[5])}else
var
d=I(a[2],a[5]);if(d===-1)a[9]=1;else
a[5]=a[5]+1|0;return d},rA=function(a){a[6]=a[5];a[7]=a[5];a[8]=-1;return 0},K=function(a,b){a[7]=a[5];a[8]=b;return 0},e=function(a){a[5]=a[7];return a[8]},iP=function(a){return a[5]+a[4]|0},aQ=function(a){var
g=a[5]-a[6]|0,i=a[6]+0|0,j=a[2],c=aw(g*4|0),e=i,d=g;for(;;){if(0<d){var
b=I(j,e);if(hZ<b)if(2047<b)if(eo<b){if(1114111<b)throw[0,bU];Q(c,aK(hU|b>>>18));Q(c,aK(dg|b>>>12&63));Q(c,aK(dg|b>>>6&63));Q(c,aK(dg|b&63))}else{var
f=yZ<=b?1:0,h=f?b<57344?1:0:f;if(h)throw[0,bU];Q(c,aK(gf|b>>>12));Q(c,aK(dg|b>>>6&63));Q(c,aK(dg|b&63))}else{Q(c,aK(hN|b>>>6));Q(c,aK(dg|b&63))}else
Q(c,aK(b));var
e=e+1|0,d=d-1|0;continue}return aO(c)}},El=[0,pX,gn],Em=[0,Q,io],En=[0,qP,function(a){return a[17]}],rB=function(a,b){if(a!==km)if(b!==km)return a+b|0;return dj},rC=function(a,b){return a<=b?1:0},iQ=function(a){var
b=a;for(;;){if(typeof
b===g)return 0===b?0:dj;else
switch(b[0]){case
1:var
e=b[3],c=0;break;case
2:var
e=b[4],c=0;break;case
3:var
e=b[1],c=0;break;case
4:var
b=b[1];continue;case
5:var
d=b[1],c=1;break;case
6:var
d=b[1],c=1;break;case
7:var
d=b[1],c=1;break;case
8:var
d=b[1],c=1;break;default:return 1}return c?d:e}},P=0,a=function(a){if(10===a)throw[0,l,Eo];return[0,a]},Ep=a(32),l2=function(a,b,c){return 0===c?P:[1,a,b,c]},n=function(a){return l2(a,0,a.getLen())},eJ=function(a,b){var
c=a.getLen(),d=0;return 0===c?P:[2,a,d,c,b]},bi=function(a){var
c=0,b=0;for(;;){if(a.getLen()<=b)return eJ(a,c);var
d=a.safeGet(b),e=dg<=d?gf<=d?hU<=d?4:3:2:1,c=c+1|0,b=b+e|0;continue}},a_=1,iR=function(a,b){if(typeof
a===g)var
c=0;else
if(4===a[0])var
d=a[1],c=1;else
var
c=0;if(!c)var
d=a;return[4,d,b]},l3=function(a){var
b=0===a?P:1===a?Ep:[3,a];return iR(b,a_)},Eq=l3(0),Er=l3(1),T=function(a){return 0===a?Eq:1===a?Er:l3(a)},i=function(a,b){if(typeof
a===g)if(0===a)return b;if(typeof
b===g)if(0===b)return a;var
c=iQ(b);return[5,rB(iQ(a),c),a,b]},aY=function(a,b){if(0<=a)return[6,iQ(b),a,b];throw[0,l,Es]},dt=function(a){return[7,iQ(a),a]},l4=function(m){var
d=aU(80,32),e=80;function
p(a,b){var
c=b;for(;;){if(0<c){if(c<=80)return A(m[2],a,d,0,c);A(m[2],a,d,0,e);var
c=c-80|0;continue}return 0}}function
a(a,b){var
c=1-b;if(c)var
d=c;else
var
e=a[5]<=a[1]?1:0,d=e?a[5]<=(a[4]+a[2]|0)?1:0:e;return d}function
h(a,b,c,d,e,f){var
n=c,o=d,h=e,i=f;for(;;)if(typeof
h===g){if(0===h)return a<50?k(1+a,b,i):v(k,[0,b,i]);if(o)throw[0,l,Et];j(m[1],b[3],10);p(b[3],n);b[5]=n;b[4]=n;return a<50?k(1+a,b,i):v(k,[0,b,i])}else
switch(h[0]){case
1:var
q=h[3];A(m[2],b[3],h[1],h[2],q);b[5]=b[5]+q|0;return a<50?k(1+a,b,i):v(k,[0,b,i]);case
2:var
w=h[4];A(m[2],b[3],h[1],h[2],h[3]);b[5]=b[5]+w|0;return a<50?k(1+a,b,i):v(k,[0,b,i]);case
3:var
r=h[1];p(b[3],r);b[5]=b[5]+r|0;return a<50?k(1+a,b,i):v(k,[0,b,i]);case
4:var
x=h[2],y=h[1],z=o?y:x,h=z;continue;case
5:var
B=[0,n,o,h[3],i],h=h[2],i=B;continue;case
6:var
n=n+h[2]|0,h=h[3];continue;case
7:var
C=h[2],D=h[1];if(o)var
s=o;else
var
t=rB(b[5],D),u=rC(t,b[1]),E=u?rC(t,b[4]+b[2]|0):u,s=E;var
o=s,h=C;continue;case
8:var
n=(n+b[5]|0)-b[4]|0,h=h[2];continue;default:j(m[1],b[3],h[1]);b[5]=b[5]+1|0;return a<50?k(1+a,b,i):v(k,[0,b,i])}}function
k(a,b,c){return c?a<50?h(1+a,b,c[1],c[2],c[3],c[4]):v(h,[0,b,c[1],c[2],c[3],c[4]]):0}function
f(b,c,d,e,f){return y(h(0,b,c,d,e,f))}function
b(b,c){return y(k(0,b,c))}function
c(a,b,c,d){return f([0,b,cw(0,eu(b,b*a|0)),c,0,0],0,0,d,0)}return[0,e,d,p,a,f,b,c,function(c,b){function
e(a){var
b=a;for(;;){if(typeof
b===g)return 0===b?0:j(m[1],c,10);else
switch(b[0]){case
1:return A(m[2],c,b[1],b[2],b[3]);case
2:return A(m[2],c,b[1],b[2],b[3]);case
3:return p(c,b[1]);case
4:var
d=b[1];break;case
5:var
f=b[3];e(b[2]);var
b=f;continue;case
6:var
d=b[3];break;case
7:var
d=b[2];break;case
8:var
d=b[2];break;default:return j(m[1],c,b[1])}var
b=d;continue}}return e(b)}]};l4(El);var
Eu=l4(Em);l4(En);var
rD=Eu[7],dZ=a(40),d0=a(41);a(60);a(62);var
iS=a(en),iT=a(gc),rE=a(91),rF=a(93);a(39);a(34);a(96);var
iU=a(59),a5=a(58),du=a(44),t=a(32),rG=a(46);a(35);a(47);a(92);var
bV=a(61);a(63);a(em);var
iV=a(64);a(37);a(36);a(94);a(38);var
rH=a(42),Ev=a(43),rI=a(45),Ew=a(95);a(33);var
fB=a(fe),iW=function(a){return i(a,a)},rJ=function(a,b){return i(a,b)},l5=function(a,b,c){return i(a,i(c,b))},rK=function(a){return l5(iS,iT,a)},rL=function(a){return l5(dZ,d0,a)},l6=function(a){return l5(rE,rF,a)},iX=function(e,b,c){var
d=[0,0];return w(function(a,b){var
c=d[1];d[1]=c+1|0;return k(e,c,a,b)},b,c)},ci=function(d,b){return iX(function(a,b,c){return 0===a?c:i(b,i(d,c))},P,b)},iY=function(c,b){return w(function(a,b){return i(a,h(c,b))},P,b)},a$=function(e,d,c){return iX(function(a,b,c){return 0===a?h(d,c):i(b,i(e,h(d,c)))},P,c)},fC=function(a,b){return i(a,i(T(1),b))},bw=function(a,b,c,d){return dt(i(c,aY(a,i(T(b),d))))},Ex=1,Ey=2,gG=function(a,b){return bw(Ey,Ex,a,b)},l7=function(a,b,c,d,e){var
f=i(T(b),e);return dt(i(c,i(aY(a,i(T(b),d)),f)))},eK=function(a){return h(k6(n),a)};i(du,T(1));i(dZ,d0);var
fD=eK(Ez);eK(EA);eK(EB);eK(EC);eK(ED);eK(EE);eK(EF);var
rM=function(a){return a[1]},rN=function(d){return function(g){function
i(a){return rM(a)[2]}return[0,function(e){var
b=[0,0,0],n=h(d[1],0),c=h(d[1],0);function
r(c){var
a=rM(c),r=[0,1],e=[0,0];function
w(a){if(r[1]){try{var
f=j(d[4],a,n)}catch(f){f=m(f);if(f[1]===o){var
b=s(a),c=i(b);if(1-h(g[3],c))e[1]=[0,b,e[1]];return c}throw f}return f}throw[0,l,EJ]}var
f=h(a[1],w);r[1]=0;var
x=0===e[1]?1:0,y=x||h(g[3],f);if(1-y){var
z=e[1];if(0!==c[2])throw[0,l,EH];var
q=function(a){var
d=a;for(;;){if(d){var
f=d[2],b=d[1];if(b[4]){var
d=f;continue}b[4]=1;var
e=[0,c,b,0];c[2]=[0,e,c[2]];b[3]=[0,e,b[3]];q(f);b[4]=0;return 0}return 0}};q(z)}var
t=1-j(g[2],a[2],f);if(t){a[2]=f;var
u=c[3],k=h(aN(function(a){return 1-a[3]}),u);c[3]=k;var
v=p(function(a){if(a[1]===c)return a[2];if(a[2]===c)return a[1];throw[0,l,EG]},k);return M(function(a){var
f=a[2];M(function(a){if(a[3])throw[0,l,EI];a[3]=1;return 0},f);a[2]=0;if(0===b[1]){var
c=[];oA(c,[0,a,c]);b[1]=1;b[2]=c;return 0}var
d=b[2],e=[0,a,d[2]];b[1]=b[1]+1|0;d[2]=e;b[2]=e;return 0},v)}return t}function
s(a){try{var
f=j(d[4],a,c)}catch(f){f=m(f);if(f[1]===o){var
i=g[1],b=[0,[0,h(e,a),i],0,0,0];k(d[3],a,b,c);r(b);return b}throw f}return f}var
q=[0,1];return function(a){try{var
f=j(d[4],a,n)}catch(f){f=m(f);if(f[1]===o){if(q[1]){q[1]=0;var
t=s(a);for(;;){if(0===b[1]){var
p=function(a,b){var
c=i(b);return k(d[3],a,c,n)};j(d[5],p,c);h(d[2],c);q[1]=1;return i(t)}if(0===b[1])throw[0,Ax];b[1]=b[1]-1|0;var
e=b[2],g=e[2];if(g===e)b[2]=0;else
e[2]=g[2];r(g[1]);continue}}throw[0,l,EK]}throw f}return f}}]}},rO=[0,EL];rd(EO,[0,rO,0,EN,EM]);k$(function(a){if(a[1]===rO){var
c=a[2],d=a[4],e=a[3];if(typeof
c===g)switch(c){case
1:var
b=ER;break;case
2:var
b=ES;break;case
3:var
b=ET;break;case
4:var
b=EU;break;case
5:var
b=EV;break;case
6:var
b=EW;break;case
7:var
b=EX;break;case
8:var
b=EY;break;case
9:var
b=EZ;break;case
10:var
b=E0;break;case
11:var
b=E1;break;case
12:var
b=E2;break;case
13:var
b=E3;break;case
14:var
b=E4;break;case
15:var
b=E5;break;case
16:var
b=E6;break;case
17:var
b=E7;break;case
18:var
b=E8;break;case
19:var
b=E9;break;case
20:var
b=E_;break;case
21:var
b=E$;break;case
22:var
b=Fa;break;case
23:var
b=Fb;break;case
24:var
b=Fc;break;case
25:var
b=Fd;break;case
26:var
b=Fe;break;case
27:var
b=Ff;break;case
28:var
b=Fg;break;case
29:var
b=Fh;break;case
30:var
b=Fi;break;case
31:var
b=Fj;break;case
32:var
b=Fk;break;case
33:var
b=Fl;break;case
34:var
b=Fm;break;case
35:var
b=Fn;break;case
36:var
b=Fo;break;case
37:var
b=Fp;break;case
38:var
b=Fq;break;case
39:var
b=Fr;break;case
40:var
b=Fs;break;case
41:var
b=Ft;break;case
42:var
b=Fu;break;case
43:var
b=Fv;break;case
44:var
b=Fw;break;case
45:var
b=Fx;break;case
46:var
b=Fy;break;case
47:var
b=Fz;break;case
48:var
b=FA;break;case
49:var
b=FB;break;case
50:var
b=FC;break;case
51:var
b=FD;break;case
52:var
b=FE;break;case
53:var
b=FF;break;case
54:var
b=FG;break;case
55:var
b=FH;break;case
56:var
b=FI;break;case
57:var
b=FJ;break;case
58:var
b=FK;break;case
59:var
b=FL;break;case
60:var
b=FM;break;case
61:var
b=FN;break;case
62:var
b=FO;break;case
63:var
b=FP;break;case
64:var
b=FQ;break;case
65:var
b=FR;break;case
66:var
b=FS;break;case
67:var
b=FT;break;default:var
b=EP}else
var
f=c[1],b=h(E(FU),f);return[0,k(E(EQ),b,e,d)]}return 0});var
FV=function(a){try{aiE(a);var
b=1}catch(f){f=m(f);if(f[1]===di)return 0;throw f}return b};kc(FW);kc(FX);try{kc(agE)}catch(f){f=m(f);if(f[1]!==cf)throw f}try{kc(agD)}catch(f){f=m(f);if(f[1]!==cf)throw f}var
FY=aq(0,7),rP=function(a){var
g=zy(0),b=g[2],d=g[1],h=[0,[0,d,[0,b,0]]];try{var
i=zy(0),e=i[2],c=i[1];h[1]=[0,d,[0,b,[0,c,[0,e,0]]]];var
j=os(d),k=j8(e),l=[0,d,[0,e,0]],n=gr(FV,l),f=zx(0),p=[0,j,k];if(0===f){if(c!==0){zw(c,0);gl(c)}if(b!==1){zw(b,1);gl(b)}if(1-n)M(function(a){return gl(a)},l);try{aiA(F1,[0,F0,FZ,a])}catch(f){dN(hZ)}}else
c1(FY,p,f);gl(c);gl(b);var
q=[0,j,k]}catch(f){f=m(f);var
o=h[1];M(function(a){return gl(a)},o);throw f}return q},rQ=function(a,b){return aiB(a,b)},l8=function(a,b){return Y(a,b,a.getLen()-b|0)},dv=aU(32,X),l9=function(a){return aU(32,0)},gH=function(a,b){return a.safeSet(b>>>3,aK(a.safeGet(b>>>3)|1<<(b&7)))},iZ=function(a){var
b=l9(0);gH(b,a);return b},i0=function(a){var
c=ae(32),b=0;for(;;){c.safeSet(b,aK(a.safeGet(b)^X));var
d=b+1|0;if(31!==b){var
b=d;continue}return c}},l_=function(a,b){var
d=ae(32),c=0;for(;;){d.safeSet(c,aK(a.safeGet(c)|b.safeGet(c)));var
e=c+1|0;if(31!==c){var
c=e;continue}return d}},rR=function(a,b){try{var
c=0;for(;;){if(0!==(a.safeGet(c)&b.safeGet(c)))throw[0,fh];var
e=c+1|0;if(31!==c){var
c=e;continue}var
d=1;break}}catch(f){f=m(f);if(f[1]===fh)return 0;throw f}return d},rS=function(a,b){var
c=0;for(;;){var
e=b.safeGet(c);if(0!==e){var
d=0;for(;;){if(0!==(e&1<<d))h(a,aK((c<<3)+d|0));var
g=d+1|0;if(7!==d){var
d=g;continue}break}}var
f=c+1|0;if(31!==c){var
c=f;continue}return 0}},gI=function(a){var
b=l9(0);rS(function(a){gH(b,ey(a));return gH(b,ii(a))},a);return b},l$=0,rT=1,F2=2,F3=3,F4=4,F5=5,F6=6,F7=7,F8=8,F9=9,F_=10,F$=11,Ga=12,Gb=13,Gc=14,ma=15,i1=16,rU=17,rV=18,rW=function(a,b){return a|b<<8},mb=function(a,b){return(a-b|0)-1|0},mc=function(a){var
b=a;for(;;)if(typeof
b===g)switch(b){case
1:return 1;case
2:return 1;default:return 1}else
switch(b[0]){case
1:return W(b[1],Gd);case
2:return 0;case
3:return gr(mc,b[1]);case
4:var
d=b[2],c=mc(b[1]);if(c)return c;var
b=d;continue;case
5:return 1;case
6:var
b=b[1];continue;case
7:return 1;case
8:var
b=b[2];continue;case
9:return 1;default:return 0}},oC=function(a,b){var
c=b;for(;;)if(typeof
c===g)switch(c){case
1:return dv;case
2:return dv;default:return dv}else
switch(c[0]){case
1:var
d=c[1];return W(d,Ge)?dv:iZ(d.safeGet(0));case
2:var
e=c[1];return c[2]?i0(e):e;case
3:return a<50?oB(1+a,c[1]):v(oB,[0,c[1]]);case
4:var
f=c[1],h=d1(c[2]);return l_(d1(f),h);case
5:return dv;case
6:var
c=c[1];continue;case
7:return dv;case
8:var
c=c[2];continue;case
9:return dv;default:return iZ(c[1])}},oB=function(a,b){var
c=b;for(;;){if(c){var
d=c[1];if(typeof
d===g){var
c=c[2];continue}else
switch(d[0]){case
5:var
e=d[1],f=gJ(c[2]);return l_(d1(e),f);case
7:var
h=d[1],i=gJ(c[2]);return l_(d1(h),i);default:return a<50?oC(1+a,d):v(oC,[0,d])}}return dv}},d1=function(b){return y(oC(0,b))},gJ=function(b){return y(oB(0,b))},md=function(a,b){if(typeof
b===g)var
c=0;else
switch(b[0]){case
0:var
d=[0,iZ(b[1]),0],c=1;break;case
2:var
d=[0,b[1],b[2]],c=1;break;default:var
c=0}if(c){var
e=d[1],h=d[2],f=a?gI(e):e;return h?i0(f):f}throw[0,l,Gf]},rX=ae(cc),hz=0;for(;;){rX.safeSet(hz,ey(aK(hz)));var
agC=hz+1|0;if(X!==hz){var
hz=agC;continue}var
i2=dm([0,function(a,b){return hC(a,b)}]),rY=function(e,b){var
h=[0,$(32,0)],d=[0,0],p=[0,i2[1]],q=[0,0],u=[0,1],r=[0,0];function
c(a,b){if(h[1].length-1<=d[1]){var
c=[0,h[1].length-1];for(;;){if(c[1]<=d[1]){c[1]=c[1]*2|0;continue}var
e=$(c[1],0);fk(h[1],0,e,0,h[1].length-1);h[1]=e;break}}var
f=rW(a,b);B(h[1],d[1],f);d[1]++;return 0}function
l(a){var
b=d[1];d[1]++;return b}function
n(a,b,c){var
d=rW(b,mb(c,a));return B(h[1],a,d)}function
i(a){try{var
c=j(i2[22],a,p[1])}catch(f){f=m(f);if(f[1]===o){var
b=q[1];p[1]=k(i2[4],a,b,p[1]);q[1]++;return b}throw f}return c}function
w(a){if(mc(a)){var
b=r[1];if(64<=b)aT(Gg);r[1]++;return b}return-1}function
f(a){if(typeof
a===g)switch(a){case
1:return c(F6,0);case
2:return c(F7,0);default:return c(F5,0)}else
switch(a[0]){case
1:var
h=a[1],y=h.getLen();if(0===y)return 0;if(1===y)return e?c(rT,ey(h.safeGet(0))):c(l$,h.safeGet(0));try{var
z=gs(h,0);f([1,Y(h,0,z)]);c(l$,0);var
L=f([1,l8(h,z+1|0)])}catch(f){f=m(f);if(f[1]===o)return e?c(F3,i(kV(h))):c(F2,i(h));throw f}return L;case
2:var
A=a[1],M=a[2],B=e?gI(A):A,N=M?i0(B):B;return c(F4,i(N));case
3:var
b=a[1];for(;;){if(b){var
j=b[1];if(typeof
j!==g)switch(j[0]){case
5:var
r=j[1];if(typeof
r===g)var
I=0;else
switch(r[0]){case
0:case
2:var
F=b[2],$=gJ(F);if(v(d1(r),$)){c(Gb,i(md(e,r)));var
b=F;continue}var
I=1;break;default:var
I=0}break;case
6:var
s=j[1];if(typeof
s===g)var
J=0;else
switch(s[0]){case
0:case
2:var
G=b[2],aa=gJ(G);if(v(d1(s),aa)){c(Gc,i(md(e,s)));var
b=G;continue}var
J=1;break;default:var
J=0}break;case
7:var
t=j[1];if(typeof
t===g)var
K=0;else
switch(t[0]){case
0:case
2:var
H=b[2],ab=gJ(H);if(v(d1(t),ab)){c(Ga,i(md(e,t)));var
b=H;continue}var
K=1;break;default:var
K=0}break}var
_=b[2];f(j);var
b=_;continue}return 0}case
4:var
O=a[2],P=a[1],Q=l(0);f(P);var
R=l(0),S=d[1];f(O);var
T=d[1];n(Q,i1,S);return n(R,ma,T);case
5:var
C=a[1],k=w(C),D=l(0);if(0<=k)c(rU,k);f(C);if(0<=k)c(rV,k);c(ma,mb(D,d[1]));return n(D,i1,d[1]);case
6:var
E=a[1],p=w(E),U=d[1];f(E);if(0<=p)c(rV,p);var
V=l(0);if(0<=p)c(rU,p);c(ma,mb(U,d[1]));return n(V,i1,d[1]);case
7:var
W=a[1],X=l(0);f(W);return n(X,i1,d[1]);case
8:var
q=a[1],Z=a[2];if(32<=q)aT(Gh);c(F8,q);f(Z);c(F9,q);u[1]=cw(u[1],q+1|0);return 0;case
9:return c(F_,a[1]);default:var
x=a[1];return e?c(rT,ey(x)):c(l$,x)}}function
v(a,b){if(e){var
c=gI(b);return rR(gI(a),c)}return rR(a,b)}f(b);c(F$,0);var
a=d1(b),y=e?gI(a):a;if(W(a,dv))var
t=-1;else{var
s=aU(cc,0);rS(function(a){return s.safeSet(a,1)},y);var
t=i(s)}var
x=$(q[1],Gi),z=p[1];function
A(a,b){return B(x,b,a)}j(i2[10],A,z);var
C=r[1],D=u[1],E=e?rX:Gj;return[0,pY(h[1],0,d[1]),x,E,D,C,t]},rZ=function(a){var
b=aO(a[1]);gt(a[1]);var
c=b.getLen();return 0===c?0:1===c?(a[2]=[0,[0,b.safeGet(0)],a[2]],0):(a[2]=[0,[1,b],a[2]],0)},Gk=i0(iZ(10)),me=function(b){var
d=b.getLen(),z=[0,1];function
A(a){var
g=f(a),e=g[1],c=g[2];for(;;){if((c+2|0)<=d)if(92===b.safeGet(c))if(fe===b.safeGet(c+1|0)){var
h=f(c+2|0),e=[4,e,h[1]],c=h[2];continue}return[0,e,c]}}function
f(a){var
n=[0,aw(16),0],c=a;a:for(;;){if(!(d<=c)){if((c+2|0)<=d)if(92===b.safeGet(c))var
C=b.safeGet(c+1|0),H=fe===C?1:0,I=H||(41===C?1:0),x=I?0:1;else
var
x=1;else
var
x=1;if(x){var
o=b.safeGet(c);if(36===o)var
i=[0,1,c+1|0];else{if(91<=o)if(95<=o)var
m=0;else
switch(o+yk|0){case
1:var
j=c+1|0;if(d<=j)var
k=[0,Gl,j];else{var
p=b.safeGet(j);if(58<=p)if(98===p)var
k=[0,2,j+1|0],h=2;else
var
h=fe===p?1:0;else{var
v=p+xw|0;if(v<0||1<v)if(9<=v)var
k=[0,[9,p+ax|0],j+1|0],h=2;else
var
h=0;else
if(0===v){var
w=z[1];if(w<32)z[1]++;var
D=A(j+1|0),q=D[2],E=D[1];if((q+1|0)<d)if(92===b.safeGet(q))if(41===b.safeGet(q+1|0))if(32<=w)var
k=[0,E,q+2|0],h=2,r=0;else
var
k=[0,[8,w,E],q+2|0],h=2,r=0;else
var
r=1;else
var
r=1;else
var
r=1;if(r)var
k=aT(Gn),h=2}else
var
h=1}switch(h){case
1:throw[0,l,Gm];case
2:break;default:var
k=[0,[0,p],j+1|0]}}var
i=k,m=1;break;case
2:var
m=0;break;case
3:var
i=[0,0,c+1|0],m=1;break;default:var
t=c+1|0;if(t<d)if(94===b.safeGet(t))var
F=B(t+1|0),u=[0,F[1],1,F[2]],y=1;else
var
y=0;else
var
y=0;if(!y)var
G=B(t),u=[0,G[1],0,G[2]];var
i=[0,[2,u[1],u[2]],u[3]],m=1}else
if(46===o)var
i=[0,[2,Gk,0],c+1|0],m=1;else
var
m=0;if(!m)var
i=[0,[0,o],c+1|0]}var
e=i[1],f=i[2];for(;;){if(!(d<=f)){var
s=b.safeGet(f)+yC|0;if(!(s<0||1<s)){if(0===s){var
e=[5,e],f=f+1|0;continue}var
e=[6,e],f=f+1|0;continue}if(21===s){var
e=[7,e],f=f+1|0;continue}}var
J=typeof
e===g?0:0===e[0]?(Q(n[1],e[1]),1):0;if(!J){rZ(n);n[2]=[0,e,n[2]]}var
c=f;continue a}}}rZ(n);return[0,[3,L(n[2])],c]}}function
B(a){var
f=l9(0),c=a;for(;;){if(d<=c)aT(Go);if(93===b.safeGet(c))if(a<c)return[0,f,c+1|0];var
g=b.safeGet(c);if((c+2|0)<d)if(45===b.safeGet(c+1|0))if(93!==b.safeGet(c+2|0)){var
h=b.safeGet(c+2|0);if(!(h<g)){var
e=g;for(;;){gH(f,aK(e));var
i=e+1|0;if(h!==e){var
e=i;continue}break}}var
c=c+3|0;continue}gH(f,g);var
c=c+1|0;continue}}var
a=A(0),c=a[1],e=a[2]===d?c:aT(Gp);return rY(0,e)},i3=[0,[0]],i4=function(a,b,c){var
e=0,d=0,j=0;for(;;){var
k=j?d+1|0:d;if(c.getLen()<k)var
n=[0,l8(c,d),e];else{try{var
f=aiz(a,c,k);i3[1]=f;if(0===f.length-1)throw[0,o];var
q=[0,I(f,0)],h=q}catch(f){f=m(f);if(f[1]!==o)throw f;var
h=0}if(h){var
l=h[1];if(i3[1].length-1<=0)var
g=S(Gq);else{var
i=I(i3[1],1);if(-1===i)throw[0,o];var
g=i}var
p=aiy(b,i3[1],c),e=[0,p,[0,Y(c,d,l-d|0),e]],d=g,j=g===l?1:0;continue}var
n=[0,l8(c,d),e]}return dR(Gr,L(n))}},r0=function(a){return iq(function(a,b){return 0},a)},i5=[0,Gs],Gu=[0,Gt],eL=function(f){var
a=p9([0,f[1]]),c=a[1],d=a[4],g=a[13],e=a[14],i=[0,Gv],b=a[2],l=a[3],n=a[5],p=a[6],q=a[7],r=a[8],s=a[9],t=a[10],u=a[11],v=a[12],w=a[15],x=a[16],y=a[17],z=a[18],A=a[19],B=a[20],C=a[21],D=a[22],E=a[23],F=a[24],G=a[25];function
H(c,b){try{j(g,function(a){var
b=h(c,a);if(b)throw[0,i,a];return b},b);throw[0,o]}catch(f){f=m(f);if(f[1]===i)return f[2];throw f}}function
I(f,b){return k(e,function(a){return h(d,h(f,a))},b,c)}function
J(a){return aH(d,a,c)}return[0,c,b,l,d,n,p,q,r,s,t,u,v,g,e,w,x,y,z,A,B,C,D,E,F,G,H,I,J,function(c,b){h(bS(c),Gw);var
a=1;k(e,function(a,b){if(1-b)h(bS(c),Gx);j(f[2],c,a);return 0},b,a);return h(bS(c),Gy)}]},r1=function(a,b){var
d=a,c=b;for(;;){if(c){var
e=c[2],f=c[1];if(ex(f,d)){var
c=e;continue}var
d=[0,f,d],c=e;continue}return d}},r2=function(a,b){return L(r1(r1(0,a),b))},gK=function(a,b){return j(bS(a),Gz,b)},r3=function(a){var
g=a.getLen(),b=g;for(;;){if(0===b)var
c=0;else{var
e=a.safeGet(b-1|0);if(10===e)var
d=0;else
if(13===e)var
d=0;else
var
f=0,d=1;if(!d)var
f=1;if(f){var
b=b-1|0;continue}var
c=b}return c===g?a:Y(a,0,c)}};eL([0,fn,gK]);var
d2=aq(0,cd),i6=function(a){var
d=iI(a),g=gD(a);try{var
l=bR(d2,d),e=l}catch(f){f=m(f);if(f[1]!==o)throw f;try{var
k=[0,w1(d)],c=k}catch(f){f=m(f);var
c=[1,f]}c1(d2,d,c);var
e=c}if(0===e[0]){var
h=e[1];if(W(g,eG))return 1;try{var
f=h.length-1-1|0,i=0;if(!(f<0)){var
b=i;for(;;){if(W(h[b+1],g))throw[0,fh];var
j=b+1|0;if(f!==b){var
b=j;continue}break}}var
n=0}catch(f){f=m(f);if(f[1]===fh)return 1;throw f}return n}return 0},r4=O(cg,GB)?function(a){return W(a,GC)?0:zu(a)}:function(a){return W(a,agA)?0:zu(u(agB,lQ(a)))},d3=function(a,b){if(!W(a,eG))if(!W(a,GD)){var
c=W(cg,GE)?92===a.safeGet(a.getLen()-1|0)?1:0:0;if(!c)if(47!==a.safeGet(a.getLen()-1|0))return u(a,u(GG,b));return W(b,GF)?a:u(a,b)}return b},mf=function(a,b,c){var
e=a?a[1]:0,f=e?zK:kQ,d=f(b);try{var
g=h(c,d);fj(d)}catch(f){f=m(f);fj(d);throw f}return g},i7=function(a){var
b=cS(a);return bO===b?a[1]:ac===b?dS(a):a},GI=aq(0,cd),mg=function(d){var
b=aq(0,cd);return function(a){try{var
e=bR(b,a)}catch(f){f=m(f);if(f[1]===o){var
c=h(d,a);c1(b,a,c);return c}throw f}return e}};aq(0,32);var
GP=1,GQ=[ac,function(a){return GP}],mh=function(a){throw[0,l,GN]},i8=function(a){var
f=ae(kB),g=aw(hQ),o=kB,c=0;function
p(a){for(;;){var
b=gp(a,f,0,o);if(0<b){io(g,f,0,b);continue}return aO(g)}}for(;;){var
d=cS(iJ),i=bO===d?iJ[1]:ac===d?dS(iJ):iJ,l=qy(i)&be,b=ds(Dj,k(E(Do),GM,l,GL));try{zs(ot(b,Dp,384))}catch(f){f=m(f);if(f[1]===lR){if(yt<=c)throw f;var
c=c+1|0;continue}throw f}try{var
e=j(E(GJ),a,b);if(0!==r4(e))aT(h(E(GK),e));var
n=mf(0,b,p);oD(b)}catch(f){f=m(f);oD(b);throw f}return n}},eM=p9([0,fn]),i9=eM[1],mi=eM[3],r5=eM[4],r6=eM[7],GR=eM[6],GS=eM[12],GT=eM[13],r7=function(a,b){return j(r5,b,a)},r8=function(a,b){return h(c0(a),GU)},r9=function(a,b){return h(c0(a),GV)},r_=[0,G4,G3,G2,G1],GY=0.05,G7=function(a,b){var
c=b|0;return A(c0(a),G8,c/3600|0,(c/60|0)%60|0,c%60|0)},r$=function(a,b){return a?h(b,a[1]):0},sa=function(a){var
A=mh(0);if(a[8]<A-a[3]){if(a[7]){var
c=a[12],b=0,e=a[15],x=a[6];for(;;){if(e){var
m=e[1],n=m[2],o=m[1],y=e[2];if(j(mi,o,x))c.safeSet(b,ii(n));else
if(j(mi,o,a[13]))c.safeSet(b,ey(n));else
c.safeSet(b,45);var
b=b+1|0,e=y;continue}var
p=c.getLen()-1|0;if(!(p<b)){var
f=b;for(;;){c.safeSet(f,45);var
z=f+1|0;if(p!==f){var
f=z;continue}break}}a[7]=0;break}}var
h=mh(0),g=a[1],i=h-a[2];a[3]=h;k(c0(g),Ha,r9,0);var
q=I(r_,oy(pT(Math.ceil(i/0.25)|0),r_.length-1)),r=a[12],s=a[5]?G5:G6,d=a[14],t=a[4],u=function(a,b){if(3<=d){var
c=b.getLen();if(c<=d){fi(a,b);return k(c0(a),G_,d-c|0,G9)}var
e=d-3|0;fi(a,GZ);return gn(a,b,c-e|0,e)}throw[0,l,G$]},v=a[11],w=a[10];oE(c0(g),Hb,G7,i,w,v,u,t,s,r,q);return k(c0(g),Hc,r8,0)}return 0},mk=[0,1],sb=[0,0],sc=[0,0],He=function(c,b){var
d=[0,1];return j(GT,function(a){return d[1]?(d[1]=0,j(bS(c),Hf,a)):j(bS(c),Hg,a)},b)},Hl=[ac,function(a){var
d=mk[1],k=[0,d],g=sd?sd[1]:-369468030,h=k?d:1,j=0;if(yF<=g)var
c=0;else{if(W(cg,GW))try{var
e=de(r3(i8(GX))),b=e}catch(f){f=m(f);if(f[1]!==cf)throw f;var
b=80}else
var
b=80;var
i=b-((((21+x(mj)|0)+1|0)+3|0)+2|0)|0,f=aU(x(mj),45),c=[0,[0,cx,mh(0),0,G0,0,i9,0,GY,b,0,0,f,i9,i,mj]]}return[0,h,j,cx,lk(cx),c,0]}],se=function(a){var
b=a[1];return b?b[1]:i7(Hl)},sf=function(a,b){var
d=pW(Hn,pW(b,Hm)),c=se(sc),f=[0,a]?a:1;if(c[1]<f)return r0(d);if(c[5]){if(0<=f){var
g=c[2];return g?h(bS(g[1][1]),d):r0(d)}var
i=function(a){return 0};r$(c[2],i);var
e=c[5];if(e)ej(c0(e[1][1]),Hd,r9,0,r8,0);return h(bS(c[4]),d)}return h(bS(c[4]),d)},sg=function(a){var
d=a.getLen(),e=0!==d?1:0;if(e){var
c=0;for(;;){if(d<=c)var
f=1;else{var
b=a.safeGet(c),i=91<=b?97<=b?en<=b?0:1:95===b?1:0:59<=b?64<=b?1:0:43<=b?1:0;if(i){var
c=c+1|0;continue}var
f=0}var
g=f;break}}else
var
g=e;return g?a:W(cg,Ho)?h(E(Hp),a):lQ(a)},gL=function(c,b){if(typeof
b===g)return 0===b?1:0;else
switch(b[0]){case
1:var
d=b[1];return aB(function(a){return gL(c,a)},d);case
2:return 1-gL(c,b[1]);case
3:return h(c,b[1]);default:var
a=b[1];return gr(function(a){return gL(c,a)},a)}},fE=[0,Hq],c3=function(a,b){return typeof
a===g?b:typeof
b===g?a:[2,a,b]},si=function(a,b,c){var
d=b;a:for(;;){var
g=29;for(;;){var
e=cZ(i_,g,c);if(e<0||11<e){h(c[1],c);var
g=e;continue}switch(e){case
1:var
i=0;for(;;){var
j=si(Hs,0,c),k=[0,j[1],i];if(44===j[2]){var
i=k;continue}var
d=c3(d,[3,k]);continue a}case
2:var
d=c3(d,[1,[2,[1,sj(0,c)]]]);continue a;case
3:var
d=c3(d,[1,[1,sj(0,c)]]);continue a;case
4:var
d=c3(d,[3,[0,fF,[0,[2,fF,[2,[0,ml],fF]],0]]]);continue a;case
5:var
d=c3(d,[3,[0,0,[0,[2,fF,[0,ml]],0]]]);continue a;case
6:var
d=c3(d,[3,[0,0,[0,[2,[0,ml],fF],0]]]);continue a;case
7:throw[0,fE,Ht];case
8:var
d=c3(d,[0,sh]);continue a;case
9:var
d=c3(d,fF);continue a;case
10:var
d=c3(d,sh);continue a;case
11:var
f=eA(c,c[5]);if(ex(f,a))return[0,d,f];throw[0,fE,h(E(Hu),f)];default:var
d=c3(d,[4,aV(c,c[5],c[6])]);continue a}}}},sj=function(a,b){var
c=a;a:for(;;){var
e=48;for(;;){var
d=cZ(i_,e,b);if(d<0||3<d){h(b[1],b);var
e=d;continue}switch(d){case
1:return[0,Hw,c];case
2:var
g=eA(b,b[5]),c=[0,[3,[0,g,eA(b,b[5]+2|0)]],c];continue a;case
3:var
f=eA(b,b[5]),c=[0,[3,[0,f,f]],c];continue a;default:return c}}}},gM=function(a){if(typeof
a===g)switch(a){case
1:return Hy;case
2:return Hz;case
3:return HA;case
4:return HB;case
5:return HC;case
6:return HD;case
7:return HE;default:return Hx}return HF},mm=function(a,b){return gL(function(a){var
c=or(a[1],b),d=a[2],e=c?or(b,d):c;return e},a)},bx=eL([0,function(a,b){return ga(a,b)},BC]),mn=dm([0,bx[10]]),sk=function(a,e,c){var
n=a?a[1]:0,b=e[1],f=0,p=c.getLen();for(;;){if(h(bx[2],b))return 0;if(f===p)return j(bx[3],e[3],b);var
d=c.safeGet(f);if(n){j(k4(HG),f,d);var
x=function(a){return h(k4(HH),a)};j(bx[13],x,b);k4(HI)}try{var
u=bR(e[4],d),v=j(mn[22],b,u),l=v}catch(f){f=m(f);if(f[1]!==o)throw f;var
q=bx[1],r=function(d){return function(a,b){var
c=I(e[2],a);return w(function(a,b){var
c=b[2];return mm(b[1],d)?j(bx[7],a,c):a},b,c)}}(d),g=k(bx[14],r,b,q);try{var
t=bR(e[4],d),i=t}catch(f){f=m(f);if(f[1]!==o)throw f;var
i=mn[1]}var
s=k(mn[4],b,g,i);it(e[4],d,s);var
l=g}var
b=l,f=f+1|0;continue}},mo=[0,HJ],mp=function(d,b){var
c=fp(b),e=[0,0];function
f(a){var
j=e[1];if(j){var
l=j[1];e[1]=0;return l}a:for(;;){var
g=0;for(;;){var
b=cZ(i_,g,c);if(b<0||10<b){h(c[1],c);var
g=b;continue}switch(b){case
1:var
f=aw(32);b:for(;;){var
i=43;for(;;){var
d=cZ(i_,i,c);if(d<0||3<d){h(c[1],c);var
i=d;continue}switch(d){case
1:Q(f,34);continue b;case
2:aW(f,aV(c,c[5],c[6]));continue b;case
3:var
k=eA(c,c[5]);throw[0,fE,h(E(Hv),k)];default:return[0,[0,aO(f)]]}}}case
2:return 0;case
3:return 1;case
4:return 2;case
5:return 5;case
6:return 6;case
7:return 3;case
8:return 4;case
9:continue a;case
10:return 7;default:return[0,[1,si(Hr,0,c)[1]]]}}}}function
l(a){var
b=e[1];if(b){var
c=gM(b[1]),d=gM(a);throw[0,fE,j(E(HO),d,c)]}e[1]=[0,a];return 0}function
m(a){var
b=f(0);if(av(a,b))return 0;var
c=gM(b),d=gM(a);throw[0,fE,j(E(HP),d,c)]}function
n(a){var
b=a;for(;;){var
e=f(0);if(typeof
e===g)switch(e){case
2:var
b=function(b){return function(a){return h(b,[2,a])}}(b);continue;case
3:var
o=i(0);m(4);return h(b,o);case
5:return h(b,0);case
6:return h(b,1);default:var
n=gM(e);throw[0,fE,h(E(HQ),n)]}var
j=e[1];if(d){var
k=d[1];if(0===j[0])var
c=[0,d3(k,j[1])];else
var
l=j[1],c=[1,[2,[4,d3(k,HL)],l]]}else
var
c=j;var
p=0===c[0]?[0,c[1]]:[1,[0,[0,[0,0],c[1]]]];return h(b,[3,p])}}function
r(a,b){var
c=f(0);if(typeof
c===g){if(1===c)return[1,[0,b,[0,i(0),0]]];if(0===c)return a<50?k(1+a,b):v(k,[0,b])}l(c);return b}function
q(a,b){return n(o)}function
k(a,b){return n(function(a){var
c=f(0);if(typeof
c===g){if(1===c)return[1,[0,[0,[0,b,[0,a,0]]],[0,i(0),0]]];if(0===c)return p([0,[0,b,[0,a,0]]])}l(c);return[0,[0,b,[0,a,0]]]})}function
o(b){return y(r(0,b))}function
i(b){return y(q(0,b))}function
p(b){return y(k(0,b))}var
a=i(0);m(7);return d?[0,[0,[3,[1,[0,[0,[0,0],[2,[4,d[1]],[3,[0,0,[0,[2,HM,[0,HN]],0]]]]]]]],[0,a,0]]]:a},i$=[0,HR],d4=function(c,b){return h(k6(function(a){throw[0,i$,[0,a,c[11]]]}),b)},sl=function(a){var
c=0;for(;;){var
b=cZ(c4,c,a);if(b<0||2<b){h(a[1],a);var
c=b;continue}switch(b){case
1:return 0;case
2:return d4(a,HU);default:var
d=aV(a,a[5],a[6]-1|0),e=[0,d,sm(a)];return[0,e,sl(a)]}}},sm=function(a){a[10]=$(2,-1);B(a[10],1,a[6]);var
d=6;for(;;){var
c=ik(c4,d,a);if(c<0||2<c){h(a[1],a);var
d=c;continue}switch(c){case
1:var
b=a[12];a[12]=[0,b[1],b[2]+1|0,b[4],b[4]];return 0;case
2:return d4(a,HV);default:var
e=aV(a,I(a[10],0),a[6]);return[0,e,sm(a)]}}},mq=function(a){a[10]=$(3,-1);B(a[10],1,a[6]);var
c=57;for(;;){var
b=ik(c4,c,a);if(b<0||3<b){h(a[1],a);var
c=b;continue}switch(b){case
1:var
e=aV(a,I(a[10],0),a[6]);return[0,e,mq(a)];case
2:return 0;case
3:return d4(a,HX);default:var
d=aV(a,I(a[10],0),a[6]);return[0,d,mq(a)]}}},HS=function(a){var
c=65;for(;;){var
b=cZ(c4,c,a);if(b<0||2<b){h(a[1],a);var
c=b;continue}switch(b){case
1:var
e=aV(a,a[5]+1|0,a[6]);return[0,HY,[0,e,mr(a)]];case
2:return 0;default:var
d=aV(a,a[5],a[6]);return[0,d,mr(a)]}}},mr=function(a){var
c=69;for(;;){var
b=cZ(c4,c,a);if(b<0||2<b){h(a[1],a);var
c=b;continue}switch(b){case
1:return 0;case
2:return d4(a,HZ);default:var
d=aV(a,a[5]+1|0,a[6]);return[0,d,mr(a)]}}},HT=function(a){var
c=73;for(;;){var
b=cZ(c4,c,a);if(b<0||2<b){h(a[1],a);var
c=b;continue}switch(b){case
1:var
e=aV(a,a[5]+1|0,a[6]);return[0,H0,[0,e,ms(a)]];case
2:return 0;default:var
d=aV(a,a[5],a[6]);return[0,d,ms(a)]}}},ms=function(a){var
c=77;for(;;){var
b=cZ(c4,c,a);if(b<0||2<b){h(a[1],a);var
c=b;continue}switch(b){case
1:return 0;case
2:return d4(a,H1);default:var
d=aV(a,a[5]+1|0,a[6]);return[0,d,ms(a)]}}},gN=function(a,b){b[10]=$(2,-1);var
g=fe;for(;;){var
c=ik(c4,g,b);if(c<0||5<c){h(b[1],b);var
g=c;continue}switch(c){case
1:var
n=aV(b,b[5]+2|0,b[6]-1|0);return[0,[0,ps,[0,n,0]],gN(a,b)];case
2:var
i=aV(b,b[5]+2|0,I(b[10],0)),k=aV(b,I(b[10],0)+1|0,b[6]-1|0);if(a){var
d=mt(fp(k));if(d){var
e=ae(x(d)),f=[0,0];M(function(a){e.safeSet(f[1],a);f[1]++;return 0},d);var
l=e}else
var
l=GA;var
o=gN(a,b);return[0,[0,ps,[0,i,mp(0,l)]],o]}return j(d4(b,H2),i,k);case
3:return[0,H3,gN(a,b)];case
4:return 0;case
5:return d4(b,H4);default:var
m=aV(b,b[5],b[6]);return[0,[0,yO,m],gN(a,b)]}}},mt=function(a){var
c=133;for(;;){var
b=cZ(c4,c,a);if(b<0||2<b){h(a[1],a);var
c=b;continue}switch(b){case
1:var
e=eA(a,a[5]);return[0,e,mt(a)];case
2:return 0;default:var
d=eA(a,a[5]+1|0);return[0,d,mt(a)]}}};aq(0,17);E(H5);var
sn=[0,1],so=[0,function(a){return aT(H6)}],H$=[ac,function(a){var
c=e7(H7),d=W(cg,H8)?HS:HT;try{var
f=d(fp(c))}catch(f){f=m(f);if(f[1]===i$){var
b=f[2],e=b[2];throw[0,i$,[0,u(H9,b[1]),e]]}throw f}return p(function(a){return W(a,H_)?eG:a},f)}],sp=aq(0,32),ja=function(a){var
b=i6(a);if(b)var
c=b;else{var
d=W(cg,Ic);if(d)return i6(u(a,Id));var
c=d}return c},Ie=function(b){function
a(a){return W(a,eG)?ja(b):ja(d3(a,b))}return Dk(b)?d3(cY(a,i7(H$)),b):b},sq=function(p,b,c,d){var
e=aw(cc);if(W(cg,If))aW(e,Ig);var
i=[0,1];function
f(a){return i[1]?(i[1]=0,0):Q(e,32)}function
k(a){return aW(e,sg(a))}function
q(a){var
d=a;for(;;)if(typeof
d===g)return 0;else
switch(d[0]){case
1:var
x=d[1];f(0);return k(x);case
2:var
y=d[1];f(0);return k(y);case
3:var
r=d[1];f(0);k(r);return h(b,r);case
4:var
z=d[1];f(0);return aW(e,z);case
5:var
s=d[1];h(p,s);var
d=h(so[1],s);continue;case
6:var
l=d[1];if(c){try{var
w=bR(sp,l),n=w}catch(f){f=m(f);if(f[1]!==o)throw f;var
i=aw(42),u=ll(i),n=aT(h(h(qW(function(i){return function(a){iv(a,0);return aO(i)}}(i),u),Ia),l))}try{var
v=h(n,0),t=v}catch(f){f=m(f);if(f[1]!==o)throw f;var
t=aT(h(E(Ib),l))}var
d=t;continue}f(0);var
A=sg(l);return j(am(e),Ih,A);case
7:var
B=d[1];f(0);return k(sq(p,b,c,B));default:return M(q,d[1])}}q(d);return aO(e)},sr=[0,dj],ss=[0,0],st=[0,0],su=[0,0],Is=u(mu,Ir),sv=u(mu,It);u(sv,Iu);u(mu,Iv);u(Ix,u(Iz,u(Iw,Iy)));var
mv=[0,Is],Ik=[0,0],Il=[0,0];try{var
agz=e7(agy),sw=agz}catch(f){f=m(f);if(f[1]!==o)throw f;var
sw=sv}var
sx=[0,ds(sw,IA)],IC=u(IB,p8),mw=[0,ds(hD(0),ID)],sy=[0,1],mx=[0,0],IE=[0,0],IF=[0,1],IH=[0,IG],II=[0,1],IJ=[0,1],IK=[0,1],IL=[0,0],IM=[0,1],IN=[0,0],IO=[0,1],IP=[0,0],sz=function(b){if(O(b,IQ))if(O(b,IR))var
e=1,a=1;else
var
a=0;else
var
a=0;if(!a)var
e=0;var
c=u(b,IS),f=mg(Ie);if(i6(mv[1])){var
d=d3(mv[1],b),g=u(d,IT),l=0,n=[0,function(a){return ja(d)?[0,d]:0},l],i=[0,function(a){return ja(g)?[0,g]:0},n],p=0,j=[0,function(a){try{h(f,c);var
d=[0,c]}catch(f){f=m(f);if(f[1]===o)return[0,b];throw f}return d},p],q=e?D(i,j):D(j,i);try{var
r=0,k=h(cY(function(a){return 1-(0===h(a,0)?1:0)},q),r);if(!k)throw[0,o];var
s=k[1]}catch(f){f=m(f);if(f[1]===o)return aT(h(E(IU),b));throw f}return s}try{h(f,c)}catch(f){f=m(f);if(f[1]===o)return b;throw f}return c};M(function(b){function
a(a){return[1,sz(b)]}return it(sp,p4(ii,b),a)},IV);var
my=[0,IW],sA=[0,IX],sB=[0,IY],mz=[0,0],sC=[0,I1],sD=[0,I4],sE=[0,0],sF=[0,0],sG=[0,0],mA=[0,0],sH=[0,0],sI=[0,0],sJ=[0,0],sK=[0,0],sL=[0,0],sM=[0,0],sN=[0,Ja],sO=[0,0],sP=[0,Jd],sQ=[0,[0,[0,eG,0],0]],sR=[0,Je],I0=[0,IZ],I3=[0,I2],I5=[0,0],I6=[0,0],I7=[0,0],I8=[0,0],I9=[0,0],I_=[0,0],I$=[0,0],Jb=[0,0],Jc=[0,0],Jg=function(a){my[1]=Jh;sA[1]=Ji;sB[1]=Jj;mz[1]=Jk;sC[1]=Jl;I3[1]=Jm;sD[1]=Jn;sE[1]=Jo;return 0},by=function(a,b){var
c=fp(b);c[10]=$(5,-1);B(c[10],3,c[6]);B(c[10],2,c[6]);var
f=49;for(;;){var
d=ik(c4,f,c);if(d<0||3<d){h(c[1],c);var
f=d;continue}switch(d){case
1:var
g=aV(c,I(c[10],0),c[6]),e=[0,g,mq(c)];break;case
2:var
e=0;break;case
3:var
e=d4(c,HW);break;default:var
e=[0,aV(c,I(c[10],0),I(c[10],1)),0]}a[1]=[0,e,a[1]];return 0}},a6=function(a,b){return O(b,Jf)?(a[1]=[0,[0,b,0],a[1]],0):0},dw=function(b){return[4,function(a){b[1]=[4,a];return 0}]},Jp=function(a){sy[1]=0;return rp(a)?(mw[1]=ds(hD(0),a),0):(mw[1]=a,0)},Jq=0,Jt=[0,[0,Js,[12,function(a){I5[1]=1;return a6(I_,a)}],Jr],Jq],Jw=[0,[0,Jv,dw(sE),Ju],Jt],Jz=[0,[0,Jy,dw(sD),Jx],Jw],JC=[0,[0,JB,dw(sC),JA],Jz],JF=[0,[0,JE,dw(mz),JD],JC],JI=[0,[0,JH,dw(mz),JG],JF],JL=[0,[0,JK,dw(I0),JJ],JI],JO=[0,[0,JN,dw(sB),JM],JL],JR=[0,[0,JQ,dw(sA),JP],JO],JU=[0,[0,JT,dw(my),JS],JR],JX=[0,[0,JW,[4,function(a){gq(sz(a));throw[0,i5]}],JV],JU],Kk=[0,[0,Kj,[5,IH],Ki],[0,[0,Kh,[3,IF],Kg],[0,[0,Kf,[2,IE],Ke],[0,[0,Kd,[2,sb],Kc],[0,[0,Kb,[2,IN],Ka],[0,[0,J$,[0,Jg],J_],[0,[0,J9,[2,IP],J8],[0,[0,J7,[7,sn],J6],[0,[0,J5,[4,Jp],J4],[0,[0,J3,[5,sx],J2],[0,[0,J1,[5,mv],J0],[0,[0,JZ,[0,function(a){gq(sx[1]);throw[0,i5]}],JY],JX]]]]]]]]]]]],KD=[0,[0,KC,[3,sy],KB],[0,[0,KA,[3,IJ],Kz],[0,[0,Ky,[3,II],Kx],[0,[0,Kw,[3,IK],Kv],[0,[0,Ku,[2,mx],Kt],[0,[0,Ks,[3,IO],Kr],[0,[0,Kq,[2,IL],Kp],[0,[0,Ko,[3,IM],Kn],[0,[0,Km,[4,function(a){return 0}],Kl],Kk]]]]]]]]],KG=[0,[0,KF,[4,function(a){return by(I$,a)}],KE],KD],KJ=[0,[0,KI,[4,function(a){return a6(Jc,a)}],KH],KG],KM=[0,[0,KL,[4,function(a){return a6(Jb,a)}],KK],KJ],KP=[0,[0,KO,[4,function(a){return by(sO,a)}],KN],KM],KS=[0,[0,KR,[4,function(a){return a6(sO,a)}],KQ],KP],KV=[0,[0,KU,[4,function(a){return by(sN,a)}],KT],KS],KY=[0,[0,KX,[4,function(a){return a6(sN,a)}],KW],KV],K1=[0,[0,K0,[4,function(a){return by(sK,a)}],KZ],KY],K4=[0,[0,K3,[4,function(a){return a6(sK,a)}],K2],K1],K7=[0,[0,K6,[4,function(a){return by(sM,a)}],K5],K4],K_=[0,[0,K9,[4,function(a){return a6(sM,a)}],K8],K7],Lb=[0,[0,La,[4,function(a){return by(sL,a)}],K$],K_],Le=[0,[0,Ld,[4,function(a){return a6(sL,a)}],Lc],Lb],Lh=[0,[0,Lg,[4,function(a){return by(sJ,a)}],Lf],Le],Lk=[0,[0,Lj,[4,function(a){return a6(sJ,a)}],Li],Lh],Ln=[0,[0,Lm,[4,function(a){return by(sI,a)}],Ll],Lk],Lq=[0,[0,Lp,[4,function(a){return a6(sI,a)}],Lo],Ln],Lt=[0,[0,Ls,[4,function(a){return by(sH,a)}],Lr],Lq],Lw=[0,[0,Lv,[4,function(a){return a6(sH,a)}],Lu],Lt],Lz=[0,[0,Ly,[4,function(a){I9[1]=[0,a];return 0}],Lx],Lw],LC=[0,[0,LB,[4,function(a){return a6(mA,a)}],LA],Lz],LF=[0,[0,LE,[4,function(a){return by(mA,a)}],LD],LC],LI=[0,[0,LH,[4,function(a){return a6(mA,a)}],LG],LF],LL=[0,[0,LK,[4,function(a){return by(sG,a)}],LJ],LI],LO=[0,[0,LN,[4,function(a){return a6(sG,a)}],LM],LL],LR=[0,[0,LQ,[4,function(a){return by(sF,a)}],LP],LO],LU=[0,[0,LT,[4,function(a){return a6(sF,a)}],LS],LR],LX=[0,[0,LW,[4,function(a){return by(sR,a)}],LV],LU],L0=[0,[0,LZ,[4,function(a){return a6(sR,a)}],LY],LX],L3=[0,[0,L2,[4,function(a){return by(sQ,a)}],L1],L0],L_=[0,[0,L9,[2,I6],L8],[0,[0,L7,[2,I8],L6],[0,[0,L5,[4,function(a){return a6(sQ,a)}],L4],L3]]],Mg=[0,[0,Mf,[2,I7],Me],[0,[0,Md,[5,sP],Mc],[0,[0,Mb,[0,function(a){sP[1]=Ma;return 0}],L$],L_]]],Mj=[0,[0,Mi,[6,function(a){sb[1]=1;mk[1]=a+2|0;return 0}],Mh],Mg],Mm=[0,[0,Ml,[0,function(a){mk[1]=0;return 0}],Mk],Mj],Mp=[0,[0,Mo,[0,function(a){gq(p8);throw[0,i5]}],Mn],Mm],mB=[0,[0,Mr,[0,function(a){gq(IC);throw[0,i5]}],Mq],Mp];try{qm(Bb,mB);var
Bc=0,qo=Bc}catch(f){f=m(f);if(f[1]!==o)throw f;var
qo=[0,[0,A8,[0,qn],A7],0]}try{qm(A$,mB);var
Ba=0,qp=Ba}catch(f){f=m(f);if(f[1]!==o)throw f;var
qp=[0,[0,A_,[0,qn],A9],0]}var
qq=D(mB,D(qo,qp)),qr=w(Bd,0,qq);p(function(a){var
d=a[2],e=a[1];if(O(a[3],Be)){if(11===d[0]){var
f=a[3];return[0,e,d,u(Bf,u(aU((qr-k7(f)|0)+3|0,32),f))]}var
b=a[3],c=k7(b),g=aU((qr-e.getLen()|0)-c|0,32),h=Y(b,0,c);return[0,e,d,u(h,u(g,Y(b,c,b.getLen()-c|0)))]}return a},qq);var
Ms=0,Mt=function(a,b){return hC(a,b)};hD(0);var
sS=function(a,b){return u(a,u(Mu,b))},sT=function(a){return a};mp(0,Mv);if(W(eG,Mw)){if(W(Dm,Mx)){aq(0,pw);var
sU=aq(0,pw),MA=0,MB=0;so[1]=function(c){var
a=0;return[0,w(function(a,b){var
d=b[2];return j(GS,b[1],c)?[0,d,a]:a},a,MB)]};eL([0,fn,gK]);aq(0,cd);eL([0,Mt,li]);aq(0,cd);mg(function(a){var
b=a[1],c=gN(b,fp(a[2]));return p(function(a){if(yO<=a[1])return[0,a[2]];var
b=a[2];return[1,b[1],b[2]]},c)});mp(0,MC);aq(0,42);eL([0,fn,gK]);eL([0,fn,gK]);eL([0,fn,gK]);var
MI=[ac,function(a){var
n=d3(mw[1],MF),d=[0,[1,[0,[0,my[1],[0,MH,[0,MG,[0,[2,n],0]]]]]],0],q=sV?sV[1]:0,b=x(d),r=0;if(0<b){Il[1]++;su[1]=b+su[1]|0}if(1<b){Ik[1]++;st[1]=b+st[1]|0;ss[1]=cw(ss[1],b);sr[1]=eu(sr[1],b)}var
o=i7(GQ),s=o||W(cg,Iq),e=sn[1];if(e<0)S(In);0===e;if(0===d)var
c=0;else{var
t=p(function(a){function
p(a,u){var
e=a,d=u;for(;;){if(d){var
h=d[1];if(typeof
h===g){var
d=d[2];continue}else
switch(h[0]){case
1:var
i=[0,i9],l=[0,Ii],w=d[2],x=h[1],s=function(i){return function(a){i[1]=j(r6,i[1],a);return 0}}(i),t=1,f=sq(s,function(l){return function(a){l[1]=a;return 0}}(l),t,x),b=W(l[1],Ij)?f:l[1],c=i[1],e=[0,function(f,b,c){return function(a){if(1-q){var
e=se(sc),h=[0,r]?r:0,i=function(a){var
d=a[1];A(bS(d),Hh,b,He,c);return k(bS(d),Hi,f,Hj)};r$(e[2],i);var
g=e[5];if(g){var
d=g[1];d[7]=1;d[4]=b;d[6]=c;d[10]=1+d[10]|0;d[5]=h;d[13]=j(r6,d[13],d[6]);sa(d);sa(d)}else
if(1<=e[1])j(bS(e[4]),Hk,f)}return f}}(f,b,c),e],d=w;continue;case
2:var
n=h[2],y=d[2],o=h[1],e=[0,function(n,o){return function(a){var
e=iI(n);function
c(a){if(a){var
b=a[3],d=a[1],f=a[2];return 0===bI(d,e)?(d2[1]=d2[1]-1|0,b):[0,d,f,c(b)]}return 0}var
d=fr(d2,e),f=c(I(d2[2],d));B(d2[2],d,f);var
b=kP(n);try{M(function(a){return fi(b,a)},o);go(b)}catch(f){f=m(f);go(b);throw f}return Im}}(n,o),e],d=y;continue;default:var
v=d[2],e=p(e,h[1]),d=v;continue}}return e}}return L(p(0,[0,a,0]))},d);qA(GI);qA(d2);if(!s)throw[0,l,GO];var
f=w(function(a,b){var
d=a[2],c=a[1];if(d)return[0,[0,0,c],d];try{M(function(a){var
c=h(a,0),b=r4(c),d=0!==b?1:0;if(d){if(1-q)j(sf(-1,Ip),b,c);throw[0,Gu,b]}return d},b);var
e=[0,[0,1,c],0]}catch(f){f=m(f);return[0,[0,0,c],[0,f]]}return e},Io,t),i=f[2],u=f[1];if(i)var
v=i[1],c=[0,[0,L(u),v]];else
var
c=0}if(c)throw c[1][2];return r3(mf(GH,n,function(a){var
c=ahU(a),f=ae(c),h=0;if(0<=c)if((f.getLen()-c|0)<0)var
g=0;else{var
d=h,b=c;for(;;){if(0<b){var
e=j_(a,f,d,b);if(0===e)throw[0,cX];var
d=d+e|0,b=b-e|0;continue}var
g=1;break}}else
var
g=0;if(!g)S(zN);return f}))}],sW=function(a){var
b=sT(gD(a));try{var
f=iI(b),c=gD(b);try{var
g=d3(f,Y(c,0,gs(c,46))),d=g}catch(f){f=m(f);if(f[1]!==o)throw f;var
d=S(Mz)}var
e=d}catch(f){f=m(f);if(f[1]!==di)throw f;var
e=b}return p5(ii,e)};aq(0,cd);aq(0,cd);aq(0,cd);var
sX=[0,MM],sY=aq(0,cd),MK=0;mg(function(c){var
N=sW(c),a=sS(c,MN);return mf(0,a,function(O){try{var
n=ae(dK),v=[0],x=0,y=0,z=0,A=0,C=0,D=0,F=0,G=ae(h6),Q=sl([0,function(a){var
j=gp(O,n,0,dK),b=0<j?j:(a[9]=1,0);if(a[2].getLen()<(a[3]+b|0)){if(((a[3]-a[5]|0)+b|0)<=a[2].getLen())cy(a[2],a[5],a[2],0,a[3]-a[5]|0);else{var
h=eu(2*a[2].getLen()|0,dl);if(h<((a[3]-a[5]|0)+b|0))aT(Af);var
i=ae(h);cy(a[2],a[5],i,0,a[3]-a[5]|0);a[2]=i}var
c=a[5];a[4]=a[4]+c|0;a[6]=a[6]-c|0;a[5]=0;a[7]=a[7]-c|0;a[3]=a[3]-c|0;var
e=a[10],f=e.length-1-1|0,k=0;if(!(f<0)){var
d=k;for(;;){var
g=I(e,d);if(0<=g)B(e,d,g-c|0);var
l=d+1|0;if(f!==d){var
d=l;continue}break}}}cy(n,0,a[2],a[3],b);a[3]=a[3]+b|0;return 0},G,F,D,C,A,z,y,x,v,il,il])}catch(f){f=m(f);if(f[1]===i$){var
P=f[2][1];throw[0,sX,h(E(MO),P)]}throw f}var
R=0,f=aH(function(a,b){var
c=a[1],d=a[2];if(W(sW(c),N))return r2(d,b);throw[0,sX,h(E(MP),c)]},Q,R);if(mx[1]){try{var
a=c.getLen()-1|0;for(;;){if(!(0<=a))throw[0,o];if(c.safeGet(a)!==46){var
a=a-1|0;continue}var
e=a+1|0,H=Y(c,e,c.getLen()-e|0),p=H;break}}catch(f){f=m(f);if(f[1]!==o)throw f;var
p=My}var
K=u(MD,p),L=u(ME,c),d=sT(c);try{var
J=bR(sU,d),q=J}catch(f){f=m(f);if(f[1]!==o)throw f;var
i=aH(function(a,b){return w(function(a,b){var
c=b[2],e=b[1];if(gL(function(a){if(0===a[0])return W(d,a[1]);var
x=a[1],b=x[1];if(0===b[0]){var
y=b[2],n=b[1],c=function(a){var
m=[0,0],n=[0,0],o=[0,0];function
c(a){var
b=m[1];m[1]++;return b}function
e(a,b,c){return b?(n[1]=[0,[0,a,b[1],c],n[1]],a):(o[1]=[0,[0,a,c],o[1]],a)}function
f(d,b){if(typeof
b===g)return d;else
switch(b[0]){case
1:var
r=b[1];return e(c(0),[0,r],d);case
2:var
s=b[2],t=b[1],k=c(0),u=f(k,t);e(k,0,f(d,s));return u;case
3:var
v=b[1],l=c(0);M(function(a){e(l,0,f(d,a));return 0},v);return l;case
4:var
j=b[1],m=j.getLen(),n=c(0),o=n,a=0;for(;;){if(a===m)return n;var
p=a===(m-1|0)?d:c(0);e(o,[0,[3,[0,j.safeGet(a),j.safeGet(a)]]],p);var
o=p,a=a+1|0;continue}default:var
q=b[1],i=c(0),h=f(i,q);e(h,0,d);e(i,0,h);e(i,0,h);return h}}var
t=c(0),z=f(t,y),h=m[1],p=$(h,bx[1]),A=o[1];M(function(a){var
b=a[1];return B(p,b,j(bx[4],a[2],I(p,b)))},A);var
q=$(h,bx[1]),v=h-1|0,F=0;if(!(v<0)){var
b=F;a:for(;;){var
r=bx[1],i=[0,b,0];for(;;){if(i){var
u=i[1],C=i[2],l=j(bx[4],u,r),D=I(p,u),E=function(l){return function(a,b){return j(bx[3],a,l)?b:[0,a,b]}}(l),r=l,i=k(bx[14],E,D,C);continue}B(q,b,r);var
J=b+1|0;if(v!==b){var
b=J;continue a}break}break}}var
s=$(h,0),G=n[1];M(function(a){var
b=a[1];return B(s,b,[0,[0,a[2],I(q,a[3])],I(s,b)])},G);var
H=aq(0,37),w=[0,I(q,z),s,t,H];x[1]=[1,w];return sk(0,w,d)};if(10<=n[1])return c(0);try{var
o=d.getLen(),i=function(a){var
c=a[3],b=a[2],e=a[1];if(0<=e)if(0<=b)if((e+b|0)<=o){n[1]++;if(10<=n[1])throw[0,mo];if(typeof
c===g)return 0===b?1:0;else
switch(c[0]){case
1:var
q=1===b?1:0,A=c[1];return q?mm(A,d.safeGet(e)):q;case
2:var
f=0,B=c[2],C=c[1];for(;;){var
r=f<=b?1:0;if(r){var
s=i([0,e,f,C]),t=s?i([0,e+f|0,b-f|0,B]):s;if(!t){var
f=f+1|0;continue}var
u=t}else
var
u=r;return u}case
3:var
D=c[1];return aB(function(a){return i([0,e,b,a])},D);case
4:var
v=c[1],w=v.getLen()===b?1:0;if(w){var
h=0;for(;;){var
x=h===b?1:0;if(x)var
y=x;else{var
z=v.safeGet(h)===d.safeGet(e+h|0)?1:0;if(z){var
h=h+1|0;continue}var
y=z}return y}}return w;default:var
k=c[1];if(typeof
k!==g)if(1===k[0]){var
m=k[1];if(typeof
m===g)if(0===m)return 1;var
j=0;for(;;){if(j===b)return 1;var
p=mm(m,d.safeGet(e+j|0));if(p){var
j=j+1|0;continue}return p}}throw[0,mo]}}throw[0,l,HK]},e=i([0,0,o,y])}catch(f){f=m(f);if(f[1]===mo)return c(0);throw f}return e}return sk(0,b[1],d)},e)){var
f=aH(GR,c[2],a);return aH(r5,c[1],f)}return a},b,a)},MA,i9);it(sU,d,i);var
q=i}if(j(mi,MQ,r7(r7(q,L),K)))var
b=0;else
var
r=[0,MR,f],b=1}else
var
b=0;if(!b)var
r=f;var
S=0,s=aH(function(a,b){if(ex([0,c,a],MK))var
e=0;else
if(ex(a,Ms))var
e=0;else{if(mx[1])var
f=0;else
var
g=sS(p5(ey,a),MJ),f=i6(d3(i7(MI),g));if(f)var
d=886832744,e=1;else
var
d=xi,e=1}if(!e){j(sf(3,ML),a,c);var
d=-589744366}return xi<=d?[0,[0,d,a],b]:b},r,S);try{var
T=bR(sY,c),t=T}catch(f){f=m(f);if(f[1]!==o)throw f;var
t=0}it(sY,c,r2(t,s));return s})});aq(0,pw);aq(0,32);aq(0,32);u(mC,MS);u(mC,MT);u(mC,MU);var
gO=function(a){return h(E(MV),a)};gO(yG);var
d5=gO(227),MX=gO(81),bj=gO(203),MY=gO(119);try{var
wO=[0,0],wP=[0,0],agt=function(a,b){wP[1]=a;wO[1]=b;return 0},wQ=i8(agu),lo=[0,0],B4=wQ.getLen(),r=qZ(0,function(a){if(B4<=lo[1])throw[0,cX];var
b=wQ.safeGet(lo[1]);lo[1]++;return b}),gC=function(a,an,c){var
bi=an.length-1-1|0;function
b(a){return h(a,0)}function
d(a,b,c){return h(a,b)}function
aI(a){var
c=b(a);return function(a,b){return d(c,a,b)}}function
bj(a,b){return a}function
aJ(m){var
s=m.getLen()-1|0;function
f(a,b,c,d){var
e=d;a:for(;;){if(s<e)return[0,b,c];var
h=m.safeGet(e);if(32===h)for(;;){var
j=aL(r);if(1-aX(r)){var
g=j-9|0,k=g<0||4<g?23===g?1:0:(g-2|0)<0||1<(g-2|0)?1:0;if(k){gA(r);continue}}var
e=e+1|0;continue a}if(37===h){var
f=e+1|0;if(s<f)return[0,b,c];else
if(95===m.safeGet(f))return a<50?i(1+a,1,b,c,f+1|0):v(i,[0,1,b,c,f+1|0]);else
return a<50?i(1+a,0,b,c,f):v(i,[0,0,b,c,f])}q1(r,h);var
e=e+1|0;continue}}function
i(a,b,c,d,e){function
aM(a,b){var
d=a,c=b;for(;;){if(s<c)return[0,d,c];var
e=m.safeGet(c);if((e+ax|0)<0||9<(e+ax|0))return[0,d,c];var
d=(10*d|0)+gB(e)|0,c=c+1|0;continue}}if(s<e)return[0,c,d];if(s<e)var
M=fu(m);else{var
ag=m.safeGet(e);if((ag+ax|0)<0||9<(ag+ax|0))var
M=[0,0,e];else
var
aN=aM(gB(ag),e+1|0),M=[0,[0,aN[1]],aN[2]]}var
ah=M[2],aQ=M[1];if(46===m.safeGet(ah))var
aP=aM(0,ah+1|0),ai=[0,[0,aP[1]],aP[2]];else
var
ai=[0,0,ah];var
i=ai[2],aR=ai[1],g=b?bj:aI,n=aQ?aQ[1]:dj,N=aR?aR[1]:dj,o=m.safeGet(i);if(!(fe<=o))switch(o){case
88:case
dM:case
eq:case
ek:case
h3:case
h4:q5(o,n,N,r);return a<50?f(1+a,c,j(g,d,de(dU(o,r))),i+1|0):v(f,[0,c,j(g,d,de(dU(o,r))),i+1|0]);case
69:case
71:case
hO:case
ge:case
cd:var
T=iD(lx(n,r),r);if(0!==T){var
ar=aL(r);if(!aX(r))if(46===ar){var
as=aj(T,r,ar),at=eu(as,N);iE(as-(at-q6(at,r)|0)|0,r)}else
iE(T,r)}return a<50?f(1+a,c,j(g,d,iC(r)),i+1|0):v(f,[0,c,j(g,d,iC(r)),i+1|0]);case
76:case
kl:case
e_:var
q=i+1|0;if(s<q)return a<50?f(1+a,c,j(g,d,fv(o,r)),q):v(f,[0,c,j(g,d,fv(o,r)),q]);var
w=m.safeGet(q),al=w+hP|0;if(!(al<0||32<al))switch(al){case
0:case
12:case
17:case
23:case
29:case
32:q5(w,n,N,r);var
am=o+pA|0;if(!(am<0||2<am))switch(am){case
1:break;case
2:return a<50?f(1+a,c,j(g,d,de(dU(w,r))),q+1|0):v(f,[0,c,j(g,d,de(dU(w,r))),q+1|0]);default:return a<50?f(1+a,c,j(g,d,de(dU(w,r))),q+1|0):v(f,[0,c,j(g,d,de(dU(w,r))),q+1|0])}return a<50?f(1+a,c,j(g,d,zf(dU(w,r))),q+1|0):v(f,[0,c,j(g,d,zf(dU(w,r))),q+1|0])}return a<50?f(1+a,c,j(g,d,fv(o,r)),q):v(f,[0,c,j(g,d,fv(o,r)),q]);case
37:case
64:q1(r,o);return a<50?f(1+a,c,d,i+1|0):v(f,[0,c,d,i+1|0]);case
67:case
99:if(0===n)return a<50?f(1+a,c,j(g,d,cz(r)),i+1|0):v(f,[0,c,j(g,d,cz(r)),i+1|0]);break;case
66:case
98:if(4<=n){var
X=cz(r),a5=ge===X?5:ku===X?4:bh(h(E(CD),X));q7(0,eu(n,a5),r)}else
iz(CE);var
S=bu(r),aT=i+1|0,aV=O(S,Ch)?O(S,Ci)?bh(h(E(Cj),S)):1:0;return a<50?f(1+a,c,j(g,d,aV),aT):v(f,[0,c,j(g,d,aV),aT]);case
40:case
en:var
ak=i+1|0,C=qg(fu,lt,o,m,ak),aS=fq(m,dn(ak),(C-2|0)-ak|0);q$(n,r);var
x=bu(r),a1=k1(aS);if(W(k1(x),a1)){if(en===o)return a<50?f(1+a,c,j(g,d,x),C):v(f,[0,c,j(g,d,x),C]);var
bk=j(g,d,x),P=k(aJ(x),c,bk,0);return a<50?f(1+a,P[1],P[2],C):v(f,[0,P[1],P[2],C])}return bh(j(E(Ce),x,aS));case
33:aL(r);return r[1]?a<50?f(1+a,c,d,i+1|0):v(f,[0,c,d,i+1|0]):bh(CH);case
44:return a<50?f(1+a,c,d,i+1|0):v(f,[0,c,d,i+1|0]);case
70:var
U=ly(n,r);if(0===U)lu(0);else{var
au=aL(r);if(aX(r))lu(0);else{var
A=au-69|0;if(A<0||32<A)if(-23===A){var
av=aj(U,r,au),ay=eu(av,N);iE(av-(ay-q6(ay,r)|0)|0,r);var
ao=1}else
var
ao=0;else
var
ao=(A-1|0)<0||30<(A-1|0)?(iE(U,r),1):0;if(!ao)lu(0)}}return a<50?f(1+a,c,j(g,d,iC(r)),i+1|0):v(f,[0,c,j(g,d,iC(r)),i+1|0]);case
78:return a<50?f(1+a,c,j(g,d,fv(o,r)),i+1|0):v(f,[0,c,j(g,d,fv(o,r)),i+1|0]);case
83:q$(n,r);return a<50?f(1+a,c,j(g,d,bu(r)),i+1|0):v(f,[0,c,j(g,d,bu(r)),i+1|0]);case
91:var
R=i+1|0,B=m.getLen(),G=aw(B),aC=function(a){var
b=a;for(;;){if(B<=b)return fu(m);var
e=m.safeGet(b);if(37===e){var
c=b+1|0;if(B<=c)return fu(m);var
d=m.safeGet(c);if(37!==d)if(64!==d)return lt(m,c,d);Q(G,d);var
b=c+1|0;continue}if(93===e)return[0,b,aO(G)];Q(G,e);var
b=b+1|0;continue}},aD=function(a){if(B<=a)return fu(m);var
b=m.safeGet(a);return 93===b?(Q(G,b),aC(a+1|0)):aC(a)};if(B<=R)var
H=fu(m);else
if(94===m.safeGet(R))var
aE=aD(R+1|0),H=[0,aE[1],[1,aE[2]]];else
var
aF=aD(R),H=[0,aF[1],[0,aF[2]]];var
D=H[2],aW=aK(H[1]+1|0),F=aW[2],aY=aW[1],J=function(a,b){var
c=b;for(;;){if(0===c)return c;var
d=aL(r);if(aX(r))return c;if(1===h(a,d)){var
c=aj(c,r,d);continue}return c}};if(0===D[0]){var
t=D[1],ae=t.getLen();if(ae<0||3<ae)var
y=0;else
switch(ae){case
1:var
Y=n,a6=t.safeGet(0);for(;;){if(0!==Y){var
aG=aL(r);if(!aX(r))if(aG===a6){var
Y=aj(Y,r,aG);continue}}var
y=1;break}break;case
2:var
Z=n,a7=t.safeGet(1),a8=t.safeGet(0);for(;;){if(0!==Z){var
_=aL(r);if(!aX(r)){var
bl=_===a8?0:_===a7?0:1;if(!bl){var
Z=aj(Z,r,_);continue}}}var
y=1;break}break;case
3:if(45===t.safeGet(1))var
y=0;else{var
$=n,a9=t.safeGet(2),a_=t.safeGet(1),a$=t.safeGet(0);for(;;){if(0!==$){var
K=aL(r);if(!aX(r)){var
bm=K===a$?0:K===a_?0:K===a9?0:1;if(!bm){var
$=aj($,r,K);continue}}}var
y=1;break}}break;default:J(function(a){return 0},n);var
y=1}if(!y)J(rb(F,D),n)}else{var
u=D[1],af=u.getLen();if(af<0||3<af)var
z=0;else
switch(af){case
1:var
aa=n,ba=u.safeGet(0);for(;;){if(0!==aa){var
aH=aL(r);if(!aX(r))if(aH!==ba){var
aa=aj(aa,r,aH);continue}}var
z=1;break}break;case
2:var
ab=n,bb=u.safeGet(1),bc=u.safeGet(0);for(;;){if(0!==ab){var
ac=aL(r);if(!aX(r))if(ac!==bc)if(ac!==bb){var
ab=aj(ab,r,ac);continue}}var
z=1;break}break;case
3:if(45===u.safeGet(1))var
z=0;else{var
ad=n,bd=u.safeGet(2),be=u.safeGet(1),bf=u.safeGet(0);for(;;){if(0!==ad){var
L=aL(r);if(!aX(r))if(L!==bf)if(L!==be)if(L!==bd){var
ad=aj(ad,r,L);continue}}var
z=1;break}}break;default:J(function(a){return 1},n);var
z=1}if(!z)J(rb(F,D),n)}var
ap=0!==F?1:0,a2=ap?1-aX(r):ap;if(a2){var
aq=aL(r);if(p1(aq,F))gA(r);else{var
a3=1,a4=dR(Cf,p(function(a){return aU(a3,a)},F));bh(j(E(Cg),a4,aq))}}return a<50?f(1+a,c,j(g,d,bu(r)),aY+1|0):v(f,[0,c,j(g,d,bu(r)),aY+1|0]);case
fb:if(bi<c)throw[0,l,CI];return a<50?f(1+a,c+1|0,j(g,d,h(I(an,c),r)),i+1|0):v(f,[0,c+1|0,j(g,d,h(I(an,c),r)),i+1|0]);case
fg:var
aZ=aK(i+1|0),a0=aZ[1];q7(aZ[2],n,r);return a<50?f(1+a,c,j(g,d,bu(r)),a0+1|0):v(f,[0,c,j(g,d,bu(r)),a0+1|0])}if(67===o){var
az=function(a){var
b=lz(a,r);return 39===b?bg(a,r):iA(39,b)},aA=cz(r);if(39===aA){var
V=bg(n,r),aB=lz(V,r);if(92===aB)az(q_(bg(V,r),r));else
az(aj(V,r,aB))}else
iA(39,aA);return a<50?f(1+a,c,j(g,d,iB(r)),i+1|0):v(f,[0,c,j(g,d,iB(r)),i+1|0])}if(99===o){aj(n,r,cz(r));return a<50?f(1+a,c,j(g,d,iB(r)),i+1|0):v(f,[0,c,j(g,d,iB(r)),i+1|0])}else
return lt(m,i,o)}function
a(b,c,d){return y(f(0,b,c,d))}function
b(b,c,d,e){return y(i(0,b,c,d,e))}function
aK(a){if(s<a)return[0,a-1|0,0];if(64===m.safeGet(a)){var
b=a+1|0;if(s<b)return[0,a-1|0,0];var
e=m.safeGet(b);if(37===e){var
c=b+1|0;if(s<c)return[0,a-1|0,0];var
d=m.safeGet(c);if(37!==d)if(64!==d)return[0,a-1|0,0];return[0,c,[0,d,0]]}return[0,b,[0,e,0]]}return[0,a-1|0,0]}return a}qb(r[8]);try{var
f=0,g=function(a){return c},i=k(aJ(a),0,g,f)[2],e=i}catch(f){f=m(f);if(f[1]!==lr)if(f[1]!==cf)if(f[1]!==cX)throw f;var
e=h(aI(function(a){return d(CF,r,a)}),f)}return b(e)},fw=qj(f$)[3];if(fw<0||3<fw)var
rc=function(f,b){if(fw<=f){var
g=$(fw,0),h=function(a,b){return B(g,(fw-a|0)-1|0,b)},c=0,a=b;for(;;){if(a){var
d=a[2],e=a[1];if(d){h(c,e);var
c=c+1|0,a=d;continue}h(c,e)}return function(a){return gC(f$,g,a)}}}return function(a){return rc(f+1|0,[0,a,b])}},hA=rc(0,0);else
switch(fw){case
1:var
hA=function(a,b){return gC(f$,[0,a],b)};break;case
2:var
hA=function(a,b,c){return gC(f$,[0,a,b],c)};break;case
3:var
hA=function(a,b,c,d){return gC(f$,[0,a,b,c],d)};break;default:var
hA=function(a){return gC(f$,[0],a)}}h(hA,agt);var
agv=[0,wP[1],wO[1]],jb=agv}catch(f){f=m(f);if(f[1]!==cf)throw f;var
jb=MZ}var
sZ=jb[1];if(0===sZ)if(0===jb[2])var
s0=M0,oF=1;else
var
oF=0;else
var
oF=0;if(!oF)var
s0=[0,sZ,jb[2]];var
mD=s0[2],gP=function(a,b){return b?[0,h(a,b[1])]:0},mE=function(a,b){return b?b[1]:a},s1=function(a){return a?1:0},ba=function(a){if(a)return a[1];throw[0,l,M1]},mF=function(a,b){return b?h(a,b[1]):0},a7=function(a,b){return a?h(b,a[1]):0},s2=function(a){return a?1:0},mG=function(a){return a?[0,a[1],0]:0},eN=function(a){return h(gw(aO,aw(16)),a)},fG=function(d,b,c){var
a=aw(16);return h(gw(function(a){qc(b,a);return s1(d)?fi(b,M2):0},a),c)},jc=function(a){return fG(0,cx,a)},fH=function(a){return fG(0,ev,a)},s3=function(a){return iq(function(a,b){return 0},a)},s4=function(a,b,c){return Y(a,b,c-b|0)},s5=function(a,b){var
c=a^b;return c&(-c|0)},mH=function(a,b){return a&(b-1|0)},bW=function(a,b){return wY(a,b)},M3=0,M4=function(a){var
b=a;for(;;)if(typeof
b===g)throw[0,o];else{if(0===b[0])return[0,b[1],b[2]];var
b=b[3];continue}},mI=function(a,b){var
c=b;for(;;)if(typeof
c===g)throw[0,o];else{if(0===c[0]){var
d=c[2];if(a===c[1])return d;throw[0,o]}var
e=c[4],f=c[3],h=0===(a&c[2])?f:e,c=h;continue}},M5=function(a,b){try{mI(a,b);var
c=1}catch(f){f=m(f);if(f[1]===o)return 0;throw f}return c},mJ=function(a,b,c,d){var
e=s5(a,c),f=mH(a,e);return 0===(a&e)?[1,f,e,b,d]:[1,f,e,d,b]},bk=function(a,b,c){return mH(a,c)===b?1:0},jd=[0,M6],s6=function(n,b,c,d){function
f(a){if(typeof
a===g)return[0,b,c];else{if(0===a[0]){var
h=a[2],i=a[1];if(b===i){var
k=j(n,h,c);if(k===h)throw[0,jd];return[0,b,k]}return mJ(b,[0,b,c],i,a)}var
l=a[4],m=a[3],d=a[2],e=a[1];return bk(b,e,d)?0===(b&d)?[1,e,d,f(m),l]:[1,e,d,m,f(l)]:mJ(b,[0,b,c],e,a)}}return f(d)},M7=function(a,b,c){return s6(function(a,b){throw[0,jd]},a,b,c)},je=function(a,b,c,d){try{var
e=s6(a,b,c,d)}catch(f){f=m(f);if(f[1]===jd)return d;throw f}return e},M8=function(a,b,c){return je(function(a,b){return b},a,b,c)},M9=function(a,b){return[0,a,b]},M_=function(a){if(typeof
a!==g)if(0===a[0])return[0,[0,a[1],a[2]]];return 0},M$=function(a){return typeof
a===g?1:0},mK=function(a){if(typeof
a===g)return 0;else{if(0===a[0])return 1;var
b=a[3],c=mK(a[4]);return mK(b)+c|0}},s7=function(f,b){function
c(a){if(typeof
a===g)throw[0,o];else{if(0===a[0]){if(f===a[1])return 0;throw[0,o]}var
b=a[4],d=a[3],e=a[2],h=a[1];if(0===(f&e)){var
i=c(d);return typeof
i===g?b:[1,h,e,i,b]}var
j=c(b);return typeof
j===g?d:[1,h,e,d,j]}}try{var
a=c(b)}catch(f){f=m(f);if(f[1]===o)return b;throw f}return a},jf=function(a,b){if(typeof
b===g)throw[0,o];else{if(0===b[0]){var
n=b[2];if(a===b[1])return[0,n,0];throw[0,o]}var
c=b[4],d=b[3],e=b[2],f=b[1];if(0===(a&e)){var
h=jf(a,d),i=h[2],j=h[1];return typeof
i===g?[0,j,c]:[0,j,[1,f,e,i,c]]}var
k=jf(a,c),l=k[2],m=k[1];return typeof
l===g?[0,m,d]:[0,m,[1,f,e,d,l]]}},s8=function(n,b,c){function
e(a,b){if(typeof
a===g)return b;else
if(1===a[0]){var
l=a[4],m=a[3],c=a[2],d=a[1];if(typeof
b!==g){if(0===b[0])return je(n,b[1],b[2],a);var
i=b[4],k=b[3],f=b[2],h=b[1];if(d===h)if(c===f){var
o=e(m,k),p=e(l,i);if(k===o)if(i===p)return b;return[1,d,c,o,p]}if(bW(c,f))if(bk(h,d,c))return 0===(h&c)?[1,d,c,e(m,b),l]:[1,d,c,m,e(l,b)];if(bW(f,c))if(bk(d,h,f)){if(0===(d&f)){var
q=e(a,k);return k===q?b:[1,h,f,q,i]}var
r=e(a,i);return i===r?b:[1,h,f,k,r]}return mJ(d,a,h,b)}}if(typeof
b===g)return a;var
s=a[2],t=a[1];return je(function(a,b){return j(n,b,a)},t,s,b)}return e(b,c)},Na=function(a,b){return s8(function(a,b){return b},a,b)},mL=function(a,b){var
c=b;for(;;)if(typeof
c===g)return 0;else{if(0===c[0])return j(a,c[1],c[2]);var
d=c[4];mL(a,c[3]);var
c=d;continue}},s9=function(a,b,c){var
d=b,e=c;for(;;)if(typeof
d===g)return e;else{if(0===d[0])return k(a,d[1],d[2],e);var
f=d[4],h=s9(a,d[3],e),d=f,e=h;continue}},s_=function(a,b,c){var
d=b,e=c;for(;;)if(typeof
d===g)return e;else{if(0===d[0])return k(a,d[1],d[2],e);var
f=d[3],h=s_(a,d[4],e),d=f,e=h;continue}},s$=function(a,b,c){var
e=b,d=c;for(;;){if(typeof
e===g){if(typeof
d===g)return 0}else
if(0===e[0]){if(typeof
d!==g)if(0===d[0]){var
f=e[1],h=d[2],i=e[2];if(f===d[1])return k(a,f,i,h);throw[0,l,Nc]}}else
if(typeof
d!==g)if(1===d[0]){var
j=d[4],m=d[3],n=d[2],o=e[4],p=e[3],q=e[2];if(e[1]===d[1]){if(q===n){s$(a,p,m);var
e=o,d=j;continue}throw[0,l,Nd]}throw[0,l,Ne]}throw[0,l,Nb]}},mM=function(a,b){if(typeof
b===g)return 0;else{if(0===b[0]){var
c=b[1];return[0,c,h(a,b[2])]}var
d=b[3],e=b[2],f=b[1],i=mM(a,b[4]);return[1,f,e,mM(a,d),i]}},mN=function(a,b){if(typeof
b===g)return b;else{if(0===b[0]){var
c=b[2],k=b[1],d=h(a,c);return c===d?b:[0,k,d]}var
e=b[4],f=b[3],l=b[2],m=b[1],i=mN(a,f),j=mN(a,e);if(i===f)if(j===e)return b;return[1,m,l,i,j]}},jg=[0,Nf],Ng=function(h,b,c){var
d=[0,[0,c,0]];function
e(a){for(;;){var
c=d[1];if(c){var
b=c[1];if(typeof
b===g){d[1]=c[2];continue}else{if(0===b[0]){var
e=b[2],f=b[1];d[1]=c[2];return[0,[0,f,e]]}d[1]=[0,b[3],[0,b[4],c[2]]];continue}}return 0}}try{mL(function(a,b){var
c=e(0);if(c){var
d=c[1],f=ga(a,d[1]),i=d[2];if(0===f){var
g=j(h,b,i);if(0===g)return 0;throw[0,jg,g]}throw[0,jg,f]}throw[0,jg,1]},b);var
a=e(0)?-1:0}catch(f){f=m(f);if(f[1]===jg)return f[2];throw f}return a},Nh=0,Ni=function(a){return typeof
a===g?1:0},Nj=function(a){return[0,a]},Nk=function(a){var
b=a;for(;;)if(typeof
b===g)throw[0,o];else{if(0===b[0])return b[1];var
b=b[3];continue}},mO=function(a){if(typeof
a===g)return 0;else{if(0===a[0])return 1;var
b=a[3],c=mO(a[4]);return mO(b)+c|0}},eO=function(a,b){var
c=b;for(;;)if(typeof
c===g)return 0;else{if(0===c[0])return a===c[1]?1:0;var
d=c[4],e=c[3],f=0===(a&c[2])?e:d,c=f;continue}},mP=function(a,b,c,d){var
e=s5(a,c),f=mH(a,e);return 0===(a&e)?[1,f,e,b,d]:[1,f,e,d,b]},ta=[0,Nl],mQ=function(a,b){if(typeof
b===g)return[0,a];else{if(0===b[0]){var
e=b[1];if(a===e)throw[0,ta];return mP(a,[0,a],e,b)}var
f=b[4],h=b[3],c=b[2],d=b[1];return bk(a,d,c)?0===(a&c)?[1,d,c,mQ(a,h),f]:[1,d,c,h,mQ(a,f)]:mP(a,[0,a],d,b)}},mR=function(a,b){try{var
c=mQ(a,b)}catch(f){f=m(f);if(f[1]===ta)return b;throw f}return c},tb=function(f,b){function
c(a){if(typeof
a===g)throw[0,o];else{if(0===a[0]){if(f===a[1])return 0;throw[0,o]}var
b=a[4],d=a[3],e=a[2],h=a[1];if(0===(f&e)){var
i=c(d);return typeof
i===g?b:[1,h,e,i,b]}var
j=c(b);return typeof
j===g?d:[1,h,e,d,j]}}try{var
a=c(b)}catch(f){f=m(f);if(f[1]===o)return b;throw f}return a},eP=function(a,b){if(typeof
a===g)return b;else
if(1===a[0]){var
j=a[4],k=a[3],c=a[2],d=a[1];if(typeof
b!==g){if(0===b[0])return mR(b[1],a);var
h=b[4],i=b[3],e=b[2],f=b[1];if(d===f)if(c===e){var
l=eP(k,i),m=eP(j,h);if(i===l)if(h===m)return b;return[1,d,c,l,m]}if(bW(c,e))if(bk(f,d,c))return 0===(f&c)?[1,d,c,eP(k,b),j]:[1,d,c,k,eP(j,b)];if(bW(e,c))if(bk(d,f,e)){if(0===(d&e)){var
n=eP(a,i);return i===n?b:[1,f,e,n,h]}var
o=eP(a,h);return h===o?b:[1,f,e,i,o]}return mP(d,a,f,b)}}return typeof
b===g?a:mR(a[1],b)},jh=function(a,b,c,d){return typeof
c===g?typeof
d===g?0:d:typeof
d===g?c:[1,a,b,c,d]},gQ=function(a,b){var
c=b;for(;;){if(typeof
a===g)var
k=1;else
if(1===a[0]){var
i=a[4],j=a[3],d=a[2],e=a[1];if(typeof
c===g)var
k=0;else{if(0===c[0])return tb(c[1],a);var
l=c[4],m=c[3],f=c[2],h=c[1];if(e===h)if(d===f){var
n=gQ(i,l);return jh(e,d,gQ(j,m),n)}if(bW(d,f))if(bk(h,e,d))return 0===(h&d)?jh(e,d,gQ(j,c),i):jh(e,d,j,gQ(i,c));if(bW(f,d))if(bk(e,h,f)){var
o=0===(e&f)?m:l,c=o;continue}return a}}else
var
k=0;if(!k)if(typeof
c!==g)return eO(a[1],c)?0:a;return a}},mS=function(a,b){var
d=a,c=b;for(;;){if(typeof
d===g)var
j=1;else
if(1===d[0]){var
o=d[4],p=d[3],e=d[2],f=d[1];if(typeof
c===g)var
j=0;else{if(0!==c[0]){var
q=c[4],r=c[3],h=c[2],i=c[1];if(f===i)if(e===h){var
s=mS(o,q);return jh(f,e,mS(p,r),s)}if(bW(e,h))if(bk(i,f,e)){var
t=0===(i&e)?p:o,d=t;continue}if(bW(h,e))if(bk(f,i,h)){var
u=0===(f&h)?r:q,c=u;continue}return 0}var
n=d,m=c,l=c[1],j=2}}else
var
j=0;switch(j){case
1:var
k=0;break;case
2:var
k=1;break;default:if(typeof
c===g)var
k=0;else
var
n=c,m=d,l=d[1],k=1}return k?eO(l,n)?m:0:0}},mT=[0,Nm],Nn=function(a,b){function
k(a,b){var
d=a,c=b;for(;;){if(typeof
d===g)var
j=1;else
if(1===d[0]){var
l=d[4],m=d[3],e=d[2],h=d[1];if(typeof
c===g)var
j=0;else{if(0===c[0]){if(eO(c[1],d))throw[0,mT];return 0}var
n=c[4],o=c[3],f=c[2],i=c[1];if(h===i)if(e===f){k(m,o);var
d=l,c=n;continue}if(bW(e,f))if(bk(i,h,e)){var
p=0===(i&e)?m:l,d=p;continue}if(bW(f,e))if(bk(h,i,f)){var
q=0===(h&f)?o:n,c=q;continue}return 0}}else
var
j=0;if(!j)if(typeof
c!==g){if(eO(d[1],c))throw[0,mT];return 0}return 0}}try{k(a,b);var
c=1}catch(f){f=m(f);if(f[1]===mT)return 0;throw f}return c},mU=function(a,b){var
c=b;for(;;)if(typeof
c===g)return 0;else{if(0===c[0])return h(a,c[1]);var
d=c[4];mU(a,c[3]);var
c=d;continue}},mV=function(a,b,c){var
d=b,e=c;for(;;)if(typeof
d===g)return e;else{if(0===d[0])return j(a,d[1],e);var
f=d[4],h=mV(a,d[3],e),d=f,e=h;continue}},mW=[0,Np],No=function(a){var
b=0;return mV(function(a,b){return[0,a,b]},a,b)},tc=function(a,b){var
d=[0,[0,b,0]];function
c(a){for(;;){var
b=d[1];if(b){var
c=b[1];if(typeof
c===g){d[1]=b[2];continue}else{if(0===c[0]){var
e=c[1];d[1]=b[2];return[0,e]}d[1]=[0,c[3],[0,c[4],b[2]]];continue}}return 0}}try{mU(function(a){var
b=c(0);if(b){var
d=ga(a,b[1]);if(0===d)return 0;throw[0,mW,d]}throw[0,mW,1]},a);var
e=c(0)?-1:0}catch(f){f=m(f);if(f[1]===mW)return f[2];throw f}return e},ji=[0,Nr],Nq=function(a,b){return 0===tc(a,b)?1:0},Ns=function(a,b){function
i(a,b){var
d=a,c=b;for(;;){if(typeof
d===g)return 0;else
if(1===d[0]){var
j=d[2],f=d[1],n=d[4],o=d[3];if(typeof
c===g)var
h=0;else{if(0!==c[0]){var
k=c[4],l=c[3],e=c[2],m=c[1];if(f===m)if(j===e){i(o,l);var
d=n,c=k;continue}if(bW(e,j))if(bk(f,m,e)){var
p=0===(f&e)?l:k,c=p;continue}throw[0,ji]}var
h=1}}else
var
h=0;if(!h)if(typeof
c!==g){if(eO(d[1],c))return 0;throw[0,ji]}throw[0,ji]}}try{i(a,b);var
c=1}catch(f){f=m(f);if(f[1]===ji)return 0;throw f}return c},mX=function(a){if(typeof
a===g)return 0;else{if(0===a[0])return[0,a[1]];var
b=a[3],c=a[2],d=a[1],e=mX(a[4]);return[1,d,c,mX(b),e]}},mY=function(a,b){if(typeof
b===g)return 0;else{if(0===b[0]){var
c=b[1];return[0,c,h(a,c)]}var
d=b[3],e=b[2],f=b[1],i=mY(a,b[4]);return[1,f,e,mY(a,d),i]}},mZ=function(a,b,c,d){return typeof
c===g?typeof
d===g?0:d:typeof
d===g?c:[1,a,b,c,d]},gR=function(a,b){var
c=b;for(;;){if(typeof
a===g)var
k=1;else
if(1===a[0]){var
i=a[4],j=a[3],d=a[2],e=a[1];if(typeof
c===g)var
k=0;else{if(0===c[0])return s7(c[1],a);var
l=c[4],m=c[3],f=c[2],h=c[1];if(e===h)if(d===f){var
n=gR(i,l);return mZ(e,d,gR(j,m),n)}if(bW(d,f))if(bk(h,e,d))return 0===(h&d)?mZ(e,d,gR(j,c),i):mZ(e,d,j,gR(i,c));if(bW(f,d))if(bk(e,h,f)){var
o=0===(e&f)?m:l,c=o;continue}return a}}else
var
k=0;if(!k)if(typeof
c!==g)return eO(a[1],c)?0:a;return a}},dx=[0,M3,mI,mI,M8,jd,M7,je,M5,M9,M$,M_,mK,M4,jf,jf,s7,Na,s8,mL,s9,s_,s$,mM,mN,Ng,[0,Nh,Ni,Nj,mO,Nk,eO,mR,tb,eP,gQ,mS,Nn,mU,mV,No,tc,Nq,Ns],mX,mY,gR],td=function(a,b){var
e=a[2],d=e.length-1;if(d<=b){var
c=2*d|0,g=a[1];for(;;){if(b<c){var
f=$(c,g);fk(e,0,f,0,d);a[2]=f;return 0}var
c=2*c|0;continue}}return 0},m0=function(a){var
d=[0,0],b=[0,te,$(16384,te),0],e=aq(0,43);function
c(a){try{var
f=bR(e,a)}catch(f){f=m(f);if(f[1]===o){var
c=d[1];d[1]++;c1(e,a,c);td(b,c);B(b[2],c,a);b[3]=cw(c+1|0,b[3]);return c}throw f}return f}function
f(a){td(b,a);return I(b[2],a)}function
g(a,b){return a===b?1:0}function
i(a,b){return b<a?1:a<b?-1:0}return[0,c,f,g,i,Bw,dx,function(d){var
b=[0,dx[1]];return function(a){try{var
e=j(dx[3],a,b[1])}catch(f){f=m(f);if(f[1]===o){var
c=h(d,a);b[1]=k(dx[4],a,c,b[1]);return c}throw f}return e}}]},gS=m0([0]),_=gS[1],ak=gS[2],bl=gS[3],tf=gS[4],cC=gS[6],bX=function(a,b){return aW(a,h(ak,b))},tg=function(a,b){var
c=kQ(a);function
d(a){return fj(c)}try{var
e=h(b,c)}catch(f){f=m(f);d(0);throw f}d(0);return e},m1=[0,0],c5=function(a){var
b=cW(m1[1]);m1[1]=m1[1]+1|0;return h(_,u(a,b))},th=function(a){var
b=aw(hQ),c=ae(kB);for(;;){var
d=gp(a,c,0,kB),e=0<d?(aW(b,Y(c,0,d)),1):0;if(e)continue;return aO(b)}},ti=function(a,b){return wW(b)?j(am(a),Nt,cS(b)+1|0):j(am(a),Nu,b+1|0)},tj=function(a){try{var
b=hD(0);w2(a);var
c=hD(0);w2(b);var
d=[0,c]}catch(f){f=m(f);if(f[1]===lR)return 0;throw f}return d},tk=function(a,b){var
c=tj(a),d=tj(b);if(c)if(d)return W(c[1],d[1]);return 0},m2=[0,0],Nw=[0,Nv],gT=function(a){return m2[1]},s=function(a,b){var
c=mE(1,a);return c<=m2[1]?fG(Ny,ev,b):s3(b)},Nz=[0,0],tl=function(a){Nz[1]++;return s(NA,a)},tm=function(a){qc(ev,a);var
b=aO(a),c=gs(b,10),d=0<=c?Y(b,0,c):b;throw[0,Nw,d]},F=function(a){var
b=aw(16);aW(b,NB);return h(gw(function(a){Q(a,10);return tm(a)},b),a)},an=function(a,b){if(a)return s3(b);var
c=aw(16);aW(c,NC);aW(c,bj);return h(gw(function(a){aW(a,u(aC,ND));return tm(a)},c),b)},gU=m0([0]),jj=gU[1],cj=gU[2],tn=gU[3],to=gU[6],NE=gU[4],gV=function(a,b){return aW(a,h(cj,b))},gW=m0([0]),cD=gW[1],bY=gW[2],d6=gW[3],dy=gW[6],tp=gW[7],dz=function(a,b){return aW(a,h(bY,b))},tq=function(a){if(a){var
b=a[1],d=b[3],e=b[2],f=b[1],c=tq(a[2]);return[0,[0,f,c[1]],[0,e,c[2]],[0,d,c[3]]]}return NF},jk=function(n,k,c,d){function
l(a,b){var
c=h(k,b);return j(n,h(k,a),c)}var
b=dQ(l,c);if(b){var
e=b[1],a=b[2];for(;;){if(a){var
f=a[1],m=a[2];if(0!==l(e,f)){var
e=f,a=m;continue}var
i=[0,[0,e,f]]}else
var
i=0;var
g=i;break}}else
var
g=0;return g?h(d,g[1][1]):c},tr=function(a,b){var
d=0,c=0;for(;;){if(c===a)return L(d);var
d=[0,h(b,c),d],c=c+1|0;continue}},ts=function(a,b,c,d){var
h=0,g=b,f=c,e=d;for(;;){if(f){if(e){var
i=e[2],j=f[2],k=A(a,h,g,f[1],e[1]),h=h+1|0,g=k,f=j,e=i;continue}}else
if(!e)return g;throw[0,di,NH]}},bz=function(a,b,c){var
f=0,e=b,d=c;for(;;){if(d){var
g=d[2],h=k(a,f,e,d[1]),f=f+1|0,e=h,d=g;continue}return e}},m3=function(a,b){var
c=ie(b);return w(a,a4(b),c)},tt=function(a){return fl(a,x(a)-1|0)},c6=function(a,b){var
c=p(a,b);return p(ba,h(aN(function(a){return 0!==a?1:0}),c))},jl=function(a,b){var
d=0,c=b;for(;;){if(c){var
f=c[2],e=c[1],g=h(a,e);if(g){var
i=[0,e,g[1]];return[0,[0,ew(d,f),i]]}var
d=[0,e,d],c=f;continue}return 0}},tu=function(a,b){var
d=0,c=b;for(;;){if(c){var
f=c[2],e=j(a,d,c[1]);if(e)return[0,e[1]];var
d=d+1|0,c=f;continue}return 0}},ck=function(c,b){return tu(function(a){return c},b)},fI=function(d,b){var
a=jl(function(a){return h(d,a)?NJ:0},b);if(a){var
c=a[1];return[0,[0,c[1],c[2][1]]]}return 0},aD=function(a,b){return fm(p(a,b))},fJ=function(a,b){if(b){var
e=b[2],c=h(a,b[1]),f=c[2],g=c[1],d=fJ(a,e);return[0,[0,g,d[1]],[0,f,d[2]]]}return NK},tv=function(a,b,c){var
e=b,d=c;for(;;){if(e){if(d){var
g=d[2],h=e[2],f=j(a,e[1],d[1]);if(f){var
e=h,d=g;continue}return f}}else
if(!d)return 1;return 0}},cl=function(a){var
c=0,b=a;for(;;){if(typeof
b===g)return[0,L(c),b];var
c=[0,b[1],c],b=b[2];continue}},tw=function(a){var
c=0,b=a;for(;;){if(typeof
b===g)return c;var
c=1+c|0,b=b[2];continue}},fK=function(a){if(typeof
a===g)switch(a){case
1:return NM;case
2:return NN;default:return NL}var
b=a[1],c=u(NO,fK(a[2]));return u(fK(b),c)},cE=function(a){return n(fK(a))},tx=function(a,b){return av(a,b)},m4=function(a,b){return av(a,b)},NP=function(a,b){return bI(a,b)},ty=0,m5=3,jm=function(a){return 3<=a?1:0},jn=function(a,b){switch(a){case
2:var
c=2===b?2:3<=b?0:1;break;case
3:var
c=0;break;case
0:var
c=2;break;default:if(0===b)var
c=1;else
switch(b-1|0){case
1:var
c=1;break;case
2:var
c=0;break;default:var
c=2}}switch(c){case
1:var
d=0;break;case
2:var
d=1;break;default:var
d=3<=b?1:0}return d?1:0},tz=function(a,b){if(0!==a)if(0!==b){if(3<=a)var
c=b;else{if(!(3<=b))return av(a,b)?a:0;var
c=a}return c}return 0},gX=function(a){switch(a){case
1:return NR;case
2:return NS;case
3:return NT;default:return NQ}},d7=dm([0,function(a,b){return bI(a,b)}]),tB=d7[1],tC=d7[3],gY=d7[4],tD=d7[7],tE=d7[9],gZ=d7[22],NU=d7[11],NV=d7[23],m6=function(c){return w(function(a,b){return k(gY,b,h(c,b),a)},tB,tA)},tF=function(a){return 0===a?0:1},m7=function(a,b,c){if(0===a){if(0===b)return 0}else
if(0!==b)return h(c,0);return 1},tG=function(a,b,c,d){var
e=cC[1],f=bz(function(a,b,c){return k(cC[4],c,a,b)},e,d),g=x(d);return[0,h(cj,a),g,b,f,c]},g0=function(a){var
b=a[1];if(1===b[0])throw[0,l,NY];return b[1]},m8=[0,ez,ez],tH=function(a){var
b=a[1],c=a[2],d=b[3],e=b[2],f=b[1];return[0,f,aH(function(a,b){return[0,a[2][2],b]},c,e),d]},g1=function(a){var
b=a;for(;;){if(typeof
b!==g)switch(b[0]){case
0:var
b=b[1];continue;case
3:return b[1];case
8:var
b=b[2];continue;case
11:var
b=b[2];continue;case
13:var
b=b[1];continue}throw[0,o]}},d8=function(a){var
b=a;for(;;){if(typeof
b===g)var
c=2===b?2:1;else
switch(b[0]){case
9:case
10:var
c=2;break;case
0:var
i=b[2];return[3,d8(b[1]),i];case
1:return[1,p(d8,b[1])];case
3:var
f=b[1],j=f[2],k=f[1],l=0;return[2,[0,k,w(function(a,b){var
c=b[1];return[0,[0,c,d8(b[2])],a]},l,j)]];case
11:var
h=b[1],d=d8(b[2]),m=typeof
d===g?1:3===d[0]?typeof
d[1]===g?1:0:0;return m?[0,h]:[5,d,h];case
12:var
e=b[1],c=0;break;case
13:var
e=b[1],c=0;break;case
14:var
e=b[2],c=0;break;default:var
c=1}switch(c){case
1:return 0;case
2:return 0;default:var
b=e;continue}}},g2=function(a,b){if(0===b[0])return h(a,b[1]);var
c=b[1],d=u(NZ,h(a,b[2]));return u(h(bY,c),d)},tI=function(a){return 0===a[0]?a[1]:F(N0)},tJ=function(a){var
b=0===a[0]?a[1]:a[2];return b},m9=function(a){return[1,[0,a]]},g3=function(a,b){var
c=b;for(;;){if(typeof
c===g)var
d=0;else
switch(c[0]){case
1:var
e=1,d=1;break;case
21:var
c=c[1];continue;default:var
d=0}if(!d)var
e=0;if(e)return[0,function(a){return a},b];var
f=c5(a),h=m9(f);return[0,function(a){return[3,0,[0,[0,[0,f],b],0],a]},h]}},eQ=function(a){return[0,a,0]},bA=function(a,b,c){if(O(b,N1)){if(O(b,N2))return[12,m9(h(_,b)),[15,[0,a,[0,c,0]]]];var
d=g3(N3,a),e=d[2];return h(d[1],[17,0,e,e,c])}var
f=g3(N4,a),g=f[2];return h(f[1],[17,0,g,c,g])},tK=function(a){return[0,a,0]},tL=function(f,b,c){var
a=b[2],h=b[1],i=c6(function(a){if(typeof
a!==g){var
b=a[1];if(pC===b){var
c=a[2],d=c[1],e=[2,[0,d]];return[0,[0,d,[13,[4,e],[9,e,c[2]]]]]}if(kD===b)return[0,a[2]]}return 0},a),j=c6(function(a){if(typeof
a!==g)if(pC===a[1])return[0,a[2][1]];return 0},a),d=c6(function(a){if(typeof
a!==g)if(xX===a[1])return[0,a[2]];return 0},a),e=[3,[0,h,i,c]],k=d?[13,e,m3(function(a,b){return[10,a,b]},d)]:e;return aH(function(a,b){return[8,[0,a,0,f],b]},j,k)},jo=[0,N5],tM=0,N_=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],b[2],b[3],c[4],b[5]];return 0},N$=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Oa=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},Ob=function(a){var
b=a[6];a[6]=[0,b[1],2,b[3],b[4],b[5]];return 0},Oc=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Od=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,b[2],0,[0,d,c]],d,c,b[5]];return 0},Oe=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Of=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Og=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Oh=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Oi=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Oj=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Ok=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Ol=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Om=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},On=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Oo=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Op=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Oq=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Or=function(a){var
c=a[6],d=c[5],b=d[5],e=b[5],f=b[3],g=b[1],i=c[4];a[6]=[0,g,h(_,d[2]),f,i,e];return 0},Os=function(a){var
b=a[6],c=b[5],d=b[4],e=b[3],f=b[1];a[6]=[0,f,h(_,b[2]),e,d,c];return 0},Ot=function(a){var
b=a[6],d=b[5][5],c=d[5],e=b[4];a[6]=[0,c[1],[2,d[2],[0,b[2],[0,b[3],e]]],c[3],e,c[5]];return 0},Ou=function(a){var
c=a[6],d=c[5],b=d[5];a[6]=[0,b[1],d[2],b[3],c[4],b[5]];return 0},Ov=function(a){var
c=a[6],b=c[5][5],d=b[3],e=c[4];a[6]=[0,b[1],[0,b[2],c[2],[0,d,e]],d,e,b[5]];return 0},Ow=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Ox=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[1,c[2],[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},Oy=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,[0,b[2],[0,d,c]]],d,c,b[5]];return 0},Oz=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OA=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OB=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},OC=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OD=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OE=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},OF=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OG=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OH=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},OI=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OJ=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OK=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},OL=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OM=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},ON=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},OO=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OP=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},OQ=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},OR=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},OS=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},OT=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},OU=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},OV=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},OW=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},OX=function(a){var
c=a[6],e=c[5],d=e[5],b=d[5];a[6]=[0,b[1],[0,[0,b[2],[0,d[2],[0,d[3],e[3]]]],c[2]],b[3],c[4],b[5]];return 0},OY=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,c[2],[0,b[2],[0,b[3],d]]],0],c[3],d,c[5]];return 0},OZ=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},O0=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},O1=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},O2=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},O3=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},O4=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},O5=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[0,[0,b[2],[0,e,d[3]]],c[2]],e,c[4],b[5]];return 0},O6=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,[0,b[2],[0,d,c]],0],d,c,b[5]];return 0},O7=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[0,[3,b[2],[0,e,d[3]]],c[2]],e,c[4],b[5]];return 0},O8=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,[3,b[2],[0,d,c]],0],d,c,b[5]];return 0},O9=function(a){var
c=a[6],b=c[5][5],d=b[3];a[6]=[0,b[1],[0,[21,b[2],[0,d,b[4]]],c[2]],d,c[4],b[5]];return 0},O_=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,[21,b[2],[0,d,c]],0],d,c,b[5]];return 0},O$=function(a){var
d=a[6],b=d[5][5],e=b[5],c=e[5],f=c[3];a[6]=[0,c[1],[0,[0,[3,c[2],[0,f,e[3]]],[21,b[2],[0,b[3],b[4]]]],d[2]],f,d[4],c[5]];return 0},Pa=function(a){var
b=a[6],d=b[5],c=d[5],e=c[3],f=b[4];a[6]=[0,c[1],[0,[0,[3,c[2],[0,e,d[3]]],[21,b[2],[0,b[3],f]]],0],e,f,c[5]];return 0},Pb=function(a){var
b=a[6],e=b[5],c=e[5],d=c[5];a[6]=[0,d[1],[0,[0,1,[0,c[2],[0,c[3],e[3]]]],b[2]],d[3],b[4],d[5]];return 0},Pc=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[0,[0,0,[0,b[2],[0,e,d[3]]]],c[2]],e,c[4],b[5]];return 0},Pd=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,1,[0,b[2],[0,b[3],d]]],0],c[3],d,c[5]];return 0},Pe=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,[0,0,[0,b[2],[0,d,c]]],0],d,c,b[5]];return 0},Pf=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Pg=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},Ph=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Pi=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},Pj=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},Pk=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Pl=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[21,b[2],[0,d,c]],d,c,b[5]];return 0},Pm=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[1,[0,[0,b[2],[0,e,d[3]]],c[2]]],e,c[4],b[5]];return 0},Pn=function(a){var
b=a[6],d=b[5],c=d[5],e=c[3],f=b[4];a[6]=[0,c[1],[10,[0,c[2],[0,e,d[3]]],[0,b[2],[0,b[3],f]]],e,f,c[5]];return 0},Po=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Pp=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Pq=function(a){var
c=a[6],b=c[5][5],d=b[3];a[6]=[0,b[1],[15,[0,[21,b[2],[0,d,b[4]]],c[2]]],d,c[4],b[5]];return 0},Pr=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Ps=function(a){var
c=a[6],b=c[5][5],d=b[3];a[6]=[0,b[1],[15,[0,[21,b[2],[0,d,b[4]]],c[2]]],d,c[4],b[5]];return 0},Pt=function(a){var
d=a[6],c=d[5],f=c[3],h=d[4],i=[0,d[2],[0,d[3],h]],b=[0,c[2],[0,f,c[4]]],l=c[5],m=c[1];for(;;){if(typeof
b===g)var
e=0;else
switch(b[0]){case
0:var
b=b[1];continue;case
5:var
k=b[1],j=[5,k,D(b[2],[0,i,0])],e=1;break;default:var
e=0}if(!e)var
j=[5,b,[0,i,0]];a[6]=[0,m,j,f,h,l];return 0}},Pu=function(a){var
b=a[6],c=b[5];a[6]=[0,c[1],[4,[2,b[2]]],c[3],b[4],c[5]];return 0},Pv=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Pw=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Px=function(a){var
c=a[6],b=c[5][5],d=b[3],e=b[5],f=b[1],g=c[4],h=[21,b[2],[0,d,b[4]]];a[6]=[0,f,[9,h,tK(c[2])],d,g,e];return 0},Py=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Pz=function(a){var
c=a[6],b=c[5][5],d=b[3],e=c[4];a[6]=[0,b[1],[0,[21,b[2],[0,d,b[4]]],[0,c[2],[0,c[3],e]]],d,e,b[5]];return 0},PA=function(a){var
b=a[6],e=b[5],c=e[5],d=c[5],f=b[4];a[6]=[0,d[1],[11,[0,c[2],[0,c[3],e[3]]],[0,b[2],[0,b[3],f]]],d[3],f,d[5]];return 0},PB=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[10,[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},PC=function(a){var
e=a[6],b=e[5],g=b[5],c=g[5],d=c[5][5],f=d[5],i=f[3],j=e[4],p=f[5],q=f[1],r=g[3],s=e[3],t=[21,b[2],[0,b[3],b[4]]],u=[21,c[2],[0,c[3],c[4]]],k=g3(PD,[21,d[2],[0,d[3],d[4]]]),l=k[2],v=k[1],m=g3(PE,u),n=m[2],w=m[1],o=g3(PF,t);a[6]=[0,q,h(v,h(w,[20,[21,[24,l,n],[0,i,r]],h(o[1],[20,[21,[23,l,n],[0,s,j]],o[2]])])),i,j,p];return 0},PG=function(a){var
c=a[6],b=c[5][5],d=b[5];a[6]=[0,d[1],[23,[21,b[2],[0,b[3],b[4]]],c[2]],d[3],c[4],d[5]];return 0},PH=function(a){var
c=a[6],b=c[5][5],d=b[5];a[6]=[0,d[1],[24,[21,b[2],[0,b[3],b[4]]],c[2]],d[3],c[4],d[5]];return 0},PI=function(a){var
c=a[6],b=c[5][5],d=b[5],e=d[5],f=d[3],g=d[1],h=b[4],i=b[3],j=b[2],k=c[4];a[6]=[0,g,[8,[21,j,[0,i,h]],eQ(c[2]),[0,0]],f,k,e];return 0},PJ=function(a){var
c=a[6],d=c[5][5],b=d[5][5],e=b[3],f=b[5],g=b[1],h=c[4],i=c[2],j=[21,b[2],[0,e,b[4]]];a[6]=[0,g,[7,j,tK(d[2]),i],e,h,f];return 0},PK=function(a){var
e=a[6],b=e[5][5],f=b[5],c=f[5],g=c[5][5],d=g[5][5];a[6]=[0,d[1],[19,d[2],g[2],[21,c[2],[0,c[3],c[4]]],f[2],[21,b[2],[0,b[3],b[4]]],e[2]],d[3],e[4],d[5]];return 0},PL=function(a){var
d=a[6],b=d[5][5],c=b[5][5];a[6]=[0,c[1],[18,c[2],[21,b[2],[0,b[3],b[4]]],d[2]],c[3],d[4],c[5]];return 0},PM=function(a){var
b=a[6],c=b[5][5],d=c[5][5],f=d[5],e=f[5],g=b[4];a[6]=[0,e[1],[17,f[2],[21,d[2],[0,d[3],d[4]]],[21,c[2],[0,c[3],c[4]]],[21,b[2],[0,b[3],g]]],e[3],g,e[5]];return 0},PN=function(a){var
b=a[6],c=b[5][5],e=c[5],d=e[5],f=b[4];a[6]=[0,d[1],[17,e[2],[21,c[2],[0,c[3],c[4]]],[21,b[2],[0,b[3],f]],PO],d[3],f,d[5]];return 0},PP=function(a){var
b=a[6],c=b[5],d=c[5];a[6]=[0,d[1],[0,c[2],[0,c[3],b[3]]],d[3],b[4],d[5]];return 0},PQ=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],PR,b[3],c[4],b[5]];return 0},PS=function(a){var
c=a[6],e=c[5],d=e[5],b=d[5];a[6]=[0,b[1],[15,[0,b[2],[0,d[2],[0,d[3],e[3]]]],c[2]],b[3],c[4],b[5]];return 0},PT=function(a){var
c=a[6],b=c[5],d=b[5],e=b[3],f=b[2],g=b[1],h=c[4],i=c[2];a[6]=[0,g,aH(function(a,b){return[8,a,b]},f,i),e,h,d];return 0},PU=function(a){var
c=a[6],b=c[5],d=b[5],e=b[3],f=b[2],g=b[1],h=c[4],i=c[2];a[6]=[0,g,aH(function(a,b){return[7,a,b]},f,i),e,h,d];return 0},PV=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[6,[0,b[2],[0,e,d[3]]],c[2]],e,c[4],b[5]];return 0},PW=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},PX=function(a){var
c=a[6],e=c[5],d=e[5],b=d[5];a[6]=[0,b[1],[15,[0,b[2],[0,d[2],[0,d[3],e[3]]]],c[2]],b[3],c[4],b[5]];return 0},PY=function(a){var
c=a[6],b=c[5],d=b[5],e=b[3],f=b[2],g=b[1],h=c[4],i=c[2];a[6]=[0,g,aH(function(a,b){return[8,a,b]},f,i),e,h,d];return 0},PZ=function(a){var
c=a[6],b=c[5],d=b[5],e=b[3],f=b[2],g=b[1],h=c[4],i=c[2];a[6]=[0,g,aH(function(a,b){return[7,a,b]},f,i),e,h,d];return 0},P0=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[6,[0,b[2],[0,e,d[3]]],c[2]],e,c[4],b[5]];return 0},P1=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},P2=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},P3=function(a){var
c=a[6],b=c[5][5],d=b[3],e=c[4],f=b[5],g=b[1];a[6]=[0,g,tL([0,d,e],b[2],[0,c[2]]),d,e,f];return 0},P4=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},P5=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[5,[3,b[2],[0,e,d[3]]],c[2]],e,c[4],b[5]];return 0},P6=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[1,[0,[3,b[2],[0,e,d[3]]],c[2]]],e,c[4],b[5]];return 0},P7=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},P8=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[0,b[2],[0,b[3],d]],c[3],d,c[5]];return 0},P9=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[11,c[2],[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},P_=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[9,[2,b[2]],[4,[2,c[2]]]],b[3],c[4],b[5]];return 0},P$=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[9,[2,c[2]],[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},Qa=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Qb=function(a){var
b=a[6],d=b[5],c=d[5],e=c[3],f=b[4];a[6]=[0,c[1],[4,[3,c[2],[0,e,d[3]]],[0,b[2],[0,b[3],f]]],e,f,c[5]];return 0},Qc=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Qd=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Qe=function(a){var
b=a[6],c=b[5];a[6]=[0,c[1],b[2],c[3],b[4],c[5]];return 0},Qf=function(a){var
b=a[6],e=b[5],c=e[5],d=c[5][5],f=b[4];a[6]=[0,d[1],[5,[0,[0,c[3],e[3]],0,[0,c[2],0]],[21,b[2],[0,b[3],f]]],d[3],f,d[5]];return 0},Qg=function(a){var
b=a[6],e=b[5],c=e[5],d=c[5][5],f=b[4];a[6]=[0,d[1],[5,[0,[0,c[3],e[3]],0,[0,c[2],0]],[21,b[2],[0,b[3],f]]],d[3],f,d[5]];return 0},Qh=function(a){var
b=a[6],e=b[5],c=e[5],d=c[5][5],f=b[4];a[6]=[0,d[1],[5,[0,[0,c[3],e[3]],1,c[2]],[21,b[2],[0,b[3],f]]],d[3],f,d[5]];return 0},Qi=function(a){var
b=a[6],d=b[5][5],c=d[5][5],e=b[4];a[6]=[0,c[1],[4,d[2],[21,b[2],[0,b[3],e]]],c[3],e,c[5]];return 0},Qj=function(a){var
b=a[6],d=b[5][5],e=d[5],c=e[5],f=b[4];a[6]=[0,c[1],[3,e[2],d[2],[21,b[2],[0,b[3],f]]],c[3],f,c[5]];return 0},Qk=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],b[2],b[3],c[4],b[5]];return 0},Ql=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[20,c[2],[21,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},Qm=function(a){var
b=a[6],d=b[5],e=d[5],c=e[5],f=c[3],g=b[4];a[6]=[0,c[1],[14,[0,d[2],[0,b[2],[0,b[3],g]]],[0,c[2],[0,f,e[3]]]],f,g,c[5]];return 0},Qn=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[13,Qo,[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},Qp=function(a){var
b=a[6],d=b[5],c=d[5],e=c[3],f=b[4];a[6]=[0,c[1],[13,[0,c[2],[0,e,d[3]]],[0,b[2],[0,b[3],f]]],e,f,c[5]];return 0},Qq=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Qr=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[12,[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},Qs=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},Qt=function(a){var
b=a[6],c=b[4],d=b[3],e=b[5],f=b[1];a[6]=[0,f,tL([0,d,c],b[2],0),d,c,e];return 0},Qu=function(a){var
b=a[6];a[6]=[0,b[1],[2,b[2]],b[3],b[4],b[5]];return 0},Qv=function(a){var
b=a[6];a[6]=[0,b[1],3,b[3],b[4],b[5]];return 0},Qw=function(a){var
b=a[6];a[6]=[0,b[1],2,b[3],b[4],b[5]];return 0},Qx=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Qy=function(a){var
b=a[6];a[6]=[0,b[1],0,b[3],b[4],b[5]];return 0},Qz=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},QA=function(a){var
b=a[6];a[6]=[0,b[1],0,b[3],b[4],b[5]];return 0},QB=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2]],b[3],b[4],b[5]];return 0},QC=function(a){var
b=a[6];a[6]=[0,b[1],[2,b[2]],b[3],b[4],b[5]];return 0},QD=function(a){var
b=a[6],c=b[5],d=c[5];a[6]=[0,d[1],[3,c[2],[0,c[3],b[3]]],d[3],b[4],d[5]];return 0},QE=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],QF,b[3],c[4],b[5]];return 0},QG=function(a){var
e=a[6],f=e[5],c=f[5],b=f[2],h=c[5],i=c[3],j=c[1],k=e[4];if(b)if(b[2])var
d=0;else
var
g=b[1],d=1;else
var
d=0;if(!d)var
g=[15,b];a[6]=[0,j,g,i,k,h];return 0},QH=function(a){var
e=a[6],f=e[5],c=f[5],b=f[2],h=c[5],i=c[3],j=c[1],k=e[4];if(b)if(b[2])var
d=0;else
var
g=b[1],d=1;else
var
d=0;if(!d)var
g=[15,b];a[6]=[0,j,g,i,k,h];return 0},QI=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],QJ,b[3],c[4],b[5]];return 0},QK=function(a){var
d=a[6],e=d[5],b=e[5][5],f=b[5],c=f[5];a[6]=[0,c[1],[14,f[2],[21,b[2],[0,b[3],b[4]]],e[2]],c[3],d[4],c[5]];return 0},QL=function(a){var
b=a[6];a[6]=[0,b[1],[16,b[2]],b[3],b[4],b[5]];return 0},QM=function(a){var
b=a[6];a[6]=[0,b[1],0,b[3],b[4],b[5]];return 0},QN=function(a){var
b=a[6];a[6]=[0,b[1],[22,b[2]],b[3],b[4],b[5]];return 0},QO=function(a){var
b=a[6];a[6]=[0,b[1],[1,b[2]],b[3],b[4],b[5]];return 0},QP=function(a){var
b=a[6],c=b[5],d=b[4],e=c[5],f=c[3],g=c[1],i=[21,b[2],[0,b[3],d]];a[6]=[0,g,[12,m9(h(_,c[2])),i],f,d,e];return 0},QQ=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},QR=function(a){var
c=a[6],d=c[5],b=d[5][5],e=b[3];a[6]=[0,b[1],[13,[21,b[2],[0,e,b[4]]],d[2]],e,c[4],b[5]];return 0},QS=function(a){var
c=a[6],b=c[5],d=b[3],e=c[4];a[6]=[0,b[1],[12,[21,b[2],[0,d,b[4]]],[21,c[2],[0,c[3],e]]],d,e,b[5]];return 0},QT=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},QU=function(a){var
c=a[6],b=c[5][5],d=b[3],e=c[4];a[6]=[0,b[1],[25,[21,b[2],[0,d,b[4]]],[21,c[2],[0,c[3],e]]],d,e,b[5]];return 0},QV=function(a){var
b=a[6],c=b[5],d=b[4],e=c[5],f=c[3],g=c[1];a[6]=[0,g,bA(QX,QW,[21,b[2],[0,b[3],d]]),f,d,e];return 0},QY=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},QZ=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q0=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q1=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q2=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q3=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q4=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q5=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q6=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q7=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q8=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q9=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q_=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3],f=c[4],g=b[5],h=b[1];a[6]=[0,h,bA([21,b[2],[0,e,b[4]]],d[2],[21,c[2],[0,c[3],f]]),e,f,g];return 0},Q$=function(a){var
c=a[6],b=c[5][5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Ra=function(a){var
b=a[6],c=b[2];a[6]=[0,b[1],[0,c,c],b[3],b[4],b[5]];return 0},Rb=function(a){var
c=a[6],b=c[5][5],d=b[3];a[6]=[0,b[1],[0,[21,b[2],[0,d,b[4]]],c[2]],d,c[4],b[5]];return 0},Rc=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,[21,b[2],[0,d,c]],0],d,c,b[5]];return 0},Rd=function(a){var
b=a[2][11];a[6]=[0,a[7],2,b,b,a[6]];return 0},Re=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,b[2],[0,b[3],d]],c[3],d,c[5]];return 0},Rf=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},Rg=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},Rh=function(a){var
b=a[6],c=b[5],d=c[5],e=c[3],f=c[1],g=b[4];a[6]=[0,f,[3,h(cD,b[2])],e,g,d];return 0},Ri=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Rj=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2],0],b[3],b[4],b[5]];return 0},Rk=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Rl=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],0],b[3],c[4],b[5]];return 0},Rm=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Rn=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],0],b[3],c[4],b[5]];return 0},Ro=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Rp=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],0],b[3],c[4],b[5]];return 0},Rq=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Rr=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],0],b[3],c[4],b[5]];return 0},Rs=function(a){var
c=a[6],b=c[5],f=b[5],d=f[5],e=d[5];a[6]=[0,e[1],[0,[0,[3,d[2],[0,d[3],f[3]]],[21,b[2],[0,b[3],b[4]]]],c[2]],e[3],c[4],e[5]];return 0},Rt=function(a){var
b=a[6],e=b[5],c=e[5],d=c[5],f=b[4];a[6]=[0,d[1],[0,[0,[3,c[2],[0,c[3],e[3]]],[21,b[2],[0,b[3],f]]],0],d[3],f,d[5]];return 0},Ru=function(a){var
b=a[6],c=b[5],d=c[5][5];a[6]=[0,d[1],[0,[0,1,[0,c[2],[0,c[3],b[3]]]],b[2]],d[3],b[4],d[5]];return 0},Rv=function(a){var
b=a[6],c=b[5],d=c[5];a[6]=[0,d[1],[0,[0,0,[0,c[2],[0,c[3],b[3]]]],b[2]],d[3],b[4],d[5]];return 0},Rw=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[0,[0,1,[0,b[2],[0,b[3],d]]],0],c[3],d,c[5]];return 0},Rx=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,0,[0,b[2],[0,b[3],d]]],0],c[3],d,c[5]];return 0},Ry=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Rz=function(a){var
b=a[6];a[6]=[0,b[1],2,b[3],b[4],b[5]];return 0},RA=function(a){var
c=a[6],b=c[5][5],d=b[5],e=b[3],f=b[1],g=c[4],i=c[2];a[6]=[0,f,[1,h(cD,b[2]),i],e,g,d];return 0},RB=function(a){var
b=a[6];a[6]=[0,b[1],[0,b[2]],b[3],b[4],b[5]];return 0},RC=function(a){var
c=a[6],b=c[5][5],d=b[5],e=b[3],f=b[2],g=b[1],i=c[4],j=h(jj,c[2]);a[6]=[0,g,[1,h(cD,f),j],e,i,d];return 0},RD=function(a){var
b=a[6],c=b[5],d=b[4],e=b[3],f=b[1];a[6]=[0,f,[0,h(jj,b[2])],e,d,c];return 0},RE=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},RF=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RG=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},RH=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RI=function(a){var
c=a[6],e=c[5],d=e[5],b=d[5];a[6]=[0,b[1],[0,[0,b[2],[0,d[2],[0,d[3],e[3]]]],c[2]],b[3],c[4],b[5]];return 0},RJ=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RK=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},RL=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RM=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},RN=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RO=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},RP=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RQ=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},RR=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},RS=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},RT=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},RU=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,[0,b[3],d],0,[0,b[2],0]]],c[3],d,c[5]];return 0},RV=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,[0,b[3],d],0,[0,b[2],0]]],c[3],d,c[5]];return 0},RW=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,[0,b[3],d],1,b[2]]],c[3],d,c[5]];return 0},RX=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],b[2],b[3],c[4],b[5]];return 0},RY=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},RZ=function(a){var
b=a[6];a[6]=[0,b[1],b[2],b[3],b[4],b[5]];return 0},R0=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,[0,b[3],d],0,[0,b[2],0]]],c[3],d,c[5]];return 0},R1=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,[0,b[3],d],0,[0,b[2],0]]],c[3],d,c[5]];return 0},R2=function(a){var
b=a[6],c=b[5],d=b[4];a[6]=[0,c[1],[0,[0,[0,b[3],d],1,b[2]]],c[3],d,c[5]];return 0},R3=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],b[2],b[3],c[4],b[5]];return 0},R4=function(a){var
c=a[6],d=c[5],b=d[5][5],e=b[5],f=b[3],g=b[1],h=d[2],i=c[4];a[6]=[0,g,[0,eQ(b[2]),h],f,i,e];return 0},R5=function(a){var
b=a[6],c=b[5],d=b[4],e=b[3],f=b[1];a[6]=[0,f,[0,eQ(b[2]),0],e,d,c];return 0},R6=function(a){var
c=a[6],d=c[5],b=d[5][5],e=b[5],f=b[3],g=b[1],h=d[2],i=c[4];a[6]=[0,g,[0,eQ(b[2]),h],f,i,e];return 0},R7=function(a){var
b=a[6],c=b[5],d=b[4],e=b[3],f=b[1];a[6]=[0,f,[0,eQ(b[2]),0],e,d,c];return 0},R8=function(a){var
c=a[6],d=c[5],b=d[5][5],e=b[5],f=b[3],g=b[1],h=d[2],i=c[4];a[6]=[0,g,[0,eQ(b[2]),h],f,i,e];return 0},R9=function(a){var
b=a[6],c=b[5],d=b[4],e=b[3],f=b[1];a[6]=[0,f,[0,eQ(b[2]),0],e,d,c];return 0},R_=function(a){var
b=a[6];a[6]=[0,b[1],3,b[3],b[4],b[5]];return 0},R$=function(a){var
b=a[6];a[6]=[0,b[1],2,b[3],b[4],b[5]];return 0},Sa=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Sb=function(a){var
b=a[6];a[6]=[0,b[1],0,b[3],b[4],b[5]];return 0},Sc=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Sd=function(a){var
b=a[6];a[6]=[0,b[1],2,b[3],b[4],b[5]];return 0},Se=function(a){var
b=a[6];a[6]=[0,b[1],0,b[3],b[4],b[5]];return 0},Sf=function(a){var
b=a[6],c=b[5],e=c[5],f=c[3],g=c[1],h=b[4],d=L(b[2]);if(d){var
i=d[1];a[6]=[0,g,[0,L(d[2]),i],f,h,e];return 0}throw[0,l,Sg]},Sh=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},Si=function(a){var
b=a[2][11];a[6]=[0,a[7],0,b,b,a[6]];return 0},Sj=function(a){var
c=a[6],d=c[5],b=d[5];a[6]=[0,b[1],d[2],b[3],c[4],b[5]];return 0},Sk=function(a){var
b=a[6],d=b[5],c=d[5],e=c[3],f=b[4];a[6]=[0,c[1],[1,[0,[0,e,f],d[2],b[2]]],e,f,c[5]];return 0},Sl=function(a){var
c=a[6],d=c[5],f=d[5],e=f[5],g=e[5],b=g[5],h=b[3];a[6]=[0,b[1],[0,[4,[3,b[2],[0,h,g[3]]],[0,e[2],[0,e[3],f[3]]]],[21,[2,c[2]],[0,d[3],d[4]]]],h,c[4],b[5]];return 0},Sm=function(a){var
b=a[6],c=b[5],d=c[3];a[6]=[0,c[1],[0,[3,c[2],[0,d,b[3]]],b[2]],d,b[4],c[5]];return 0},Sn=function(a){var
b=a[6],e=b[5],d=e[5],f=d[5],c=f[5],g=c[3],h=b[4];a[6]=[0,c[1],[0,[4,[3,c[2],[0,g,f[3]]],[0,d[2],[0,d[3],e[3]]]],[21,b[2],[0,b[3],h]]],g,h,c[5]];return 0},So=function(a){var
b=a[6],d=b[5],c=d[5],e=c[3],f=b[4];a[6]=[0,c[1],[0,[3,c[2],[0,e,d[3]]],[21,b[2],[0,b[3],f]]],e,f,c[5]];return 0},Sp=function(a){var
b=a[6],c=b[5][5],d=b[4],e=c[5],f=c[3],g=c[1],h=[0,b[2],[0,b[3],d]];a[6]=[0,g,D(fm(c[2]),[0,[0,xX,h],0]),f,d,e];return 0},Sq=function(a){var
b=a[6],c=b[5],d=b[4],e=b[3],f=b[1];a[6]=[0,f,fm(b[2]),e,d,c];return 0},Sr=function(a){var
b=a[6],c=b[2];a[6]=[0,b[1],[0,c,[0,c]],b[3],b[4],b[5]];return 0},Ss=function(a){var
b=a[6],c=b[5][5],d=b[4];a[6]=[0,c[1],[0,c[2],[3,b[2],[0,b[3],d]]],c[3],d,c[5]];return 0},St=function(a){var
b=a[6],c=b[2];a[6]=[0,b[1],[0,c,[1,[0,c]]],b[3],b[4],b[5]];return 0},Su=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},Sv=function(a){var
b=a[6],c=b[2];a[6]=[0,b[1],[0,[0,kD,[0,c,[4,[2,[0,c]]]]],0],b[3],b[4],b[5]];return 0},Sw=function(a){var
c=a[6],b=c[5][5];a[6]=[0,b[1],[0,[0,kD,[0,b[2],[4,[2,c[2]]]]],0],b[3],c[4],b[5]];return 0},Sx=function(a){var
b=a[6],c=b[5][5],d=b[4],e=c[5],f=c[3],g=c[2],h=c[1],i=[0,b[2],[0,b[3],d]];a[6]=[0,h,p(function(a){return[0,pC,[0,a,i]]},g),f,d,e];return 0},Sy=function(a){var
b=a[6],c=b[5][5],d=b[4],e=c[5],f=c[3],g=c[2],h=c[1],i=[0,b[2],[0,b[3],d]];a[6]=[0,h,p(function(a){return[0,kD,[0,a,i]]},g),f,d,e];return 0},Sz=function(a){var
c=a[6],e=c[5],f=e[5][5],b=f[5],d=b[5];a[6]=[0,d[1],[0,[0,[0,b[2],1,[0,b[3],b[4]]],f[2]],[0,1,e[2],c[2]]],d[3],c[4],d[5]];return 0},SA=function(a){var
c=a[6],d=c[5],e=d[5][5],b=e[5],f=b[3];a[6]=[0,b[1],[0,[0,[0,b[2],1,[0,f,b[4]]],e[2]],[0,0,d[2],c[2]]],f,c[4],b[5]];return 0},SB=function(a){var
c=a[6],b=c[5];a[6]=[0,b[1],[0,b[2],c[2]],b[3],c[4],b[5]];return 0},SC=function(a){var
c=a[6],d=c[5],b=d[5];a[6]=[0,b[1],d[2],b[3],c[4],b[5]];return 0},SD=function(a){var
b=a[6],c=b[4],d=b[3];a[6]=[0,b[1],[0,b[2],1,[0,d,c]],d,c,b[5]];return 0},SE=function(a){var
b=a[6];a[6]=[0,b[1],2,b[3],b[4],b[5]];return 0},SF=function(a){var
b=a[6];a[6]=[0,b[1],1,b[3],b[4],b[5]];return 0},SG=function(a){var
b=a[6];a[6]=[0,b[1],0,b[3],b[4],b[5]];return 0},SH=function(a){var
c=a[6],d=c[5],b=d[5];a[6]=[0,b[1],d[2],b[3],c[4],b[5]];return 0},SI=function(a){var
b=a[6],g=b[5],d=g[5],h=d[5],e=h[5],f=e[5],c=f[5],i=h[3],j=b[4],k=c[5],l=c[3],m=c[2],n=c[1],o=f[4],p=f[2],q=[21,b[2],[0,b[3],j]],r=[0,d[2],[0,d[3],g[3]]],s=[0,e[2],[0,e[3],i]];a[6]=[0,n,[6,m,[0,aH(function(a,b){return[14,a,b]},p,s),[0,o,i]],r,q],l,j,k];return 0},SJ=function(a){var
c=a[6],d=c[5],e=d[5][5],b=e[5],f=b[3];a[6]=[0,b[1],[0,[0,[0,b[2],d[2],[0,f,b[4]]],e[2]],[1,c[2]]],f,c[4],b[5]];return 0},SK=function(a){var
c=a[6],d=c[5],b=d[5],e=b[3];a[6]=[0,b[1],[0,[0,[0,b[2],1,[0,e,b[4]]],d[2]],[1,c[2]]],e,c[4],b[5]];return 0},SL=function(a){var
c=a[6],d=c[5][5],e=d[5][5],b=e[5],f=b[3],g=c[4];a[6]=[0,b[1],[0,[0,[0,b[2],d[2],[0,f,b[4]]],e[2]],[2,[0,c[2],[0,c[3],g]]]],f,g,b[5]];return 0},SM=function(a){var
c=a[6],d=c[5][5],b=d[5],e=b[3],f=c[4];a[6]=[0,b[1],[0,[0,[0,b[2],1,[0,e,b[4]]],d[2]],[2,[0,c[2],[0,c[3],f]]]],e,f,b[5]];return 0},SN=function(a){throw[0,iN,a[6][2]]},SO=function(a){throw[0,iN,a[6][2]]},SP=[0,function(a){throw[0,iN,a[6][2]]},SO,SN,SM,SL,SK,SJ,SI,SH,SG,SF,SE,SD,SC,SB,SA,Sz,Sy,Sx,Sw,Sv,Su,St,Ss,Sr,Sq,Sp,So,Sn,Sm,Sl,Sk,Sj,Si,Sh,Sf,Se,Sd,Sc,Sb,Sa,R$,R_,R9,R8,R7,R6,R5,R4,R3,R2,R1,R0,RZ,RY,RX,RW,RV,RU,RT,RS,RR,RQ,RP,RO,RN,RM,RL,RK,RJ,RI,RH,RG,RF,RE,RD,RC,RB,RA,Rz,Ry,Rx,Rw,Rv,Ru,Rt,Rs,Rr,Rq,Rp,Ro,Rn,Rm,Rl,Rk,Rj,Ri,Rh,Rg,Rf,Re,Rd,Rc,Rb,Ra,Q$,Q_,Q9,Q8,Q7,Q6,Q5,Q4,Q3,Q2,Q1,Q0,QZ,QY,QV,QU,QT,QS,QR,QQ,QP,QO,QN,QM,QL,QK,QI,QH,QG,QE,QD,QC,QB,QA,Qz,Qy,Qx,Qw,Qv,Qu,Qt,Qs,Qr,Qq,Qp,Qn,Qm,Ql,Qk,Qj,Qi,Qh,Qg,Qf,Qe,Qd,Qc,Qb,Qa,P$,P_,P9,P8,P7,P6,P5,P4,P3,P2,P1,P0,PZ,PY,PX,PW,PV,PU,PT,PS,PQ,PP,PN,PM,PL,PK,PJ,PI,PH,PG,PC,PB,PA,Pz,Py,Px,Pw,Pv,Pu,Pt,Ps,Pr,Pq,Pp,Po,Pn,Pm,Pl,Pk,Pj,Pi,Ph,Pg,Pf,Pe,Pd,Pc,Pb,Pa,O$,O_,O9,O8,O7,O6,O5,O4,O3,O2,O1,O0,OZ,OY,OX,OW,OV,OU,OT,OS,OR,OQ,OP,OO,ON,OM,OL,OK,OJ,OI,OH,OG,OF,OE,OD,OC,OB,OA,Oz,Oy,Ox,Ow,Ov,Ou,Ot,Os,Or,Oq,Op,Oo,On,Om,Ol,Ok,Oj,Oi,Oh,Og,Of,Oe,Od,Oc,Ob,Oa,N$,N_],l1=0,rx=function(a,b,c){var
e=a[2],d=iM(a[1],b),f=0===(d&1)?d>>>1:-(d>>>1)|0;return iM(e,f+c|0)},ry=function(a,b,c,d,e,f,g){var
i=rw(tN[2],hB(tN[1],a)+b|0);if(1===i){var
k=rx(N7,a,b),m=k&3,n=k>>>2;return 2<=m?ej(d,g,2===m?1:0,b,c,n):j(e,g,n)}if(0===i)return h(f,g);throw[0,l,D6]},gF=[0,0],D1=[0,jo],aP=function(a){gF[1]=[0,a,gF[1]];return 0},l0=function(a,b,c){var
u=[];oA(u,[0,a,l1,c[11],c[12],u]);var
U=[0,b,c,h(b,c),dj,dj,u,a];try{aP([0,U,0]);for(;;){if(0===gF[1])throw[0,l,D4];var
q=gF[1];if(q){var
i=q[1];gF[1]=q[2];switch(i[0]){case
1:var
r=i[1];if(-1===r[4])aP([7,r]);else
aP([2,r]);break;case
2:var
s=i[1],f=s[3],G=function(a){return aP([5,a])},H=function(a,b){return aP([4,a,b])},J=function(a,b,c,d,e){return aP([3,a,b,c,d,e])};if(typeof
f===g)switch(f){case
1:var
d=0;break;case
2:var
d=0;break;case
3:var
d=0;break;case
4:var
d=0;break;case
5:var
d=0;break;case
6:var
d=0;break;case
7:var
d=0;break;case
8:var
d=0;break;case
9:var
d=0;break;case
10:var
d=0;break;case
11:var
d=0;break;case
12:var
d=0;break;case
13:var
d=0;break;case
14:var
d=0;break;case
15:var
d=0;break;case
16:var
d=0;break;case
17:var
d=0;break;case
18:var
d=0;break;case
19:var
d=0;break;case
20:var
d=0;break;case
21:var
d=0;break;case
22:var
d=0;break;case
23:var
d=0;break;case
24:var
d=0;break;case
25:var
d=0;break;case
26:var
d=0;break;case
27:var
d=0;break;case
28:var
d=0;break;case
29:var
d=0;break;case
30:var
d=0;break;case
31:var
d=0;break;case
32:var
d=0;break;case
33:var
d=0;break;case
34:var
d=0;break;case
35:var
d=0;break;case
36:var
d=0;break;case
37:var
d=0;break;case
38:var
d=0;break;case
39:var
d=0;break;case
40:var
d=0;break;case
41:var
d=0;break;case
42:var
d=0;break;case
43:var
d=0;break;case
44:var
d=0;break;case
45:var
d=0;break;case
46:var
d=0;break;case
47:var
d=0;break;case
48:var
d=0;break;case
49:var
d=0;break;case
50:var
d=0;break;case
51:var
d=0;break;case
52:var
d=0;break;case
53:var
d=0;break;case
54:var
d=0;break;case
55:var
d=0;break;case
56:var
d=0;break;case
57:var
d=0;break;case
58:var
d=0;break;case
59:var
d=0;break;case
60:var
d=0;break;case
61:var
d=0;break;case
62:var
d=0;break;case
63:var
d=0;break;case
64:var
d=0;break;case
65:var
d=0;break;case
66:var
d=0;break;case
67:var
d=0;break;case
68:var
d=0;break;default:var
d=0}else
switch(f[0]){case
1:var
d=f[1];break;case
2:var
d=f[1];break;case
3:var
d=f[1];break;case
4:var
d=f[1];break;case
5:var
d=f[1];break;case
6:var
d=f[1];break;case
7:var
d=f[1];break;case
8:var
d=f[1];break;case
9:var
d=f[1];break;case
10:var
d=f[1];break;case
11:var
d=f[1];break;case
12:var
d=f[1];break;case
13:var
d=f[1];break;case
14:var
d=f[1];break;case
15:var
d=f[1];break;case
16:var
d=f[1];break;default:var
d=f[1]}if(typeof
f===g)switch(f){case
1:var
e=2;break;case
2:var
e=3;break;case
3:var
e=4;break;case
4:var
e=5;break;case
5:var
e=6;break;case
6:var
e=7;break;case
7:var
e=9;break;case
8:var
e=10;break;case
9:var
e=11;break;case
10:var
e=12;break;case
11:var
e=13;break;case
12:var
e=14;break;case
13:var
e=16;break;case
14:var
e=17;break;case
15:var
e=18;break;case
16:var
e=19;break;case
17:var
e=20;break;case
18:var
e=21;break;case
19:var
e=23;break;case
20:var
e=24;break;case
21:var
e=25;break;case
22:var
e=35;break;case
23:var
e=36;break;case
24:var
e=38;break;case
25:var
e=39;break;case
26:var
e=41;break;case
27:var
e=42;break;case
28:var
e=43;break;case
29:var
e=44;break;case
30:var
e=46;break;case
31:var
e=47;break;case
32:var
e=48;break;case
33:var
e=49;break;case
34:var
e=50;break;case
35:var
e=51;break;case
36:var
e=52;break;case
37:var
e=53;break;case
38:var
e=54;break;case
39:var
e=55;break;case
40:var
e=56;break;case
41:var
e=58;break;case
42:var
e=59;break;case
43:var
e=60;break;case
44:var
e=61;break;case
45:var
e=62;break;case
46:var
e=63;break;case
47:var
e=64;break;case
48:var
e=65;break;case
49:var
e=66;break;case
50:var
e=67;break;case
51:var
e=68;break;case
52:var
e=69;break;case
53:var
e=70;break;case
54:var
e=72;break;case
55:var
e=73;break;case
56:var
e=74;break;case
57:var
e=75;break;case
58:var
e=76;break;case
59:var
e=77;break;case
60:var
e=78;break;case
61:var
e=79;break;case
62:var
e=80;break;case
63:var
e=81;break;case
64:var
e=82;break;case
65:var
e=83;break;case
66:var
e=84;break;case
67:var
e=85;break;case
68:var
e=86;break;default:var
e=1}else
switch(f[0]){case
1:var
e=15;break;case
2:var
e=22;break;case
3:var
e=26;break;case
4:var
e=27;break;case
5:var
e=28;break;case
6:var
e=29;break;case
7:var
e=30;break;case
8:var
e=31;break;case
9:var
e=32;break;case
10:var
e=33;break;case
11:var
e=34;break;case
12:var
e=37;break;case
13:var
e=40;break;case
14:var
e=45;break;case
15:var
e=57;break;case
16:var
e=71;break;default:var
e=8}ry(s[7],e,d,J,H,G,s);break;case
3:var
k=i[1],w=k[2],K=i[5],L=i[2];k[6]=[0,k[7],i[4],w[11],w[12],k[6]];k[7]=K;aP([0,k,L]);break;case
4:var
x=i[2],n=i[1];try{h(I(SP,x),n);var
N=1,y=N}catch(f){f=m(f);if(f[1]!==jo)throw f;var
y=0}if(y){var
M=n[6][1];n[7]=rx(N9,M,iM(N8,x))-1|0;aP([0,n,0])}else
aP([6,n]);break;case
5:var
z=i[1];if(!(0<=z[4]))throw[0,l,D2];aP([6,z]);break;case
6:var
o=i[1];o[5]=o[4];o[4]=-1;aP([7,o]);break;case
7:var
A=i[1],O=function(a){return aP([10,a])},P=function(a,b){return aP([9,a,b])},Q=function(a,b,c,d,e){return aP([8,a,b,c,d,e])};ry(A[7],tM,l1,Q,P,O,A);break;case
8:var
B=i[4],C=i[3],R=i[5],S=i[2],T=i[1],V=av(C,tM)?av(B,l1)?(aP([3,T,S,C,B,R]),1):0:0;if(!V)throw[0,l,D3];break;case
9:aP([4,i[1],i[2]]);break;case
10:var
p=i[1],t=p[6],D=t[5];if(D===t)throw D1;p[6]=D;p[7]=t[1];aP([7,p]);break;default:var
j=i[1],F=j[7];if(i[2]){j[3]=h(j[1],j[2]);var
v=j[4]+1|0;if(0<=v)j[4]=v}var
E=iM(N6,F);if(0===E)aP([1,j]);else
aP([4,j,E-1|0])}}continue}}catch(f){f=m(f);if(f[1]===iN)return f[2];throw f}},SQ=function(a,b){return l0(517,a,b)},SR=function(a,b){return l0(499,a,b)},SS=function(a,b){return l0(0,a,b)},aE=function(a){return 32<a?em<a?-1:SY.safeGet(a+hT|0)-1|0:-1},tO=function(a){return 47<a?57<a?-1:SW.safeGet(a+ax|0)-1|0:-1},tP=function(a){return 32<a?em<a?-1:S0.safeGet(a+hT|0)-1|0:-1},tQ=function(a){return 8<a?32<a?-1:S9.safeGet(a-9|0)-1|0:-1},eR=function(a){return 38<a?gg<a?-1:S3.safeGet(a+ki|0)-1|0:-1},tR=function(a){return 41<a?42<a?-1:m_.safeGet(a+yC|0)-1|0:-1},m$=function(a){return 38<a?gg<a?-1:S5.safeGet(a+ki|0)-1|0:-1},tS=aq(0,13);M(function(a){return c1(tS,a[1],a[2])},ST);var
tT=[0,S_],jp=[0,1],na=[0,0],tU=function(a){return[0,tT[1],jp[1],na[1],a]},g4=function(a){return tU(a[6]+a[4]|0)},g5=function(a){return tU(iP(a))},U=function(a,b){var
c=g5(a);return[0,b,g4(a),c]},tV=function(a){jp[1]=jp[1]+1|0;na[1]=iP(a);return 0},aI=function(a,b){var
d=b[2],c=b[1],f=c[1],e=c[2],g=d[2],h=c[4]-c[3]|0,i=d[4]-d[3]|0;return e===g?ej(am(a),S$,f,e,h,i):a1(am(a),Ta,f,e,h,g,i)},nb=function(a,b){var
c=g4(b);return aI(a,[0,c,g5(b)])},jq=function(a,b){var
j=b[1],r=b[2],d=kQ(j[1]);ah3(d,j[3]);var
e=aw(cc),f=aw(cc),l=[0,j[3]];try{for(;;){if(l[1]<r[4]){var
i=w3(d);if(10===i){Q(e,i);Q(f,i);ip(a,e);ip(a,f);gt(e);gt(f)}else{Q(e,i);if(j[4]<=l[1])Q(f,94);else
Q(f,32)}l[1]++;continue}var
o=function(a,b,c){var
e=b,d=c;for(;;){if(d){var
g=d[1],f=g.getLen(),h=d[2];cR(g,0,a,e-f|0,f);var
e=e-f|0,d=h;continue}return a}},g=0,h=0;for(;;){var
c=ahY(d);if(0===c){if(!g)throw[0,cX];var
n=o(ae(h),h,g)}else{if(!(0<c)){var
q=ae(-c|0);j_(d,q,0,-c|0);var
g=[0,q,g],h=h-c|0;continue}var
k=ae(c-1|0);j_(d,k,0,c-1|0);w3(d);if(g)var
p=(h+c|0)-1|0,n=o(ae(p),p,[0,k,g]);else
var
n=k}aW(e,n);break}break}}catch(f){f=m(f);if(f[1]!==cX)throw f;fj(d)}Q(e,10);Q(f,10);ip(a,e);return ip(a,f)},nc=function(a,b){var
c=W(a[1],b[1]),d=c?a[4]<=b[4]?1:0:c;return d},tW=function(a,b){var
d=b[2],e=a[2],c=nc(b[1],a[1]);return c?nc(e,d):c},tX=function(a,b){return tW(a,b)?-1:tW(b,a)?1:av(a[1],b[1])?0:nc(a[1],b[1])?-1:1},tY=[0,Tb],nd=function(a){throw[0,tY,a]},Tc=function(a,b){var
c=b[2],d=b[1];if(typeof
c===g)return k(am(a),Td,nb,d);else{if(0===c[0]){var
e=c[1];return k(am(a),Te,aI,e)}var
f=c[1];return A(am(a),Tf,nb,d,f)}},tZ=function(a){a:for(;;){var
k=function(a){for(;;){K(a,30);if(0===aE(d(a)))continue;return e(a)}},F=function(a){for(;;){K(a,38);if(0===aE(d(a)))continue;return e(a)}},n=function(a){for(;;){K(a,36);if(0===aE(d(a)))continue;return e(a)}},i=function(a){for(;;){K(a,33);if(0===aE(d(a)))continue;return e(a)}},G=function(a){for(;;){K(a,35);if(0===aE(d(a)))continue;return e(a)}},H=function(a){for(;;){K(a,41);if(0===m$(d(a)))continue;return e(a)}},I=function(a){for(;;){K(a,40);if(0===m$(d(a)))continue;return e(a)}},c=function(a){for(;;){K(a,40);if(0===m$(d(a)))continue;return e(a)}},j=function(c){return function(a){for(;;){K(a,40);var
b=eR(d(a));if(0===b)return c(a);if(1===b)continue;return e(a)}}}(c);rA(a);var
f=d(a),p=gg<f?8658<f?8727<f?1:8726<f?36:1:8594<f?8657<f?35:1:8593<f?34:1:S8.safeGet(f+1|0)-1|0;if(p<0||36<p)var
b=e(a);else
switch(p){case
1:var
b=43;break;case
2:K(a,1);if(0===tQ(d(a)))for(;;){K(a,1);if(0===tQ(d(a)))continue;var
b=e(a);break}else
var
b=e(a);break;case
3:var
b=0;break;case
4:K(a,30);var
q=d(a),J=32<q?em<q?-1:S1.safeGet(q+hT|0)-1|0:-1,b=0===J?k(a):1===J?(K(a,12),0===aE(d(a))?k(a):e(a)):e(a);break;case
5:K(a,34);if(0===aE(d(a)))for(;;){K(a,34);if(0===aE(d(a)))continue;var
b=e(a);break}else
var
b=e(a);break;case
6:K(a,38);var
b=0===aE(d(a))?F(a):e(a);break;case
7:K(a,32);if(0===aE(d(a)))for(;;){K(a,32);if(0===aE(d(a)))continue;var
b=e(a);break}else
var
b=e(a);break;case
8:K(a,28);var
b=0===tR(d(a))?2:e(a);break;case
9:var
b=29;break;case
10:K(a,22);var
r=d(a),s=32<r?em<r?-1:SV.safeGet(r+hT|0)-1|0:-1;if(s<0||2<s)var
b=e(a);else
switch(s){case
1:var
b=3;break;case
2:for(;;){K(a,37);if(0===aE(d(a)))continue;var
b=e(a);break}break;default:var
b=F(a)}break;case
11:K(a,21);var
b=0===aE(d(a))?n(a):e(a);break;case
12:var
b=14;break;case
13:K(a,20);var
L=tP(d(a)),b=0===L?n(a):1===L?(K(a,10),0===aE(d(a))?n(a):e(a)):e(a);break;case
14:var
b=13;break;case
15:K(a,39);if(0===tO(d(a)))for(;;){K(a,39);if(0===tO(d(a)))continue;var
b=e(a);break}else
var
b=e(a);break;case
16:K(a,15);var
t=d(a),M=57<t?61<t?-1:S6.safeGet(t-58|0)-1|0:-1,b=0===M?9:1===M?8:e(a);break;case
17:var
b=16;break;case
18:K(a,33);var
u=d(a),N=32<u?em<u?-1:SZ.safeGet(u+hT|0)-1|0:-1,b=0===N?i(a):1===N?(K(a,7),0===aE(d(a))?i(a):e(a)):e(a);break;case
19:K(a,23);var
O=tP(d(a)),b=0===O?i(a):1===O?(K(a,11),0===aE(d(a))?i(a):e(a)):e(a);break;case
20:K(a,33);var
b=0===aE(d(a))?i(a):e(a);break;case
21:K(a,30);var
b=0===aE(d(a))?k(a):e(a);break;case
22:K(a,19);var
b=0===aE(d(a))?G(a):e(a);break;case
23:K(a,41);var
P=eR(d(a));if(0===P)var
b=H(a);else
if(1===P)for(;;){K(a,41);var
Q=eR(d(a));if(0===Q)var
b=H(a);else{if(1===Q)continue;var
b=e(a)}break}else
var
b=e(a);break;case
24:var
b=24;break;case
25:var
b=25;break;case
26:K(a,35);var
b=0===aE(d(a))?G(a):e(a);break;case
27:K(a,18);var
R=eR(d(a));if(0===R)var
b=I(a);else
if(1===R)for(;;){K(a,40);var
S=eR(d(a));if(0===S)var
b=I(a);else{if(1===S)continue;var
b=e(a)}break}else
var
b=e(a);break;case
28:K(a,40);var
T=eR(d(a)),b=0===T?c(a):1===T?j(a):e(a);break;case
29:K(a,40);var
v=d(a),w=38<v?gg<v?-1:S2.safeGet(v+ki|0)-1|0:-1;if(w<0||2<w)var
b=e(a);else
switch(w){case
1:var
b=j(a);break;case
2:K(a,40);var
x=d(a),y=38<x?gg<x?-1:S4.safeGet(x+ki|0)-1|0:-1;if(y<0||2<y)var
b=e(a);else
switch(y){case
1:var
b=j(a);break;case
2:K(a,40);var
z=d(a),A=8<z?gg<z?-1:S7.safeGet(z-9|0)-1|0:-1;if(A<0||2<A)var
b=e(a);else
switch(A){case
1:var
b=c(a);break;case
2:var
b=j(a);break;default:for(;;){var
B=d(a),V=8<B?ek<B?-1:SU.safeGet(B-9|0)-1|0:-1;if(0===V)continue;if(1===V)var
C=d(a),$=hO<C?ge<C?-1:m_.safeGet(C-102|0)-1|0:-1,b=0===$?6:e(a);else
var
b=e(a);break}}break;default:var
b=c(a)}break;default:var
b=c(a)}break;case
30:var
b=26;break;case
31:K(a,17);if(0===aE(d(a)))for(;;){K(a,31);if(0===aE(d(a)))continue;var
b=e(a);break}else
var
b=e(a);break;case
32:var
b=27;break;case
33:K(a,4);var
W=eR(d(a)),b=0===W?c(a):1===W?j(a):e(a);break;case
34:var
b=10;break;case
35:var
b=11;break;case
36:var
b=5;break;default:var
b=42}if(b<0||43<b)throw[0,iO];switch(b){case
1:continue;case
2:var
aa=g5(a),h=[0,[0,g4(a),aa],0];for(;;){rA(a);var
Z=d(a),D=42<Z?1:SX.safeGet(Z+1|0)-1|0;if(D<0||4<D)var
g=e(a);else
switch(D){case
1:var
g=4;break;case
2:var
g=2;break;case
3:K(a,4);var
g=0===tR(d(a))?0:e(a);break;case
4:K(a,4);var
E=d(a),ac=40<E?41<E?-1:m_.safeGet(E-41|0)-1|0:-1,g=0===ac?1:e(a);break;default:var
g=3}if(g<0||4<g)throw[0,iO];switch(g){case
1:if(h){var
_=h[2];if(_){var
h=_;continue}continue a}throw[0,l,Tg];case
2:tV(a);continue;case
3:if(h)return nd([0,h[1]]);throw[0,l,Th];case
4:continue;default:var
ad=g5(a),h=[0,[0,g4(a),ad],h];continue}}case
3:return nd(0);case
4:return U(a,33);case
5:return U(a,7);case
6:return U(a,12);case
7:return U(a,29);case
8:return U(a,[16,aQ(a)]);case
9:return U(a,54);case
10:return U(a,63);case
11:return U(a,50);case
12:return U(a,[9,aQ(a)]);case
13:return U(a,48);case
14:return U(a,53);case
15:return U(a,55);case
16:return U(a,13);case
17:return U(a,59);case
18:return U(a,6);case
19:return U(a,60);case
20:return U(a,[12,aQ(a)]);case
21:return U(a,[2,aQ(a)]);case
22:return U(a,[1,aQ(a)]);case
23:return U(a,[15,aQ(a)]);case
24:return U(a,27);case
25:return U(a,16);case
26:return U(a,28);case
27:return U(a,17);case
28:return U(a,25);case
29:return U(a,14);case
30:return U(a,[3,aQ(a)]);case
31:return U(a,[11,aQ(a)]);case
32:return U(a,[10,aQ(a)]);case
33:return U(a,[9,aQ(a)]);case
34:return U(a,[8,aQ(a)]);case
35:return U(a,[7,aQ(a)]);case
36:return U(a,[6,aQ(a)]);case
37:return U(a,[4,aQ(a)]);case
38:return U(a,[5,aQ(a)]);case
39:return U(a,[14,de(aQ(a))]);case
40:var
X=aQ(a);try{var
ab=bR(tS,X),Y=ab}catch(f){f=m(f);if(f[1]!==o)throw f;var
Y=[13,X]}return U(a,Y);case
41:return U(a,[0,aQ(a)]);case
42:return U(a,41);case
43:return nd([1,aQ(a)]);default:tV(a);continue}}};h(_,Ti);h(cD,Tj);h(_,Tk);h(_,Tl);var
Tm=aq(0,149);M(function(a){return c1(Tm,a,0)},Tn);var
aF=[0,P,P,P,P,P,P],ne=function(a){aF[1]=eJ(MY,0);aF[2]=eJ(bj,0);aF[3]=eJ(MX,0);aF[4]=eJ(d5,0);aF[5]=eJ(aC,0);aF[6]=eJ(MW,0);return 0},nf=function(a){aF[1]=P;aF[2]=P;aF[3]=P;aF[4]=P;aF[5]=P;aF[6]=P;return 0};try{var
aiH=O(e7(ags),agr)?aiD(1)?(ne(0),1):0:0}catch(f){f=m(f);if(f[1]!==o)throw f}var
t0=n(To),Tq=n(Tp);iW(iU);var
Tr=iW(a5),jr=i(du,T(1)),js=i(iU,T(1)),t1=n(Ts),Tu=n(Tt),t2=function(a){var
b=t3.safeGet(1);return tr(a,function(a){var
c=aK(b+a|0),d=t3.safeGet(0);return j(E(Tv),d,c)})},bB=function(a,b){var
c=a?a[1]:2;return dt(aY(c,i(T(1),b)))},Tx=n(Tw),Tz=n(Ty),af=function(a,b){return A(rD,1,mD,a,h(b[1],b[2]))},ng=function(a){return l7(2,0,dZ,a,d0)},nh=function(a){return l7(2,1,iS,a,iT)},t4=function(a){return a<0||1<a?TC:TD},TE=i(du,T(1)),ni=function(d,b){return iX(function(a,b,c){return 0===a?h(d,c):i(b,dt(i(TE,h(d,c))))},P,b)},t5=function(a,b,c,d){var
e=aY(2,iY(function(a){var
b=h(c,a);return i(T(1),b)},d));return dt(i(h(a,b),e))},jt=function(e){var
a=[0,dy[1],e[2][1]];function
f(a,b){return j(e[2][3],a,b)}function
d(a,b){return f(a,b[2])}function
b(a,b,c){var
d=k(e[2][4],a,b,c[2]);return[0,c[1],d]}function
c(a,b,c){try{var
n=j(dy[3],a,c[1]),d=n}catch(f){f=m(f);if(f[1]!==o)throw f;var
g=h(e[1],b),i=h(bY,a),l=h(bY,a),d=k(F(TF),l,i,g)}return f(b,d)}function
l(a,b){return 0===a[0]?d(a[1],b):c(a[1],a[2],b)}function
p(a,b){if(j(dy[8],a,b[1]))return b;var
c=b[2];return[0,k(dy[4],a,e[2][1],b[1]),c]}function
g(a,b,c,d){try{var
q=j(dy[3],a,d[1]),g=q}catch(f){f=m(f);if(f[1]!==o)throw f;var
g=e[2][1]}var
f=h(e[1],b),i=h(bY,a);j(an(1-j(e[2][8],b,g),TG),i,f);var
l=d[2],n=d[1],p=k(e[2][4],b,c,g);return[0,k(dy[4],a,p,n),l]}function
q(a,b,c){try{var
f=d(b,c),i=f}catch(f){f=m(f);if(f[1]!==o)throw f;var
j=h(e[1],b),i=h(F(TH),j)}return g(a,b,i,c)}function
r(a,b){try{var
i=j(dy[3],a,b[1]),c=i}catch(f){f=m(f);if(f[1]!==o)throw f;var
d=h(bY,a),g=h(bY,a),c=j(F(TI),g,d)}var
f=j(e[2][17],b[2],c);return[0,b[1],f]}function
s(a){return[0,a[1],e[2][1]]}function
t(a){var
b=h(e[2][27],a[2]);return h(e[2][26][15],b)}return[0,a,d,b,c,g,l,q,p,r,s,t,function(g,b){var
c=b[1],d=b[2],f=h(cD,TJ),j=k(dy[4],f,d,c);function
a(a,b,c){function
d(a,b,c){var
d=h(g,b);return i(c,i(gG(i(n(h(e[1],a)),a5),d),a_))}var
f=k(e[2][20],d,b,P);return i(c,i(gG(i(n(h(bY,a)),a5),f),a_))}return k(dy[20],a,j,P)}]},eS=jt([0,ak,cC]),d9=jt([0,cj,to]),t8=[0,TK,-1,0,cC[1],1],nk=function(a){return[1,[0,t8,0,a]]},ju=function(c,b){if(5<=c)return n(TL);switch(b[0]){case
0:return h(fD,b[1]);case
1:var
d=b[1],a=d[1];if(t8===a){var
g=pZ(d[3]),j=a$(js,function(a){return ju(c,a)},g),f=n(TA);return l7(2,1,n(TB),j,f)}var
l=0,m=a[4],o=function(a,b,c){var
e=I(d[3],b);return[0,[0,b,h(ak,a),e],c]},p=k(cC[20],o,m,l),e=dQ(function(a,b){return ga(a[1],b[1])},p);if(e){var
q=i(t,nh(a$(js,function(a){var
b=a[2],d=ju(c+1|0,a[3]),e=i(t,bV);return gG(i(bi(b),e),d)},e)));return i(bi(a[1]),q)}return bi(a[1]);case
2:var
r=b[1];return ng(a$(jr,function(a){return ju(c,a)},r));default:return n(TM)}},t9=function(a){var
c=ju(0,a),b=aw(h6);A(rD,0.95,mD,b,c);return aO(b)},t_=[0,eS[1],d9[1]],nl=function(a,b){try{var
c=j(d9[6],a[1],b[2])}catch(f){f=m(f);if(f[1]===o)throw[0,l,TN];throw f}return c},t$=function(a,b,c){var
d=c[2];return[0,k(eS[3],a,b,c[1]),d]},TP=h(cD,TO),ua=function(a,b){try{var
e=k(d9[4],TP,a,b[2]),c=e}catch(f){f=m(f);if(f[1]!==o)throw f;var
d=h(cj,a),c=h(F(TQ),d)}return[1,[0,c,0,[0]]]},TS=h(jj,TR),ub=function(a){return ua(TS,a)},TU=h(jj,TT),uc=function(a){return ua(TU,a)},eT=function(a,b){return b?uc(a):ub(a)},cm=function(a){if(0===a[0])return a[1];throw[0,l,TV]},bm=function(a){if(1===a[0])return a[1];throw[0,l,TW]},jv=function(a){if(2===a[0])return a[1];throw[0,l,TX]},g6=function(a,b,c){var
d=jv(c);if(d){var
e=d[2];if(e)if(!e[2]){var
f=d[1],g=h(b,e[1]);return[0,h(a,f),g]}}throw[0,l,TY]},ud=function(a,b,c,d){var
e=jv(d);if(e){var
f=e[2];if(f){var
g=f[2];if(g)if(!g[2]){var
i=f[1],j=e[1],k=h(c,g[1]),m=h(b,i);return[0,h(a,j),m,k]}}}throw[0,l,TZ]},d_=function(a){return bm(a)[3]},ue=function(a){return a},cG=function(a){return g6(cm,cm,a)},nm=function(a,b){try{var
c=j(cC[3],a,b)}catch(f){f=m(f);if(f[1]===o)throw[0,l,Uq];throw f}return c},uf=function(a,b){return nm(a,b[4])},nn=[0,Ur],g7=function(a,b,c){var
e=a,d=b;for(;;){if(typeof
d===g)return e;else
switch(d[0]){case
1:var
k=d[1];try{var
n=bf(g7,e,k,jv(c))}catch(f){f=m(f);if(f[1]===di)throw[0,l,Us];throw f}return n;case
2:var
i=d[1],o=i[2],p=i[1],f=bm(c),h=nl(p,e);if(h===f[1]){var
q=f[3];return w(function(a,b){var
c=b[2];return g7(a,c,I(q,nm(b[1],h[4])))},e,o)}if(h[3]!==f[1][3])throw[0,nn];throw[0,l,Ut];case
3:var
j=d[1];break;case
4:var
j=d[1];break;case
5:var
r=d[2],e=g7(e,d[1],c),d=[0,r];continue;default:return t$(d[1],c,e)}var
d=j;continue}},no=function(a,b,c){try{var
d=g7(a,b,c)}catch(f){f=m(f);if(f[1]===nn)throw[0,l,Uu];throw f}return d},ay=function(a,b,c){var
e=a,h=b,d=c;a:for(;;){if(typeof
d===g)return j(F(Uw),aI,h);else
switch(d[0]){case
0:var
d=d[1];continue;case
1:var
aR=d[1];try{var
aS=j(eS[6],aR,e[1])}catch(f){f=m(f);if(f[1]===o)throw[0,l,Ux];throw f}return aS;case
2:var
an=d[1];return O(an,Uy)?[4,an]:[0,ij];case
3:var
aT=d[3],e=ug(e,[0,h,d[1],d[2]]),d=aT;continue;case
4:var
ao=d[2];break;case
5:var
ao=d[2];break;case
6:var
aU=d[4];return[3,[0,d8(d[2]),aU,e]];case
7:var
aV=d[3],aW=d[2],ap=bm(ay(e,h,d[1])),aX=ay(e,h,aV),aY=uf(aW[1],ap[1]);B(ap[3],aY,aX);return cF;case
8:var
aZ=d[2],a0=bm(ay(e,h,d[1]));a0[1]=nl(aZ,e);return cF;case
9:var
a1=d[2],aq=bm(ay(e,h,d[1])),a2=uf(a1[1],aq[1]);return I(aq[3],a2);case
12:var
a3=d[2],K=ay(e,h,d[1]),i=ay(e,h,a3);switch(K[0]){case
3:var
L=K[1],a4=L[2],e=no(L[3],L[1],i),d=a4;continue;case
4:var
f=K[1];if(O(f,T1)){if(O(f,T2)){if(O(f,T3)){if(O(f,T4)){if(!O(f,T5))return[0,d_(i).length-1];if(O(f,T6)){if(!O(f,T7)){var
y=jv(i);if(y){var
z=y[2];if(z){var
C=z[2];if(C){var
D=C[2];if(D){var
E=D[2];if(E)if(!E[2]){var
aD=D[1],aE=C[1],aF=z[1],aG=y[1],aH=cm(E[1]),aJ=cm(aD),aK=d_(aE),aL=cm(aF);fk(d_(aG),aL,aK,aJ,aH);return cF}}}}}throw[0,l,T0]}if(O(f,T8)){if(O(f,T9)){if(O(f,T_)){if(O(f,T$)){if(O(f,Ua)){if(O(f,Ub)){if(O(f,Uc)){if(O(f,Ud)){if(O(f,Ue)){if(O(f,Uf)){if(O(f,Ug)){if(O(f,Uh)){if(O(f,Ui)){if(O(f,Uj))return O(f,Uk)?O(f,Ul)?k(F(Um),aI,h,f):(gq(t9(i)),cF):i;var
T=cG(i);return[0,T[1]-T[2]|0]}var
U=cG(i);return eT(e,U[1]!==U[2]?1:0)}var
V=cG(i);return[0,hB(V[1],V[2])]}var
W=cG(i);return eT(e,W[1]<W[2]?1:0)}var
X=cG(i);return eT(e,X[1]<=X[2]?1:0)}var
Y=cG(i);return eT(e,Y[2]<Y[1]?1:0)}var
Z=cG(i);return eT(e,Z[2]<=Z[1]?1:0)}var
_=cG(i);return eT(e,_[1]===_[2]?1:0)}var
aa=cG(i);return[0,oz(aa[1],aa[2])]}var
ab=cG(i);return[0,ab[1]&ab[2]]}var
ac=cG(i);return[0,ac[1]+ac[2]|0]}var
G=ud(d_,cm,cm,i);return nk(pY(G[1],G[2],G[3]))}var
Q=1}else
var
Q=0}else
var
Q=1;if(Q){var
H=ud(d_,cm,ue,i),ad=H[2],ae=H[1],aM=H[3];try{B(ae,ad,aM)}catch(f){f=m(f);if(f[1]===di)return A(F(Un),aI,h,ad,ae.length-1);throw f}return cF}}var
af=g6(d_,cm,i),ag=af[2],ah=af[1];try{var
aN=I(ah,ag)}catch(f){f=m(f);if(f[1]===di)return A(F(Uo),aI,h,ag,ah.length-1);throw f}return aN}var
ai=g6(cm,ue,i),aj=ai[1],aO=ai[2];try{var
aP=nk($(aj,aO))}catch(f){f=m(f);if(f[1]===di)return k(F(Up),aI,h,aj);throw f}return aP}var
ak=g6(d_,d_,i),r=ak[2],J=ak[1],S=J.length-1;if(0===S)var
R=r.length-1,aC=0===R?[0]:ov(r,0,R),al=aC;else
var
al=0===r.length-1?ov(J,0,S):ahf(J,r);return nk(al)}var
am=g6(bm,bm,i);return eT(e,am[1]===am[2]?1:0);default:throw[0,l,Uz]}case
13:var
d=d[1];continue;case
14:var
a5=d[3],ar=ay(e,h,d[2]),x=a5;for(;;){if(x){var
aB=x[1],bt=x[2],bu=aB[2],bv=aB[1];try{var
aQ=[0,g7(e,bv,ar)],P=aQ}catch(f){f=m(f);if(f[1]!==nn)throw f;var
P=0}if(P){var
e=P[1],d=bu;continue a}var
x=bt;continue}var
bw=t9(ar);return k(F(UC),aI,h,bw)}case
15:var
a6=d[1];return[2,p(function(a){return ay(e,h,a)},a6)];case
16:var
as=d[1],a7=as[2],a8=as[1],a9=p(function(a){var
b=a[1];return[0,b,ay(e,h,a[2])]},a7),N=nl(a8,e),at=$(N[2],cF);M(function(a){var
b=a[2];return B(at,nm(a[1],N[4]),b)},a9);return[1,[0,N,0,at]];case
17:var
a_=d[4],a$=d[3],ba=0<bm(ay(e,h,d[2]))[1][3]?a$:a_,d=ba;continue;case
18:var
bb=d[3],bc=d[2];for(;;){if(0<bm(ay(e,h,bc))[1][3]){ay(e,h,bb);continue}return cF}case
19:var
bd=d[6],be=d[4],bf=d[3],bg=d[2][1],q=cm(ay(e,h,d[5])),n=cm(ay(e,h,bf)),s=function(a){ay(no(e,[0,bg],[0,a]),h,bd);return 0};switch(be){case
1:if(!(n<q)){var
u=n;for(;;){s(u);var
bi=u-1|0;if(q!==u){var
u=bi;continue}break}}break;case
2:var
au=q-1|0;if(!(au<n)){var
v=n;for(;;){s(v);var
bj=v+1|0;if(au!==v){var
v=bj;continue}break}}break;case
3:var
av=q+1|0;if(!(n<av)){var
w=n;for(;;){s(w);var
bk=w-1|0;if(av!==w){var
w=bk;continue}break}}break;default:if(!(q<n)){var
t=n;for(;;){s(t);var
bh=t+1|0;if(q!==t){var
t=bh;continue}break}}}return cF;case
20:var
bl=d[2];ay(e,h,d[1]);var
d=bl;continue;case
21:var
h=d[2],d=d[1];continue;case
22:return[0,d[1]];case
23:var
bn=d[2],aw=bm(ay(e,h,d[1])),bo=bm(ay(e,h,bn));if(0===aw[2]){aw[2]=[0,bo];return cF}throw[0,l,UA];case
24:var
bp=d[2],ax=bm(ay(e,h,d[1])),bq=bm(ay(e,h,bp)),az=ax[2];if(az)if(az[1]===bq){ax[2]=0;return cF}return j(F(UB),aI,h);case
25:var
br=d[2],bs=bm(ay(e,h,d[1])),aA=bm(ay(e,h,br))[2];if(aA)if(aA[1]===bs)return uc(e);return ub(e);default:return cF}var
d=ao;continue}},ug=function(c,b){var
a=b[3],f=b[1];if(0===b[2])return w(function(a,b){var
d=b[1];return no(a,d,ay(c,f,b[2]))},c,a);var
d=w(Uv,[0,c,0],a),e=d[1],g=d[2];M(function(a){a[3]=e;return 0},g);return e},Uv=function(a,b){var
e=b;for(;;){var
c=e[2],d=e[1],j=a[2],k=a[1];if(typeof
d===g)var
f=0;else
switch(d[0]){case
0:var
m=d[1];if(typeof
c===g)var
h=1;else
switch(c[0]){case
6:var
n=c[4],i=[0,d8(c[2]),n,t_];return[0,t$(m,[3,i],k),[0,i,j]];case
21:var
f=0,h=0;break;default:var
h=1}if(h)var
f=1;break;case
3:var
e=[0,d[1],c];continue;default:var
f=0}if(!f)if(typeof
c!==g)if(21===c[0]){var
e=[0,d,c[1]];continue}throw[0,l,UD]}},UF=function(a,b){switch(b[0]){case
1:return ug(a,b[1]);case
2:throw[0,l,UG];case
3:var
c=b[1],d=j(d9[9],c,a[2]);return[0,j(eS[9],c,a[1]),d];default:var
e=b[1][3];return w(function(a,b){var
c=b[2];if(0===c[0]){var
e=c[2],s=c[1],d=[0,0,a];return w(function(a,b){var
c=a[2],d=a[1],j=b[1],e=g1(b[2]),m=e[2],f=g0(e[1]),n=[0,0,cC[1]],g=w(function(a,b){var
c=a[1];return[0,c+1|0,k(cC[4],b[1],c,a[2])]},n,m),o=g[2],p=g[1],q=m7(s,j,function(a){throw[0,l,UE]}),r=[0,h(cj,f),p,d,o,q],i=k(d9[3],f,r,c[2]);return[0,d+1|0,[0,c[1],i]]},d,e)[2]}return a},a,e)}},uh=function(a,b){return w(UF,a,b)},ui=[0,function(a,b){return 0}],uj=function(a,b){return j(ui[1],a,b)},oO=function(a,b){if(typeof
b===g)switch(b){case
1:return n(UO);case
2:return n(UP);case
3:break;default:return n(UN)}else
switch(b[0]){case
2:return a<50?oG(1+a,b[1]):v(oG,[0,b[1]]);case
3:if(!b[1][3])return a<50?hE(1+a,b):v(hE,[0,b]);break}var
c=b;for(;;){if(typeof
c!==g)switch(c[0]){case
0:var
c=c[1];continue;case
1:if(!c[1])return n(UM);break}return ng(nq(c))}},oN=function(a,b){if(typeof
b!==g)switch(b[0]){case
4:var
c=b[1];if(typeof
c!==g)if(2===c[0])return i(bV,g8(c[1]));throw[0,l,UQ];case
5:return t5(ul,b[1],uk,b[2])}return a<50?oO(1+a,b):v(oO,[0,b])},oM=function(a,b){if(typeof
b!==g)switch(b[0]){case
3:return a<50?hE(1+a,b):v(hE,[0,b]);case
6:var
c=b[1],d=eU(b[2]),e=n(UR);return bw(0,1,i(ul(c),e),d);case
7:var
f=[0,b[1],0],h=eU(b[2]);return bw(0,1,l6(ni(up,f)),h);case
8:var
j=[0,b[1],0],k=eU(b[2]);return bw(0,1,rK(ni(up,j)),k)}return a<50?oN(1+a,b):v(oN,[0,b])},oL=function(a,b){if(typeof
b!==g)switch(b[0]){case
9:var
d=b[1];if(typeof
d!==g)if(2===d[0]){var
c=b[2],f=d[1];if(typeof
c!==g)if(4===c[0]){var
e=c[1];if(typeof
e!==g)if(2===e[0]){var
k=g8(e[1]),m=i(n(UU),k);return i(g8(f),m)}}var
h=eU(c),j=n(UT);return bw(2,1,i(g8(f),j),h)}throw[0,l,US];case
11:var
o=b[1],p=eU(b[2]);return bw(2,1,i(uo(o),a5),p)}return a<50?oM(1+a,b):v(oM,[0,b])},oK=function(a,b){if(typeof
b!==g)if(12===b[0]){var
c=UK(b[1]);return bw(2,1,n(UV),c)}return a<50?oL(1+a,b):v(oL,[0,b])},oJ=function(a,b){if(typeof
b!==g)switch(b[0]){case
1:var
c=b[1];if(c){if(c[2])return dt(a$(jr,um,c));throw[0,l,UW]}break;case
10:var
d=b[1],e=np(b[2]),f=n(UX);return bw(0,1,i(um(d),f),e)}return a<50?oK(1+a,b):v(oK,[0,b])},oI=function(a,b){if(typeof
b!==g)switch(b[0]){case
13:var
c=b[1];if(typeof
c!==g)if(1===c[0])if(!c[1]){var
j=np(b[2]);return i(n(UZ),j)}var
e=aY(2,np(b[2])),f=i(n(UY),e),h=un(c);return dt(fC(aY(2,i(T(0),h)),f));case
14:var
d=b[1],k=b[2],p=d[1],q=i(t,uk(d[2])),l=aY(2,i(n(gX(p)),q)),m=i(n(U0),l),o=un(k);return dt(fC(aY(2,i(T(0),o)),m))}return a<50?oJ(1+a,b):v(oJ,[0,b])},ag4=function(a,b){return a<50?oI(1+a,b):v(oI,[0,b])},oH=function(a,b){return n(h(ak,b))},oG=function(a,b){return n(g2(ak,b))},ag3=function(a,b){var
c=b[2],d=b[1];if(typeof
c===g){if(1===c)return a<50?oH(1+a,d):v(oH,[0,d]);var
e=i(Tr,cE(c));return i(uo(d),e)}throw[0,l,U1]},hE=function(a,b){if(typeof
b!==g)if(3===b[0]){var
c=b[1],d=c[3],e=c[2],h=c[1];if(d)var
j=eU(d[1]),f=i(n(U3),j);else
var
f=P;var
k=0<x(e)?i(t,nh(a$(js,UL,e))):P,m=i(k,f);return i(bi(g2(cj,h[1])),m)}throw[0,l,U2]},uk=function(b){return y(oO(0,b))},ul=function(b){return y(oN(0,b))},eU=function(b){return y(oM(0,b))},UK=function(b){return y(oL(0,b))},um=function(b){return y(oK(0,b))},np=function(b){return y(oJ(0,b))},un=function(b){return y(oI(0,b))},nq=function(b){return y(ag4(0,b))},uo=function(b){return y(oH(0,b))},g8=function(b){return y(oG(0,b))},up=function(b){return y(ag3(0,b))},aiF=function(b){return y(hE(0,b))},UL=function(a){var
b=a[2],d=a[1];if(typeof
b!==g)if(4===b[0]){var
c=b[1];if(typeof
c!==g)if(2===c[0]){var
f=g8(c[1]),j=i(n(U4),f);return i(bi(h(ak,d)),j)}}var
e=eU(b);return bw(2,1,i(bi(h(ak,d)),a5),e)},fL=[0,0],U5=function(a,b){return af(a,[0,nq,b])},dA=jt([0,ak,cC]),eV=jt([0,cj,to]),uq=function(a){var
b=a[2];function
c(a){var
b=a[1],e=a[2],f=0===a[3]?U9:U_,g=n(f),j=i(n(U$),g),k=i(n(Va),j),l=i(cE(e),k),m=i(n(Vb),l),o=i(n(Vc),m);if(0===b[0])var
d=b[1],c=h(E(U7),d);else
var
c=U8;return i(n(c),o)}return j(dA[12],c,b)},ur=function(a,b){var
c=0;return af(a,[0,function(a){return uq(b)},c])},Vd=function(a){return bi(h(ak,a))},Ve=function(a){return a$(i(du,t),Vd,a)},us=function(a,b){return af(a,[0,Ve,b])},ut=[0,Vf],aZ=function(a,c){throw[0,ut,function(i,b){if(a[5][1]!==ez)aI(i,a[5]);function
d(a){return h(am(i),a)}if(typeof
c===g)switch(c){case
1:d(Vi);break;case
2:d(Vj);break;default:d(Vg)}else
switch(c[0]){case
1:var
y=c[2],z=c[1];j(d(Vl),z,y);break;case
2:var
B=g2(ak,c[1]);h(d(Vm),B);break;case
3:var
C=c[1],n=cl(c[2]),o=n[2],D=n[1],p=cl(C),q=p[2];if(0!==p[1])throw[0,l,Vs];if(tx(o,q)){var
m=x(D);if(0===m)throw[0,l,Vn];var
E=1<m?Vo:Vq;j(d(Vp),m,E)}else{var
F=fK(q),G=fK(o);j(d(Vr),G,F)}break;case
4:var
r=c[2],s=c[1],H=t4(r),I=t4(s);A(d(Vt),s,I,r,H);break;case
5:var
J=c[2],K=fK(c[1]);j(d(Vu),K,J);break;case
6:var
L=c[2],M=h(ak,c[1]),N=w(function(a,b){return u(a,u(Vv,h(ak,b)))},M,L);h(d(Vw),N);break;case
7:var
O=c[1],P=gX(c[2]);k(d(Vx),bX,O,P);break;case
8:var
Q=c[1];j(d(Vy),bX,Q);break;case
9:var
e=c[3],f=c[2],R=c[1];j(d(Vz),gV,R);if(0===f)if(0===e)throw[0,l,VA];if(0!==f){var
T=1<x(f)?VE:VG;k(d(VF),T,us,f)}if(0!==e){var
S=1<x(e)?VB:VD;k(d(VC),S,us,e)}break;case
10:var
U=c[1];j(d(VH),bX,U);break;case
11:var
V=h(cj,c[1]);h(d(VI),V);break;case
12:var
W=c[1];j(d(VJ),U5,W);break;default:var
t=c[2],v=c[1];j(d(Vk),v,t)}return 4<gT(0)?(h(am(i),Vh),af(i,[0,uq,a])):0}]},uu=function(a,b,c,d){return aZ(c,[0,a,g2(b,d)])},nr=function(a,b,c,d){return aZ(c,[1,a,h(b,d)])},uv=function(a,b,c){return aZ(a,[3,b,c])},uw=function(a){return a[4]},g9=function(a){return a[5]},ns=function(a,b){try{var
c=j(dA[6],b,a[2])}catch(f){f=m(f);if(f[1]===o)return uu(VL,ak,a,b);throw f}return c},g_=function(a,b){return ns(a,b)[2]},ux=function(a,b){return ns(a,b)[1]},uy=function(a,b){return 0===b[0]?[0,(a[1]-b[1]|0)-1|0]:b},jw=function(a,b){var
c=b[1];try{var
e=j(eV[6],c,a[3]),g=e[2],h=[0,uy(a,e[1]),g],d=h}catch(f){f=m(f);if(f[1]!==o)throw f;var
d=uu(VM,cj,a,c)}var
f=d[2],i=d[1];b[2]=[0,f];var
k=f[5];return[0,i,tJ(c),k]},uz=function(c,b){function
a(a){return nr(VN,ak,[0,c[1],c[2],c[3],c[4],a[3]],a[1])}return jk(tf,function(a){return a[1]},b,a)},uA=function(c,b){var
a=p(function(a){return g0(g1(a[2])[1])},b);function
d(a){return nr(VO,cj,c,a)}jk(NE,function(a){return a},a,d);return 0},uB=function(c,b){var
a=p(function(a){return a[1]},b);function
d(a){return nr(VP,ak,c,a)}jk(tf,function(a){return a},a,d);return 0},g$=function(a,b){return[0,a[1],a[2],a[3],a[4],b]},uC=function(a,b,c){var
d=a[5],e=a[4],f=a[3],g=k(dA[3],b,c,a[2]);return[0,a[1],g,f,e,d]},fM=function(a,b,c){return uC([0,b[1]+1|0,b[2],b[3],b[4],b[5]],c[1],[0,[0,b[1]],c[2],a])},jx=function(a,b){return uC(a,b[1],[0,[1,b[3]],b[2],1])},jy=function(d,b,c){return w(function(a,b){return fM(d,a,b)},b,c)},ha=function(a,b,c){return jy(a,b,uz(b,c))},uD=function(a,b,c){var
d=a[5],e=a[4],f=k(eV[3],b,c,a[3]);return[0,a[1],a[2],f,e,d]},uE=function(a,b,c,d,e){var
f=a[5],g=a[4],h=a[3],i=A(dA[5],b,c,[0,[1,e],d,0],a[2]);return[0,a[1],i,h,g,f]},nt=function(a,b){var
c=a[5],d=a[4],e=j(eV[8],b,a[3]),f=j(eV[9],b,e),g=j(dA[8],b,a[2]),h=j(dA[9],b,g);return[0,a[1],h,f,d,c]},jz=function(a,b,c){var
e=a,d=c;for(;;)if(typeof
d===g)return b;else
switch(d[0]){case
1:var
f=d[1];return w(function(a,b){return jz(e,a,b)},b,f);case
2:var
h=d[1][2];return w(function(a,b){return jz(e,a,b[2])},b,h);case
3:var
e=d[2],d=d[1];continue;case
4:var
d=d[1];continue;case
5:var
i=d[2];return[0,[0,i,0,e],jz(e,b,d[1])];default:return[0,[0,d[1],0,e],b]}},hb=function(a){return L(jz(m8,0,a))},nu=function(a){return hb(d8(a))},hc=function(a,b,c){return ha(a,b,nu(c))},nv=function(a){return p(function(a){return tH(a[1])},a)},uF=function(a,b){return w(function(a,b){var
c=b[2];if(0===c[0]){var
d=c[2],f=c[1],h=ux(a,[0,b[1][1][1]]);return bz(function(a,b,c){var
g=c[2],i=c[1];try{var
n=g1(g),d=n}catch(f){f=m(f);if(f[1]!==o)throw f;var
d=aZ(b,[12,g])}var
j=d[2],k=d[1],l=p(function(a){return a[1]},j),e=g0(k);return uD(b,e,[0,h,tG(e,a,m7(f,i,function(a){return aZ(b,[11,e])}),l)])},a,d)}return a},a,b)},jA=function(a,b){var
c=b;for(;;){if(typeof
c!==g)switch(c[0]){case
0:var
c=c[1];continue;case
2:var
d=c[1];if(1!==d[0])return j(bl,a,d[1]);break}return 0}},cH=function(a,b,c,d){var
f=a,h=b,e=c;for(;;){if(typeof
e!==g)switch(e[0]){case
0:var
f=[0,f[1],f[2],f[3],f[4],e[2]],e=e[1];continue;case
12:var
j=e[1];if(0===h){var
h=1,e=j;continue}return aZ(f,0)}var
i=VQ(f,h,e);return tx(i,d)?0:uv(f,d,i)}},oQ=function(a,b,c,d){var
f=b,i=c,e=d;for(;;){if(typeof
e===g)switch(e){case
1:return 1;case
2:return 2;case
3:return 1;default:return 1}else
switch(e[0]){case
1:var
I=e[1];M(function(a){return cH(f,i,a,1)},I);return 1;case
2:return g_(f,e[1]);case
3:var
p=e[1],q=p[2],r=p[1],J=p[3];jw(f,r);uB(f,q);M(function(a){return cH(f,i,a[2],1)},q);var
S=ba(r[2]),k=cC[26],y=h(cC[27],S[4]),T=k[1],z=w(function(a,b){return j(k[7],b[1],a)},T,q);if(!j(k[17],y,z)){var
U=j(k[10],y,z),V=j(k[10],z,y),W=h(k[15],V),X=h(k[15],U);aZ(f,[9,tJ(r[1]),X,W])}mF(function(a){return a8(f,a,1)},J);return 1;case
4:a8(f,e[1],0);return 1;case
5:var
A=e[2],B=cl(hd(f,e[1])),C=B[1],K=B[2],D=x(C),E=x(A);if(D!==E)aZ(f,[4,D,E]);ig(function(a,b){return a8(f,a,b)},A,C);return K;case
6:var
F=e[1],L=e[2],G=hc(1,f,F);cH(G,0,F,1);a8(G,L,1);return 1;case
7:var
t=e[2],s=e[1],n=0;break;case
8:var
t=e[2],s=e[1],n=0;break;case
9:var
N=e[2];a8(f,e[1],0);a8(f,N,1);return 2;case
10:var
O=e[2];cH(f,i,e[1],2);cH(f,i,O,2);return 2;case
11:var
P=e[2];if(0===g_(f,[0,e[1]])){cH(f,i,P,1);return 1}throw[0,l,VR];case
12:var
Q=e[1];if(0===i){var
i=1,e=Q;continue}return aZ(f,0);case
13:var
R=e[2];cH(f,i,e[1],1);cH(f,i,R,2);return 1;case
14:var
H=e[2],u=e[1],n=1;break;case
15:var
H=e[2],u=e[1],n=1;break;default:var
f=[0,f[1],f[2],f[3],f[4],e[2]],e=e[1];continue}if(n){var
Y=u[1],m=hd(f,u[2]);if(typeof
m===g)switch(m){case
2:var
o=m4(Y,2)?(aZ(f,[5,m,VT]),1):1;break;case
0:var
o=0;break;default:var
o=1}else
var
o=0;if(!o)aZ(f,[5,m,VS]);cH(f,i,H,1);return 1}return a<50?oP(1+a,fM(1,f,s),t):v(oP,[0,fM(1,f,s),t])}},oP=function(a,b,c){return a<50?oQ(1+a,hc(1,b,c),1,c):v(oQ,[0,hc(1,b,c),1,c])},VQ=function(b,c,d){return y(oQ(0,b,c,d))},hd=function(b,c){return y(oP(0,b,c))},a8=function(a,b,c){return cH(hc(1,a,b),1,b,c)},uG=function(a){return aD(function(a){var
b=a[2];return 0===b[0]?b[2]:0},a)},fN=function(c,b){var
a=b;for(;;)if(typeof
a===g)return 0;else
switch(a[0]){case
1:var
d=a[1];return M(function(a){return fN(c,a)},d);case
2:var
e=a[1][2];return M(function(a){return fN(c,a[2])},e);case
3:var
a=a[1];continue;case
4:var
f=a[2];fN(c,a[1]);return a8(c,f,1);case
5:var
h=a[2];fN(c,a[1]);var
a=[0,h];continue;default:if(0===g_(c,[0,a[1]]))return 0;throw[0,l,VU]}},uH=function(a,b,c){return 0===a?b:c},uI=function(a,b,c){var
e=bt(c),f=[1,e[1]],g=[15,e[2]],d=ha(0,a,hb(f));fN(d,f);bb(uH(b,a,d),g);return d},bb=function(a,b){var
d=a,c=b;for(;;){if(typeof
c===g)return 0;else
switch(c[0]){case
1:var
h=c[1],j=g_(d,h);if(0!==j)uv(d,0,j);return 0===ns(d,h)[3]?0:aZ(d,[2,h]);case
2:return 0;case
3:var
n=c[3],d=uI(d,c[1],c[2]),c=n;continue;case
4:var
o=c[2],d=fM(1,d,c[1]),c=o;continue;case
5:var
p=c[2],d=uJ(d,c[1]),c=p;continue;case
6:var
k=c[2],q=c[4],r=c[3],i=hc(0,ha(1,d,c[1]),k);cH(i,0,k,1);bb(i,q);return a8(i,r,1);case
7:var
s=c[3];bb(d,c[1]);var
c=s;continue;case
8:var
t=c[1];jw(d,c[2]);var
c=t;continue;case
9:var
c=c[1];continue;case
10:return a8(d,c[1],2);case
11:var
u=c[2];a8(d,c[1],2);hd(d,u);return 0;case
12:var
v=c[2];bb(d,c[1]);var
c=v;continue;case
13:var
w=c[2];bb(d,c[1]);return M(function(a){var
b=0===a[0]?a[1]:a[2];hd(d,b);return 0},w);case
14:var
x=c[3];bb(d,c[2]);return M(function(a){var
b=a[1],e=a[2],c=ha(0,d,hb(b));fN(c,b);return bb(c,e)},x);case
15:var
y=c[1];return M(function(a){return bb(d,a)},y);case
16:var
l=c[1],z=l[2];jw(d,l[1]);return M(function(a){return bb(d,a[2])},z);case
17:var
A=c[4],B=c[3];bb(d,c[2]);bb(d,B);var
c=A;continue;case
18:var
C=c[3],D=c[2];a8(d,c[1],2);bb(d,D);var
c=C;continue;case
19:var
E=c[6],F=c[5],G=c[3],H=c[2];a8(d,c[1],2);bb(d,G);bb(d,F);var
d=fM(0,d,H),c=E;continue;case
20:var
f=c[2],e=c[1];break;case
21:var
d=[0,d[1],d[2],d[3],d[4],c[2]],c=c[1];continue;case
22:return 0;case
23:var
f=c[2],e=c[1];break;case
24:var
f=c[2],e=c[1];break;case
25:var
f=c[2],e=c[1];break;default:var
m=c[2];bb(d,c[1]);return a8(d,m,1)}bb(d,e);var
c=f;continue}},uJ=function(a,b){var
c=b[3],d=[0,a[1],a[2],a[3],a[4],b[1]],i=b[2],f=uF(ha(1,d,nv(c)),c);uA(d,uG(c));var
e=uH(i,d,f);M(function(a){var
k=a[1],l=k[1],d=l[1],n=k[2],o=l[2],i=p(function(a){return a[2]},n),b=a[2];switch(b[0]){case
1:var
m=b[1],f=p(function(a){return a[1]},i);M(function(a){var
j=a[2],k=a[1];M(function(a){var
c=e,b=a[2];for(;;){if(typeof
b!==g)switch(b[0]){case
0:var
c=[0,c[1],c[2],c[3],c[4],b[2]],b=b[1];continue;case
2:var
d=b[1];if(1!==d[0])if(aB(h(bl,d[1]),f))return 0;break}return aZ(c,1)}},k);var
c=e,b=j[2];for(;;){if(typeof
b!==g)switch(b[0]){case
0:var
c=[0,c[1],c[2],c[3],c[4],b[2]],b=b[1];continue;case
5:var
i=b[2];if(jA(d,b[1]))if(tv(jA,f,i))return 0;break}if(jA(d,b))if(tv(jA,f,0))return 0;return aZ(c,[6,d,f])}},m);var
j=function(a){return a[2][1]};jk(NP,j,m,function(a){return aZ(e,[7,d,j(a)])});return 0;case
2:var
t=b[1];return a8(jy(1,e,i),t,o);default:var
q=b[3],r=b[2],s=b[1],c=jy(1,e,i);M(function(a){var
b=a[2];uB(c,g1(b)[2]);return a8(c,b,1)},r);return mF(function(a){a8(c,a,1);var
b=2,e=0===s?1:2;return jn(e,b)?0:aZ(c,[8,d])},q)}},c);return f},uK=function(a,b){w(function(a,b){switch(b[0]){case
1:var
c=b[1];return uI([0,a[1],a[2],a[3],a[4],c[1]],c[2],c[3]);case
2:var
d=b[1];a8(a,b[2],1);return fM(0,a,d);case
3:return nt(a,b[1]);default:return uJ(a,b[1])}},a,b);return 0},uL=function(a,b){uz(a,aD(function(a){switch(a[0]){case
1:throw[0,l,VV];case
2:return[0,a[1],0];case
3:return 0;default:return nv(a[1][3])}},b));uA(a,aD(function(a){return 0===a[0]?uG(a[1][3]):0},b));return uK(a,b)},he=function(a,b){return uy(a,ux(a,b))},nw=function(a,b){try{var
c=j(dA[2],b,a[2])[1];if(0===c[0])throw[0,l,VW];var
d=c[1]}catch(f){f=m(f);if(f[1]===o)return aZ(a,[10,b]);throw f}return d},bC=function(a,b){return jy(1,a,b)},uM=function(a){var
d=dm(a),b=d[1],f=d[2],g=d[3],h=d[4],i=d[5],l=d[6],n=d[7],p=d[8],q=d[9],r=d[10],s=d[11],t=d[12],u=d[13],v=d[14],w=d[15],x=d[16],y=d[17],z=d[18],A=d[19],B=d[20],C=d[21],D=d[22],E=d[23],F=d[24];function
G(a){var
b=0;function
c(a,b,c){return[0,a,c]}return k(d[11],c,a,b)}function
e(a,b){function
c(a,b,c){return k(d[4],a,b,c)}return k(d[11],c,a,b)}function
H(a,e){function
b(a,b,c){return j(d[3],a,e)?c:j(d[6],a,c)}return k(d[11],b,a,a)}function
c(a,e){function
b(a,b,c){return j(d[3],a,e)?j(d[6],a,c):c}return k(d[11],b,a,a)}function
I(a,b){var
d=c(a,b);return e(c(b,a),d)}function
J(a){var
b=0;function
c(a,b,c){return[0,[0,a,b],c]}return k(d[11],c,a,b)}return[0,b,f,g,h,i,l,n,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,e,H,c,I,J,function(a,b){try{var
c=[0,j(d[22],a,b)]}catch(f){f=m(f);if(f[1]===o)return 0;throw f}return c}]},VX=[0,0,dx[1]],hf=function(a,b){var
c=b[2];if(a<b[1]){try{var
d=j(dx[3],a,c)}catch(f){f=m(f);if(f[1]===o)throw[0,l,VY];throw f}return d}throw[0,l,VZ]},nx=function(a,b,c){var
d=c[1],e=c[2];if(a<d)return[0,d,k(dx[4],a,b,e)];throw[0,l,V0]},uN=function(a,b){return a===b?1:0},d$=function(a,b){var
d=hf(a,b[1]);if(0===d[0]){var
c=d[1],e=d$(c,b);if(c!==e){var
f=b[1];b[1]=nx(a,hf(c,b[1]),f)}return e}return a},hg=function(a,b){var
d=b[1],c=hf(a,d);if(0===c[0]){var
e=hf(c[1],d);if(0===e[0]){var
g=d$(a,b),f=hf(g,b[1]);if(0===f[0])throw[0,l,V1];return f[1]}return e[1]}return c[1]},jB=function(a,b,c){var
d=d$(b,c),e=hg(d,c),f=c[1];return[0,nx(d,[1,h(a,e)],f)]},ny=function(e,b,c){var
a=c[1][2];function
d(a,b,c){return 0===b[0]?c:k(e,c,a,b[1])}return k(dx[20],d,a,b)},bD=dm([0,function(a,b){return bI(a,b)}]),fO=[0,bD[1]],nz=function(a,b){if(a)if(b){var
c=b[1],d=a[1],e=function(a,b,c){if(b){var
d=b[1];if(c)return[0,tz(d,c[1])];var
e=d}else{if(!c)throw[0,l,V2];var
e=c[1]}return[0,e]};return[0,k(bD[7],e,d,c)]}return 0},uO=function(c,b){return w(function(a,b){return nz(a,h(c,b))},fO,b)},hh=function(b){return m6(function(a){return jn(b,a)?fO:0})},hi=hh(ty),V4=1,uP=function(b){return m6(function(a){return jm(a)?fO:jn(V4,a)?b:0})},nA=function(a,b){return k(tD,function(a,b,c){if(b)if(c)return[0,nz(b[1],c[1])];throw[0,l,V5]},a,b)},uQ=function(b){return m6(function(a){return[0,j(bD[5],b,a)]})},hj=function(a){function
b(a,b){return 1-jm(b)}return j(bD[14],b,a)},V7=function(a,b){return k(tE,function(a,b){if(a){if(b){var
c=a[1],d=hj(b[1]),e=hj(c);return k(bD[9],m4,e,d)}}else
if(!b)return 1;return 0},a,b)},V8=function(a){return 0},uR=function(d,b,c){var
e=0,a=k(NU,function(a,b,c){return jm(a)?c:b?[0,[0,b[1],a],c]:c},c,e);return a?a$(a_,function(a){var
c=a[2],e=hj(a[1]),f=fC(n(gX(c)),b),g=h(bD[17],e);return i(iY(function(a){var
b=a[2],c=fC(h(d,a[1]),Tq);return fC(n(gX(b)),c)},g),f)},a):n(V9)},V_=function(a){return uR(fD,P,a)},nB=function(a){return[0,0]};uM([0,function(a,b){return bI(a,b)}]);var
cn=dm([0,function(a,b){return bI(a,b)}]),co=[0,function(a){throw[0,l,Wc]}],fP=[0,function(a){throw[0,l,Wd]}],Wf=[0,function(a){throw[0,l,We]}],nC=[0,function(a){throw[0,l,Wg]}],Wi=h(cD,Wh),VK=[0,0,dA[1],eV[1],Wi,m8],Wj=cn[1],dB=[0,[0,VX],nB(0),[0,ez,ez],0,0,0,0,Wj,VK],ea=function(a,b){var
c=a.slice();c[3]=b;return c},aa=function(a){return a[3]},hk=function(a){return a[4]},hl=function(a){var
b=a.slice();b[4]=1;return b},bZ=function(a){return uw(a[9])},jD=function(c,b){function
a(a,b){var
d=c.slice();d[9]=a;return h(b,d)}return j(b,c[9],a)},eW=function(a){return a[9]},nD=function(a,b){var
d=a.slice(),c=a[9],e=c[5],f=h(eV[10],c[3]);d[9]=[0,0,h(dA[10],c[2]),f,b,e];return d},nE=function(a,b){return hg(b,a[1])},eX=function(a,b){var
e=co[1];j(s(0,Wk),e,[0,dB,a]);if(typeof
a!==g)switch(a[0]){case
2:if(0!==a[1]){var
f=a[3],i=a[2];return[2,1,i,f,eX(a[4],b)]}break;case
5:return[5,h(b,a[1])];case
8:var
c=a[2],d=a[1];try{var
k=[8,eX(d,b),c]}catch(f){f=m(f);if(f[1]===o)return[8,d,eX(c,b)];throw f}return k;case
9:var
l=a[1];return[9,l,eX(a[2],b)]}j(s(0,Wl),ti,a);throw[0,o]},fQ=function(a){var
b=[0,Wm];try{eX(a,function(a){throw[0,b,a]});throw[0,o]}catch(f){f=m(f);if(f[1]===b)return f[2];throw f}},fR=function(a,b){return j(cn[22],b,a[8])},nF=function(a,b){if(0===b[0])return b[1]<a[1][1][1]?1:0;var
c=b[1];try{var
d=fR(a,c)[2],e=d<=a[7]?1:0}catch(f){f=m(f);if(f[1]===o)return 0;throw f}return e},cI=[0,Wn],uW=function(a,b,c){var
e=fR(a,b),d=a.slice();d[8]=k(cn[4],b,[0,c,e[2]],a[8]);return d},Z=function(a,b){var
c=b;for(;;){if(typeof
c!==g)if(1===c[0]){var
d=c[1];if(0!==d[0]){var
h=d[1];try{var
f=fR(a,h)}catch(f){f=m(f);if(f[1]===o)throw[0,cI];throw f}var
e=f[1];if(0===e[0])return c;var
c=e[1];continue}}return c}},fS=function(a,b){return Z(a,[1,b])},ab=function(a,b){var
c=fS(a,b);if(typeof
c!==g)if(1===c[0])if(0!==c[1][0])return 1;return 0},fT=function(a,b){var
c=fS(a,b);if(typeof
c!==g)if(1===c[0])return c[1];var
d=co[1];return j(F(Wo),d,[0,a,c])},jE=function(a,b){var
c=fS(a,b);if(typeof
c!==g)if(1===c[0]){var
d=c[1];if(1!==d[0])return d[1]}var
e=co[1];return j(F(Wp),e,[0,a,c])},jF=function(a,b,c){var
e=jE(a,b),d=a.slice(),f=a[1];d[1]=jB(function(a){var
b=a[1];return[0,b,h(c,a[2])]},e,f);return d},dC=function(a,b){var
c=fT(a,b);if(0===c[0])return hg(c[1],a[1])[1];var
d=fR(a,c[1])[1];if(0===d[0])return d[1];throw[0,l,Wq]},nG=function(a,b,c){var
d=fT(a,b);if(0===d[0]){var
e=a.slice(),i=d[1],j=a[1];e[1]=jB(function(a){var
b=a[2];return[0,h(c,a[1]),b]},i,j);return e}var
f=d[1],g=fR(a,f)[1];if(0===g[0])return uW(a,f,[0,h(c,g[1])]);throw[0,l,Wr]},uX=function(a){return[0,[6,[1,[0,a]]],Ws]},ag=function(a,b){var
c=nE(a,jE(a,b))[2];if(typeof
c!==g)if(1===c[0])return c[1][1];throw[0,l,Wt]},b0=function(a,b,c){return jF(a,b,function(a){if(typeof
a!==g)if(1===a[0])return[1,[0,c]];return F(Wu)})},eb=function(a,b){return ba(dC(a,b)[5])},fU=function(a,b){return dC(a,b)[2]},V=function(a,b){return dC(a,b)[1]},cJ=function(a,b){var
c=V(a,b);try{var
d=cY(function(a){return 0===a[0]?1:0},c)}catch(f){f=m(f);if(f[1]===o)return a4(c);throw f}return d},bE=function(a,b){if(0===b[0]){var
c=nE(a,b[1])[2];if(typeof
c!==g)if(0===c[0])return[0,c[1][1]];return 0}return 0},jG=function(a,b){var
c=nE(a,jE(a,b))[2];if(typeof
c!==g)if(0===c[0])return c[1][2];throw[0,l,Ww]},at=function(a,b){return dC(a,b)[3]},fV=function(a,b,c){var
d=[0,c];return nG(a,b,function(a){var
b=a.slice();b[5]=d;return b})},c7=function(a){return a[5]},eY=function(a,b){var
c=a.slice();c[5]=b;return c},nH=[],Wz=0,WA=0;oA(nH,[0,0,function(c){var
a=dX(c,Wa),e=a[17],b=a[1],f=a[2],h=a[3],i=a[4],l=a[5],m=a[6],n=a[7],o=a[8],p=a[9],q=a[10],r=a[11],s=a[12],t=a[13],u=a[14],v=a[15],w=a[16],d=a[18];function
x(a,b,c){var
d=k(a[1][e+1],a,b,c);if(typeof
d===g)switch(d){case
1:return j(a[1][p+1],a,b);case
2:return j(a[1][o+1],a,b);default:return j(a[1][f+1],a,b)}else
switch(d[0]){case
1:return k(a[1][n+1],a,b,d[1]);case
2:return a1(a[1][m+1],a,b,d[1],d[2],d[3],d[4]);case
3:return A(a[1][u+1],a,b,d[1],d[2]);case
4:return k(a[1][h+1],a,b,d[1]);case
5:return k(a[1][q+1],a,b,d[1]);case
6:return k(a[1][l+1],a,b,d[1]);case
7:return A(a[1][t+1],a,b,d[1],d[2]);case
8:return A(a[1][s+1],a,b,d[1],d[2]);case
9:return A(a[1][w+1],a,b,d[1],d[2]);case
10:return A(a[1][i+1],a,b,d[1],d[2]);case
11:return A(a[1][v+1],a,b,d[1],d[2]);default:return k(a[1][r+1],a,b,d[1])}}function
y(a,b,c){return b}eF(c,[0,e,function(a,b,c){return c},d,y,b,x]);return function(a,b){return ch(b,c)}},WA,Wz]);var
fW=dr(jC,function(c){var
a=dX(c,uS),e=a[1],i=a[2],d=a[18],f=a[19],l=a[20],m=a[21],n=a[23],b=a[3],o=a[4],q=a[5],r=a[6],s=a[7],t=a[8],u=a[9],v=a[10],x=a[11],y=a[12],z=a[13],A=a[14],B=a[15],C=a[16],D=a[17],E=a[22],F=cA(c,0,uV,uT,nH,1)[1];function
G(d,b,c){var
a=c[2],e=p(function(a){var
n=L(cl(a[6])[1]),e=w(h(d[1][m+1],d),b,n),c=a[3];if(typeof
c===g)return a;else{if(0===c[0]){var
o=c[1],q=p(j(d[1][i+1],d,e),o),f=a.slice();f[3]=[0,q];return f}var
r=[1,k(d[1][i+1],d,e,c[1])],l=a.slice();l[3]=r;return l}},a);return[0,c[1],e]}function
H(a,b,c){var
d=c[1];return[0,d,k(a[1][i+1],a,b,c[2])]}function
I(a,b,c){var
d=c[1];return[0,d,k(a[1][i+1],a,b,c[2])]}function
J(a,b,c){var
d=c[2];return[0,k(a[1][i+1],a,b,c[1]),d]}function
K(a,b,c){var
e=k(a[1][i+1],a,b,c[4]),f=c[3],g=p(j(a[1][l+1],a,b),f),h=k(a[1][d+1],a,b,c[2]);return[0,c[1],h,g,e]}function
M(a,b,c){return p(j(a[1][i+1],a,b),c)}function
N(a,b,c,d){var
e=k(a[1][i+1],a,b,d);return[11,k(a[1][f+1],a,b,c),e]}function
O(a,b,c,d){var
e=k(a[1][i+1],a,b,d);return[10,k(a[1][i+1],a,b,c),e]}function
P(a,b){return 2}function
Q(a,b,c,d){var
e=k(a[1][i+1],a,b,d);return[9,k(a[1][i+1],a,b,c),e]}function
R(a,b,c,d){var
e=k(a[1][i+1],a,b,d);return[8,k(a[1][i+1],a,b,c),e]}function
S(a,b,c,d){var
e=k(a[1][i+1],a,b,d);return[7,k(a[1][i+1],a,b,c),e]}function
T(a,b,c){return[6,k(a[1][i+1],a,b,c)]}function
U(a,b,c){return[5,k(a[1][n+1],a,b,c)]}function
V(a,b,c){return[4,k(a[1][e+1],a,b,c)]}function
W(a,b,c,d){var
f=k(a[1][e+1],a,b,d);return[3,k(a[1][i+1],a,b,c),f]}function
X(a,b,c,d,e,f){var
g=k(a[1][m+1],a,b,d[2]);return[2,c,d,e,k(a[1][i+1],a,g,f)]}function
Y(a,b,c){return[1,c]}function
Z(a,b,c){return[0,c]}function
_(a,b){return 1}eF(c,[0,b,function(a,b){return 0},v,_,y,Z,t,Y,s,X,B,W,o,V,x,U,r,T,A,S,z,R,D,Q,u,P,q,O,C,N,e,M,n,K,d,J,l,I,f,H,E,G]);return function(a,b){var
d=ch(b,c);h(F,d);return cB(b,d,c)}}),nI=dr(jC,function(c){var
a=dX(c,uS),e=a[1],i=a[2],d=a[18],f=a[19],l=a[20],m=a[21],n=a[23],b=a[3],o=a[4],p=a[5],q=a[6],r=a[7],s=a[8],t=a[9],u=a[10],v=a[11],x=a[12],y=a[13],z=a[14],A=a[15],B=a[16],C=a[17],D=a[22],E=cA(c,0,uV,uT,nH,1)[1];function
F(d,b,c){var
a=c[2];return M(function(a){var
f=L(cl(a[6])[1]),e=w(h(d[1][m+1],d),b,f),c=a[3];if(typeof
c===g)return 0;else{if(0===c[0]){var
l=c[1];return M(j(d[1][i+1],d,e),l)}return k(d[1][i+1],d,e,c[1])}},a)}function
G(a,b,c){return k(a[1][i+1],a,b,c[2])}function
H(a,b,c){return k(a[1][i+1],a,b,c[2])}function
I(a,b,c){return k(a[1][i+1],a,b,c[1])}function
J(a,b,c){k(a[1][d+1],a,b,c[2]);var
e=c[3];M(j(a[1][l+1],a,b),e);return k(a[1][i+1],a,b,c[4])}function
K(a,b,c){return M(j(a[1][i+1],a,b),c)}function
N(a,b,c,d){k(a[1][f+1],a,b,c);return k(a[1][i+1],a,b,d)}function
O(a,b,c,d){k(a[1][i+1],a,b,c);return k(a[1][i+1],a,b,d)}function
P(a,b){return 0}function
Q(a,b,c,d){k(a[1][i+1],a,b,c);return k(a[1][i+1],a,b,d)}function
R(a,b,c,d){k(a[1][i+1],a,b,c);return k(a[1][i+1],a,b,d)}function
S(a,b,c,d){k(a[1][i+1],a,b,c);return k(a[1][i+1],a,b,d)}function
T(a,b,c){return k(a[1][i+1],a,b,c)}function
U(a,b,c){return k(a[1][n+1],a,b,c)}function
V(a,b,c){return k(a[1][e+1],a,b,c)}function
W(a,b,c,d){k(a[1][i+1],a,b,c);return k(a[1][e+1],a,b,d)}function
X(a,b,c,d,e,f){var
g=k(a[1][m+1],a,b,d[2]);return k(a[1][i+1],a,g,f)}function
Y(a,b,c){return 0}function
Z(a,b,c){return 0}function
_(a,b){return 0}eF(c,[0,b,function(a,b){return 0},u,_,x,Z,s,Y,r,X,A,W,o,V,v,U,q,T,z,S,y,R,C,Q,t,P,p,O,B,N,e,K,n,J,d,I,l,H,f,G,D,F]);return function(a,b){var
d=ch(b,c);h(E,d);return cB(b,d,c)}}),nJ=[0,0,0,0],nK=function(a,b){var
e=[0,0],i=0;if(!nJ[1]){var
c=lG(jC),d=dq(c,WB),g=dX(c,V$),l=g[1],m=g[2],n=cA(c,0,0,uU,nI,0)[1],o=function(a,b,c){var
e=a[d+1],f=dC(e[1],c)[6],g=cw(e[2][1],f);e[2][1]=g;return 0};eF(c,[0,m,function(a,b,c){return Z(a[d+1][1],c)},l,o]);var
p=function(a){var
e=a[1],b=ch(0,c);j(n,a[2],b);b[d+1]=e;return cB(0,b,c)};lH(c);nJ[1]=p}var
f=h(nJ[1],[0,[0,a,e],nI[4]]);k(cs(f,fa,19),f,i,b);return e[1]},nL=[0,0,0,0],c8=function(a,b){var
i=0;if(!nL[1]){var
c=lG(jC),f=dq(c,WC),e=dX(c,Wb),l=e[1],m=e[2],n=cA(c,0,0,uU,fW,0)[1];fx(c,m,function(a,b,c){var
e=a[f+1],d=fS(e[2],c);if(typeof
d!==g)if(1===d[0]){if(nF(e[1],d[1]))return d;var
h=[0,e[2],d],i=co[1];j(s(0,WD),i,h);throw[0,cI]}return k(a[1][l+1],a,0,d)});var
o=function(a){var
d=a[1],b=ch(0,c);j(n,a[2],b);b[f+1]=d;return cB(0,b,c)};lH(c);nL[1]=o}var
d=h(nL[1],[0,[0,a,b],fW[4]]);return j(cs(d,fa,20),d,i)},jH=function(a,b,c){an(ab(a,b),WE);var
d=dC(a,b)[6],f=nK(a,c);if(f<=d){var
j=co[1],k=[0,a,V(a,b)],i=[0,a,c],m=fP[1];if(0===b[0])throw[0,l,WF];var
n=b[1];(function(a,b,c,d,e,f,g,h,i,j){return a.length==9?a(b,c,d,e,f,g,h,i,j):br(a,[b,c,d,e,f,g,h,i,j])}(s(0,WG),bj,aC,n,m,k,d,j,i,f));var
e=fS(a,b);if(typeof
e!==g)if(1===e[0]){var
h=e[1];if(0!==h[0])return[0,uW(a,h[1],[1,c])]}throw[0,l,WH]}var
o=nK(a,c),p=co[1],q=co[1];oR(s(0,WI),bj,aC,q,[0,a,[1,b]],d,p,[0,a,c],o);return 0},ad=uM([0,function(a,b){if(0===a[0])if(0===b[0])return a[1]-b[1]|0;return F(WJ)}]),WK=function(a){return[0,ad[1]]},WL=function(a){a[1]=ad[1];return 0},WM=function(a,b,c){c[1]=k(ad[4],a,b,c[1]);return 0},WN=function(a,b){return j(ad[22],a,b[1])},uY=[0,WK,WL,WM,WN,function(a,b){return j(ad[10],a,b[1])}],ao=function(a,b,c){var
e=fT(a,b),d=fT(a,c);if(0===e[0]){if(0===d[0]){var
f=a[1],h=e[1],g=d$(d[1],f);return uN(d$(h,f),g)}}else
if(1===d[0])return e[1]===d[1]?1:0;return 0},fX=function(a,b,c){var
d=fT(a,b),e=fT(a,c),y=at(a,e);an(av(at(a,d),y),WO);var
z=dC(a,d)[6],B=dC(a,e)[6],C=[0,a,V(a,e)],E=fP[1],F=[0,a,V(a,d)],G=fP[1];oR(s(WQ,WP),bj,aC,G,F,z,E,C,B);if(1===at(a,d)){var
H=eb(a,e),I=nC[1],J=eb(a,d),K=nC[1];A(s(WS,WR),K,J,I,H)}if(0===d[0]){var
i=d[1];if(0===e[0]){var
p=e[1],g=a[1],l=hg(p,g)[1],m=l[2],t=l[1],n=hg(i,g)[1],u=n[2],v=D(t,n[1]),w=D(m,h(aN(function(b){return 1-aB(function(a){return av(b,a)},m)}),u)),f=jB(function(a){var
b=a[1];return[0,[0,v,w,b[3],b[4],b[5],b[6]],a[2]]},i,g),o=a.slice(),j=d$(p,f),k=d$(i,f),x=uN(j,k)?f:[0,nx(j,[0,k],f[1])];o[1]=x;return[0,o]}var
r=e,q=d}else{var
L=d[1];if(0!==e[0])return L<e[1]?jH(a,e,[1,d]):jH(a,d,[1,e]);var
r=d,q=e}return jH(a,r,[1,q])},uZ=function(c,e){var
a=e[7];j(am(c),WW,a);var
b=e[8];function
d(a,b){var
f=b[2];k(am(c),WT,a,f);var
d=b[1];if(0===d[0]){var
g=d[1][6];return j(am(c),WU,g)}var
h=[0,e,d[1]],i=co[1];return k(am(c),WV,i,h)}return j(cn[10],d,b)},eZ=function(a,b,c){var
e=c[2],f=b[2],d=a9(a,b[1],c[1]);return d?j(tn,f,e):d},a9=function(h,b,c){function
f(a,b){var
k=a,i=b;for(;;){var
e=Z(h,k),c=Z(h,i);if(typeof
e===g)switch(e){case
1:var
d=typeof
c===g?1===c?1:0:0;break;case
2:if(typeof
c===g){if(2<=c)return 1;var
d=0}else
var
d=0;break;default:var
d=typeof
c===g?0===c?1:0:0}else
switch(e[0]){case
1:if(typeof
c===g)var
d=0;else{if(1===c[0]){var
o=c[1],p=e[1];if(nF(h,p))if(nF(h,o))return ao(h,p,o);throw[0,cI]}var
d=0}break;case
2:if(typeof
c===g)var
d=0;else{if(2===c[0]){var
q=av(e[1],c[1]),R=c[4],S=c[2][2],T=e[4],U=e[2][2];if(q){var
r=av(U,S);if(r){var
k=T,i=R;continue}var
s=r}else
var
s=q;return s}var
d=0}break;case
3:if(typeof
c===g)var
d=0;else{if(3===c[0]){var
V=c[2],W=e[2],t=f(e[1],c[1]);return t?ih(f,W,V):t}var
d=0}break;case
4:if(typeof
c===g)var
d=0;else{if(4===c[0]){var
u=c[1],v=e[1],X=x(u),w=x(v)===X?1:0;return w?ih(f,v,u):w}var
d=0}break;case
5:if(typeof
c===g)var
d=0;else{if(5===c[0]){var
l=c[1],m=e[1],y=eZ(h,m[2],l[2]);if(y){var
z=av(m[1],l[1]);if(z){var
Y=x(l[3]),A=x(m[3])===Y?1:0;if(A){var
B=f(m[4],l[4]);if(B){var
_=l[3],$=m[3],aa=1;return bf(function(a,b,c){var
g=c[2],h=c[1],i=b[2],k=b[1];if(a){var
d=j(bl,k,h);if(d)return f(i,g);var
e=d}else
var
e=a;return e},aa,$,_)}var
n=B}else
var
n=A}else
var
n=z}else
var
n=y;return n}var
d=0}break;case
6:if(typeof
c===g)var
d=0;else{if(6===c[0]){var
k=e[1],i=c[1];continue}var
d=0}break;case
7:if(typeof
c===g)var
d=0;else
if(7===c[0])var
F=c[2],E=c[1],D=e[2],C=e[1],d=2;else
var
d=0;break;case
8:if(typeof
c===g)var
d=0;else
if(8===c[0])var
F=c[2],E=c[1],D=e[2],C=e[1],d=2;else
var
d=0;break;case
9:if(typeof
c===g)var
d=0;else
if(9===c[0])var
K=c[2],J=c[1],I=e[2],H=e[1],d=3;else
var
d=0;break;case
10:if(typeof
c===g)var
d=0;else
if(10===c[0])var
K=c[2],J=c[1],I=e[2],H=e[1],d=3;else
var
d=0;break;case
11:if(typeof
c===g)var
d=0;else{if(11===c[0]){var
M=c[1],N=e[1],ab=c[2],ac=M[2],ad=e[2],ae=N[2],O=m4(N[1],M[1]);if(O){var
P=f(ae,ac);if(P){var
k=ad,i=ab;continue}var
Q=P}else
var
Q=O;return Q}var
d=0}break;default:if(typeof
c===g)var
d=0;else{if(0===c[0])return e[1]===c[1]?1:0;var
d=0}}switch(d){case
1:return 1;case
2:var
G=f(C,E);if(G){var
k=D,i=F;continue}return G;case
3:var
L=f(H,J);if(L){var
k=I,i=K;continue}return L;default:return 0}}}return f(b,c)},u0=function(a,b,c,d,e,f){return[0,[0,b,0],[0,d,0],c,nB(0),e,f]},W4=[0,hh(m5)],u1=function(a){if(typeof
a===g)if(0===a)return 0;return W4},cK=function(a,b){var
e=b[2],o=b[3],p=b[1];if(0===a[6])var
d=a;else{var
f=a.slice();f[6]=0;f[7]=a[7]+1|0;var
d=f}var
q=d[7],j=u0(d,p,e,o,u1(e),q),i=d[1][1],c=i[1],n=[0,[0,c+1|0,k(dx[4],c,[1,[0,j,0]],i[2])]];if(typeof
e===g)if(0===e)var
l=[1,[0,uX(c)]],h=1;else
var
h=0;else
var
h=0;if(!h)var
l=0;var
r=jB(function(a){return[0,j,l]},c,n),m=d.slice();m[1]=r;return[0,m,[0,c]]},nM=[0,0],u2=function(a,b,c){var
f=b[2],g=b[1],j=b[3],l=fP[1],m=h(cn[16],a[8]);A(s(W6,W5),m,l,[0,a,[0,g,0]],c);var
d=a.slice();d[6]=1;var
n=u0(d,g,f,j,u1(f),c);nM[1]=nM[1]+1|0;var
e=nM[1],i=d.slice();i[8]=k(cn[4],e,[0,[0,n],c],d[8]);return[0,i,[1,e]]},jI=function(a,b){return u2(a,b,a[7])},u3=function(a,b,c){var
d=fS(a,c);if(typeof
d!==g)if(1===d[0]){var
e=d[1];if(0!==e[0]){var
f=fR(a,e[1])[2],h=[0,a,V(a,c)],i=fP[1];k(s(W9,W8),i,h,f);return u2(a,b,f)}}return F(W7)},c9=function(a,e,c){var
b=a[1];return ny(function(a,b,c){var
d=c[2];if(typeof
d!==g)if(1===d[0])return k(e,a,[0,b],d[1][1]);return a},c,b)},u4=function(a,e,c){var
b=a[1];return ny(function(a,b,c){var
d=c[2];if(typeof
d!==g)if(0===d[0])return k(e,a,[0,b],d[1][1]);return a},c,b)},jJ=function(a,b){var
c=dC(a,b)[4];return c===a[2]?1:0},e0=function(c,b){return nG(c,b,function(a){var
b=a.slice();b[4]=c[2];return b})},u5=function(a){var
b=a.slice();b[2]=nB(0);return b},u6=function(a,b){return 0===b[0]?d$(b[1],a[1]):b[1]<<16},u7=function(a,b){var
c=nK(a,b),d=a[7],e=co[1],f=aa(a);return a1(an(c<=a[7]?1:0,W_),aI,f,e,[0,a,b],c,d)},e1=[2,0,[0,[1,h(_,Xa)],1,[0,ez,ez]],1,W$],hm=function(a){if(typeof
a!==g)if(2===a[0])if(0===a[1]){var
b=a[4];if(typeof
b===g)var
c=0;else
if(0===b[0]){if(0===b[1])return 0;var
c=1}else
var
c=0}return[0,a]},u8=dr(nN,function(c){var
a=dW(c,Xc),e=cA(c,0,0,nO,fW,1)[1];fx(c,a,function(a,b,c){return b+1|0});return function(a,b){var
d=ch(b,c);h(e,d);return cB(b,d,c)}}),Xf=dr(nN,function(d){var
f=dq(d,Xd),a=dW(d,Xe),g=cA(d,0,0,nO,u8,1)[1];fx(d,a,function(a,b,c){return c<b?[0,c]:[0,c+a[f+1]|0]});return function(a,b,c){var
e=ch(b,d);e[f+1]=c;h(g,e);return cB(b,e,d)}}),u9=dr(nN,function(d){var
f=dq(d,Xg),a=dW(d,Xh),g=cA(d,0,0,nO,u8,1)[1];fx(d,a,function(a,b,c){return c===b?a[f+1]:[0,c]});return function(a,b,c){var
e=ch(b,d);e[f+1]=c;h(g,e);return cB(b,e,d)}}),aR=function(a,b,c){var
d=j(u9[1],0,a);return k(cs(d,fa,22),d,b,c)},hn=function(a,b,c){var
d=j(u9[1],0,a);return k(cs(d,654370799,24),d,b,c)},u_=function(a,b,c,d){var
e=j(a,b,c),f=e[2],g=e[1];return[0,g,aR([1,f],0,d),f]},c_=function(a,b,c){return u_(cK,a,b,c)},fY=function(a,b,c){return u_(jI,a,b,c)},nP=[0,function(a,b){throw[0,l,Xi]}],u$=[0,function(a,b){throw[0,l,Xj]}],Xp=dr(Xk,function(e){var
l=dq(e,Xm),i=dq(e,Xn),f=dW(e,Xo),a=cA(e,0,0,Xl,fW,1),m=a[1],n=a[23];fx(e,f,function(a,b,c){var
d=Z(a[l+1],c);if(typeof
d!==g)switch(d[0]){case
4:case
5:case
8:case
9:case
10:return j(h(n,a),0,d);case
11:var
e=d[2];a[i+1][1]=[0,d[1],a[i+1][1]];return k(a[1][f+1],a,0,e)}return d});return function(a,b,c,d){var
f=ch(b,e);f[i+1]=d;f[l+1]=c;h(m,f);return cB(b,f,e)}}),jK=function(a,b){var
c=[0,0],d=k(Xp[1],0,a,c),e=k(cs(d,fa,25),d,0,b),f=c[1];return w(function(a,b){return[11,b,a]},e,f)},va=function(a,b){var
c=Z(a,b);if(typeof
c!==g)if(11===c[0]){var
e=c[1],d=va(a,c[2]);return[0,[0,e,d[1]],d[2]]}return[0,0,c]},vb=function(a){return 0===a[0]?1:0},ho=0,cL=function(a){var
b=cS(a);return bO===b?a[1]:ac===b?dS(a):a},nQ=function(a){var
b=cL(a);if(b)return b[1];throw[0,cf,Xq]},fZ=function(b){return[ac,function(a){return[0,b,ho]}]},nR=function(c,b){return[ac,function(a){var
d=cL(b);if(d){var
e=d[2],f=d[1];return h(c,f)?[0,f,nR(c,e)]:cL(nR(c,e))}return 0}]},f0=function(d,b){return[ac,function(a){var
c=cL(b);if(c){var
e=c[1],f=f0(d,c[2]);return[0,h(d,e),f]}return 0}]},vc=function(a){function
c(f,b){return[ac,function(a){var
d=cL(f);if(d){var
g=d[1];return[0,g,c(d[2],b)]}var
e=cL(b);return e?cL(c(e[1],e[2])):0}]}return c(ho,a)},nS=function(a,b){if(0===b[0]){var
c=b[2],d=b[1];return j(d6,bZ(a),d)?[0,c]:[1,d,c]}return[0,b[1]]},vd=function(a,b){try{var
c=nS(a,cJ(a,b)),f=ab(a,b);if(0===c[0])if(0===f)var
d=0;else
var
e=[0,h(_,u(Xt,h(ak,c[1])))],d=1;else
if(0===f)var
d=0;else
var
g=c[1],e=[1,g,h(_,u(Xu,h(ak,c[2])))],d=1;if(!d)var
e=c}catch(f){f=m(f);if(f[1]===cI)return[0,h(_,Xs)];throw f}return e},ve=function(a,b){var
c=b[3],d=b[2];return[0,tI(nS(a,b[1])),d,c]},vf=function(a){if(typeof
a!==g)if(1===a[0])return a[1];throw[0,l,Xv]},e2=function(e,b,c,d){var
r=d;for(;;){var
a=Z(e,r);if(typeof
a===g)switch(a){case
1:return 1;case
2:if(h(ad[2],b[1]))return 2;throw[0,l,Xx];default:return 0}else
switch(a[0]){case
1:return[2,vd(e,a[1])];case
2:if(0!==a[1]){var
z=a[2],A=c_(e,z,a[4]),B=A[1],K=bF(B,A[2]);return[8,ve(B,z),K]}if(0===a[3]){var
w=a[2],x=c_(e,w,a[4]),y=x[1],J=bF(y,x[2]);return[7,ve(y,w),J]}break;case
3:var
L=a[2],M=a[1],N=p(function(a){return bF(e,a)},L);return[5,bF(e,M),N];case
4:var
O=a[1];return[1,p(function(a){return e2(e,b,c,a)},O)];case
5:var
t=a[1],ai=[0,[0,t[2][2]],0],aj=t[3],ak=p(function(a){var
d=a[1];return[0,d,e2(e,b,c,a[2])]},aj),al=hm(t[4]);return[3,[0,ai,ak,gP(function(a){return bF(e,a)},al)]];case
6:var
n=vf(Z(e,a[1])),C=vd(e,n);if(!ab(e,n))if(j(ad[3],n,b[1])){b[1]=j(ad[6],n,b[1]);try{var
Q=j(ad[22],n,c[1]);c[1]=j(ad[6],n,c[1]);var
D=Q}catch(f){f=m(f);if(f[1]!==o)throw f;var
D=0}var
P=e2(e,b,c,D);return[11,tI(C),P]}return[4,[2,C]];case
8:var
f=a[2],s=a[1];if(typeof
f===g){if(2===f){var
r=s;continue}}else
switch(f[0]){case
9:var
S=f[2],T=vf(Z(e,f[1]));c[1]=k(ad[4],T,S,c[1]);var
r=s;continue;case
10:var
r=[8,[8,s,f[1]],f[2]];continue}var
R=bF(e,f);return[13,e2(e,b,c,s),R];case
9:var
U=a[2],V=a[1];if(h(ad[2],b[1])){var
W=bF(e,U);return[9,bF(e,V),W]}throw[0,l,Xz];case
10:var
X=a[2],Y=a[1];if(h(ad[2],b[1])){var
_=bF(e,X);return[10,bF(e,Y),_]}throw[0,l,XA];case
11:var
E=a[1],$=e2(e,b,c,a[2]),am=E[1];return[14,[0,am,bF(e,E[2])],$];case
7:break;default:throw[0,l,Xy]}var
q=e,u=ad[1],F=r;for(;;){var
i=Z(q,F);if(typeof
i!==g)switch(i[0]){case
2:if(0===i[1])if(0!==i[3]){var
G=i[2],aa=i[4];if(0===G[2]){var
v=c_(q,G,aa),ac=v[2],ae=v[1],q=ae,u=k(ad[4],v[3],0,u),F=ac;continue}throw[0,l,XC]}break;case
7:var
H=[0,u],I=[0,ad[1]],af=i[2],ag=e2(q,H,I,i[1]);if(h(ad[2],H[1])){var
ah=Xw(q,I[1],ag);return[6,[12,ah],bF(q,af)]}throw[0,l,XD]}throw[0,l,XB]}}},ag5=function(a,b,c){var
e=[0,ad[1]],d=[0,ad[1]],f=e2(b,e,d,c);if(h(ad[2],e[1]))return a<50?oS(1+a,b,d[1],f):v(oS,[0,b,d[1],f]);throw[0,l,XE]},oS=function(a,e,c,d){function
f(a,b,c){return[13,c,bF(e,[9,[1,a],b])]}return k(ad[11],f,c,d)},bF=function(b,c){return y(ag5(0,b,c))},Xw=function(e,c,d){return y(oS(0,e,c,d))},ec=function(a,b){return h(b,a)},cM=function(a){var
b=cS(a);return bO===b?a[1]:ac===b?dS(a):a},J=function(a){if(typeof
a!==g)if(1===a[0])return a[1];var
b=co[1];return j(F(XH),b,[0,dB,a])},bG=function(a){if(typeof
a!==g)if(6===a[0]){var
b=a[1];if(typeof
b!==g)if(1===b[0])return b[1]}var
c=co[1];return j(F(XI),c,[0,dB,a])},vi=function(a){return 0===a[0]?1:0},hp=function(a){return[6,[1,a]]},vj=function(a,b){return 0<x(b)?[3,a,b]:a},vk=function(a){return[1,a]},aJ=function(a){return 0<x(a)?m3(function(a,b){return[10,a,b]},a):2},XJ=0,dD=function(a){return[1,c5(a)]},vl=function(d,b){var
c=bE(d,b);if(c){var
a=c[1];if(typeof
a!==g)if(1!==a[0]){var
e=p(fQ,a[1]);return w(function(a,b){var
c=b[4],e=hm(c);if(typeof
a===g)if(0===a)return c;if(e){if(a9(d,a,c))return c;throw[0,l,XK]}return c},0,e)}}return e1},vm=function(a,b){var
d=bE(a,b);if(d){var
c=d[1];if(typeof
c!==g)if(1!==c[0])return c[1]}return F(XL)},hq=function(a,b){var
d=a,e=b;for(;;){var
c=Z(d,e);if(typeof
c===g)var
f=2===c?1:0;else
switch(c[0]){case
9:case
10:var
f=1;break;case
0:return F(XM);case
1:return at(d,c[1]);case
2:var
h=c_(d,c[2],c[4]),d=h[1],e=h[2];continue;case
3:return cl(at(d,J(c[1])))[2];case
11:var
e=c[2];continue;default:var
f=0}return f?2:1}},nT=function(a,b){var
c=b[2],d=vm(a,J(b[1]));return cY(function(a){return j(tn,c,fQ(a)[2][2])},d)},vn=function(a,b){var
c=fQ(nT(a,b))[3];return p(function(a){return a[1]},c)},vo=function(a,b){return fQ(nT(a,b))[1]},vp=function(a,b,c){return fl(jG(a,b),c)},cN=function(a,b){var
c=L(b);return bz(function(a,b,c){return aR(c,a,b)},a,c)},hr=function(a,b,c,d){return cN(nT(a,[0,[1,b],c]),d)},jL=function(a){if(typeof
a!==g)switch(a[0]){case
1:return[0,[0,a[1],0]];case
3:var
b=a[1],c=a[2];if(typeof
b!==g)if(1===b[0])return[0,[0,b[1],c]];throw[0,l,XN]}return 0},vq=function(a,b){var
c=bE(a,b);if(c){var
d=c[1];if(typeof
d!==g)if(0!==d[0])return 1}return 0},XP=function(a){if(typeof
a!==g)if(5===a[0])return 1;return 0},hs=function(a,b){return 0===at(a,b)?1:0},ht=function(a,b){return 1===cl(at(a,b))[2]?1:0},XR=dr(vg,function(d){var
f=dq(d,XQ),a=dX(d,XG),e=a[1],i=a[2],c=a[3],b=cA(d,0,0,vh,fW,1),l=b[1],m=b[23];function
n(a,b,c){var
d=c[4],e=c[3],f=p(j(a[1][i+1],a,0),e);return[0,c[1],c[2],f,d]}eF(d,[0,e,function(a,b,c){if(typeof
c!==g)switch(c[0]){case
4:case
5:case
10:return j(h(m,a),0,c);case
8:var
d=c[1],i=k(a[1][e+1],a,0,c[2]);a[f+1][1]=[0,i,a[f+1][1]];return k(a[1][e+1],a,0,d);case
9:var
l=c[1];return[9,l,k(a[1][e+1],a,0,c[2])];case
11:var
n=c[1];return[11,n,k(a[1][e+1],a,0,c[2])]}return c},c,n]);return function(a,b,c){var
e=ch(b,d);e[f+1]=c;h(l,e);return cB(b,e,d)}}),cO=function(a){var
b=[0,0],c=j(XR[1],0,b),d=k(cs(c,fa,26),c,0,a);return[0,d,b[1]]};dr(vg,function(e){var
d=dq(e,XS),a=dX(e,XF),f=a[1],b=a[2],c=a[3],g=a[4],i=cA(e,0,0,vh,nI,1)[1];function
k(a,b,c,d){return 0}function
l(a,b,c){if(jJ(a[d+1][1],c))return 0;var
e=e0(a[d+1][1],c);a[d+1][1]=e;if(hs(a[d+1][1],c)){var
g=ag(a[d+1][1],c);return M(j(a[1][f+1],a,0),g)}return 0}eF(e,[0,g,function(a,b,c){return Z(a[d+1][1],c)},b,l,c,k]);return function(a,b,c){var
f=ch(b,e);f[d+1]=c;h(i,f);return cB(b,f,e)}});var
f1=function(a,b,g){var
c=cl(b)[1],e=t2(x(c)),f=[0,a,0],d=bf(function(a,b,c){var
d=a[1],i=a[2],e=[1,h(_,c)],f=g?jI(d,[0,e,b,aa(d)]):cK(d,[0,e,b,aa(d)]);return[0,f[1],[0,f[2],i]]},f,c,e),i=d[1];return[0,i,L(d[2])]},nU=function(a,b,c){var
d=f1(a,b,0),e=d[2],f=d[1],g=tw(b);return[0,f,e,bz(function(a,b,c){var
d=(g-a|0)-1|0,e=[1,c];return p(function(a){return aR(e,d,a)},b)},c,e)]},aM=function(a,b){var
c=b;for(;;){var
f=jL(c);if(f){var
h=f[1],i=h[2],j=bE(a,h[1]);if(j){var
d=j[1];if(typeof
d!==g){if(0!==d[0]){var
c=cN(d[1],i);continue}var
e=d[1];if(e)if(!e[2])return cN(e[1],i)}}return c}return c}},vr=function(a,b){var
c=aM(a,Z(a,b));if(typeof
c!==g)if(10===c[0])return 1;return 0},cP=function(a,b){var
c=aM(a,Z(a,b));if(typeof
c===g){if(2===c)return 0}else
switch(c[0]){case
9:var
e=c[1],d=cO(c[2]);return[0,[9,e,d[1]],d[2]];case
10:var
f=c[1],h=cP(a,c[2]);return D(cP(a,f),h)}an(2===hq(a,c)?1:0,XT);return[0,c,0]},vs=function(a,b){return g2(ak,nS(a,b))},a0=function(a,b){return bi(vs(a,b))},jM=function(a){return bi(h(cj,a))},jN=function(a){return bi(h(ak,a))},vt=function(a){return jN(a[1])},vu=function(c,b){if(0<x(b)){var
a=p(function(a){return a0(c,a)},b),d=p(function(a){var
b=i(a,aF[5]);return i(aF[3],b)},a);return ci(n(XU),d)}var
e=aF[5],f=i(n(XV),e);return i(aF[2],f)},vv=function(a,b){var
c=V(a,b),d=h(aN(vi),c);if(0<x(d)){var
e=a0(a,a4(d));return i(n(XW),e)}var
f=a0(a,a4(c));return i(n(XX),f)},ar=function(a,b){var
c=b[2],d=b[1];return af(a,[0,function(a){return vu(d,a)},c])},jO=function(a,b){if(0<gT(0)){var
f=u6(a,b);if(0===f)var
g=n(XY);else{var
d=0,c=f;for(;;){if(0<c){var
e=p3(vw);e.safeSet(2,aK(vw.safeGet(2)+(c%10|0)|0));var
d=[0,e,d],c=c/10|0;continue}var
g=bi(dR(XZ,L(d)));break}}var
h=g}else
var
h=P;return i(a0(a,cJ(a,b)),h)},vx=function(a,b){var
c=b[2],d=b[1],e=0;return af(a,[0,function(a){return jO(d,c)},e])},dE=function(a,b){var
c=b[2],d=b[1],e=0;return af(a,[0,function(a){return vv(d,c)},e])};fP[1]=ar;var
G=function(c,b){if(typeof
b===g)switch(b){case
1:return n(X4);case
2:return n(X5);default:return n(X3)}else
switch(b[0]){case
1:var
e=b[1];try{if(ab(c,e))var
o=i(jO(c,e),rH);else{var
C=0===e[0]?0:1;if(C)var
D=i(G(c,Z(c,[1,e])),d0),o=i(dZ,i(n(X2),D));else
var
o=jO(c,e)}}catch(f){f=m(f);if(f[1]!==cI)if(f[1]!==l)throw f;var
A=aF[5],B=i(n(X1),A);return i(aF[2],B)}return o;case
2:var
r=b[1],k=0,d=c,a=b;for(;;){if(typeof
a!==g)if(2===a[0]){var
p=a[2],z=a[4];if(av(r,a[1])){var
q=c_(d,p,z),k=[0,p,k],d=q[1],a=q[2];continue}}var
y=L(k),I=0===r?l6:rK,J=G(d,a);return bw(0,1,I(ni(function(a){var
b=a[2],c=a[1];if(typeof
b===g)if(1===b)return a0(d,c);var
e=cE(b),f=i(n(X0),e);return i(a0(d,c),f)},y)),J)}case
3:var
K=b[2],M=b[1],N=function(a){return G(c,a)};return t5(function(a){return G(c,a)},M,N,K);case
4:var
O=b[1];return ng(a$(jr,function(a){return G(c,a)},O));case
5:var
f=b[1],u=f[3],v=f[4],ah=0<x(u)?i(t,nh(a$(js,function(a){var
b=a[1],d=i(a5,bB(0,G(c,a[2])));return i(jN(b),d)},u))):P;if(a9(c,v,e1))var
w=P;else
var
al=i(t,G(c,v)),w=i(t,i(n(X_),al));var
ai=i(ah,w),aj=i(jM(f[2][2]),ai),ak=0===f[1]?NW:NX;return i(n(ak),aj);case
6:return i(bV,G(c,b[1]));case
7:var
Q=b[1],R=G(c,b[2]),S=i(t,t0);return bw(0,1,i(G(c,Q),S),R);case
8:var
U=b[1],V=i(fB,i(t,aY(2,G(c,b[2])))),W=G(c,U);return rL(dt(fC(aY(2,i(T(0),W)),V)));case
9:var
j=b[2],s=b[1];if(typeof
j!==g)if(6===j[0]){var
_=G(c,j[1]),$=i(n(X8),_);return i(G(c,s),$)}var
X=G(c,j),Y=i(t,iV);return bw(2,1,i(G(c,s),Y),X);case
10:var
aa=b[1],ac=G(c,b[2]),ad=i(t,n(X9));return bw(0,1,i(G(c,aa),ad),ac);case
11:var
ae=b[1],af=G(c,b[2]),ag=i(t,fB);return bw(0,1,i(nV(c,ae),ag),af);default:var
E=b[1],F=n(X6),H=i(h(fD,E),F);return i(n(X7),H)}},nV=function(a,b){var
c=b[1],d=i(t,G(a,b[2]));return i(n(gX(c)),d)},vy=function(a,b){return af(a,[0,V_,b])};nC[1]=vy;var
nW=function(a){var
b=a[2],c=a[1];if(0<x(b)){var
d=p(function(a){return G(c,a)},b);return ci(i(du,t),d)}return n(Ya)},Yb=function(a,b){var
c=b[1];return af(a,[0,nW,[0,c,ag(c,b[2])]])},ed=function(d){function
a(a){var
b=i(a_,n(aU(a.getLen(),45)));return i(n(a),b)}var
b=hk(d)?Yc:Yf,c=a(u(Yd,b)),e=0,f=L(c9(d,function(a,b,c){var
e=V(d,b);if(aB(function(a){if(0===a[0]){var
b=a[1];if(!j(d6,bZ(d),b))return 1}return 0},e))return[0,P,a];var
f=vu(d,e);return[0,i(f,i(t,i(iV,i(t,aY(2,nW([0,d,c])))))),a]},e)),g=h(aN(function(a){return gb(0,a)}),f),k=ci(T(1),g),l=a(Ye),m=c7(d),o=p(function(a){return G(d,a)},m),q=ci(T(1),o),r=i(a_,i(l,aY(2,i(T(1),q))));return i(c,i(aY(2,i(T(1),k)),r))},vz=function(a,b){return af(a,[0,ed,b])};Wf[1]=vz;var
C=function(a,b){return af(a,[0,function(a){return G(a[1],a[2])},b])},hu=function(a,b){return af(a,[0,ed,b])};co[1]=C;var
f2=function(a,b){return fZ([1,[1,a,b,0]])},Yg=function(a){return 0===a[0]?1:0},vA=function(a){return 0===a[0]?0:1},f3=function(a,b,c,d){return fZ([0,[0,d,[0,a,b,[0,c,0]]]])},cp=function(e,b,c,d){return f0(function(a){if(0===a[0]){var
f=a[1],g=f[2],h=f[1];an(gr(Yg,g),Yh);return[0,[0,h,[0,e,b,[0,c,g]]]]}var
d=a[1];if(0<x(d))an(vA(tt(d)),Yi);return[1,[1,e,b,[0,[0,c,d],0]]]},d)},z=function(a,b){return ec(f0(function(a){if(0===a[0]){var
c=a[1],d=c[2],e=h(b,c[1]);return f0(function(a){if(0===a[0]){var
b=a[1];return[0,[0,b[1],[0,d,b[2]]]]}return[1,[0,d,a[1]]]},e)}return fZ([1,[0,a[1],0]])},a),vc)},N=function(a){return fZ([0,[0,a,0]])},Yk=fZ(Yj),jP=function(a,b){function
c(a,b){if(b){var
d=b[2],e=b[1],f=function(a){return c(a,d)};return z(h(e,a),f)}return N(a)}return c(a,b)},vB=function(g,f,c,d){function
h(a){return[0,g,f,[0,c,[0,a,0]]]}function
i(j,b){return[ac,function(a){var
d=cM(b);if(d){var
k=d[2],e=d[1];if(0===e[0]){var
m=e[1],n=m[2],o=m[1],q=nR(vb,k),r=f0(function(a){if(0===a[0]){var
b=a[1],c=b[1];return[0,[0,c,h(b[2])]]}throw[0,l,Yl]},q);return[0,[0,[0,o,h(n)]],r]}return cM(i([0,e[1],j],k))}return[0,[1,[1,g,f,p(function(a){return[0,c,[0,a,0]]},j)]],ho]}]}return i(0,d)},vC=function(f,b,c,d,e){function
g(c,b){return[ac,function(a){if(b){var
d=b[2],h=b[1],i=k(e,f,ew(c,d),h);return[0,i,g([0,h,c],d)]}return[0,ho,ho]}]}return vB(f,b,c,vc(g(0,d)))},vD=function(a){return 6<a?1:0},jQ=function(a){return[0,a,0]},vE=function(a,b,c){if(ab(a,c)){var
i=[0,a,V(a,c)];j(s(Yn,Ym),ar,i);return jQ(a)}if(vD(b)){s(Yp,Yo);return jQ(a)}var
d=ag(a,c);try{try{var
n=cY(function(a){var
b=typeof
a===g?2===a?0:1:6===a[0]?1:0;return b?0:1},d),e=n}catch(f){f=m(f);if(f[1]!==o)throw f;var
e=cY(function(a){var
b=typeof
a===g?0===a?1:0:6===a[0]?1:0;return b?0:1},d)}var
f=ee(b0(a,c,h(aN(function(a){return e!==a?1:0}),d)),b+1|0,e),l=[0,f[1],f[2]]}catch(f){f=m(f);if(f[1]===o){var
k=[0,a,V(a,c)];j(s(Yr,Yq),ar,k);return jQ(a)}throw f}return l},ee=function(a,d,c){if(vD(d)){s(Yt,Ys);return jQ(a)}if(typeof
c===g)return 2===c?[0,a,c]:[0,a,c];else
switch(c[0]){case
0:return F(Yu);case
1:return[0,a,c];case
4:var
o=c[1],p=[0,a,0],f=w(function(a,b){var
e=a[2],c=ee(a[1],d+1|0,b);return[0,c[1],[0,c[2],e]]},p,o),q=f[1];return[0,q,[4,L(f[2])]];case
5:var
b=c[1],h=d+1|0,v=b[3],x=[0,a,0],m=w(function(a,b){var
d=b[1],e=a[2],c=ee(a[1],h,b[2]);return[0,c[1],[0,[0,d,c[2]],e]]},x,v),y=m[1],z=L(m[2]),n=ee(y,h,b[4]);return[0,n[1],[5,[0,b[1],b[2],z,n[2]]]];case
6:var
e=c[1];if(typeof
e!==g)if(1===e[0])return vE(a,d+1|0,e[1]);throw[0,l,Yv];case
7:return[0,a,c];case
8:var
r=c[2],i=ee(a,d+1|0,c[1]);return[0,i[1],[8,i[2],r]];case
9:var
t=c[1],j=ee(a,d+1|0,c[2]);return[0,j[1],[9,t,j[2]]];case
10:return F(Yw);case
11:var
u=c[1],k=ee(a,d+1|0,c[2]);return[0,k[1],[11,u,k[2]]];default:return[0,a,c]}},nX=function(a,b){return ee(a,0,b)[2]},au=function(a){var
g=a.getLen(),f=0,b=0;a:for(;;){if(b===g)var
h=f;else{var
d=a.safeGet(b)-9|0,i=d<0||4<d?23===d?1:0:(d-2|0)<0||1<(d-2|0)?1:0;if(i){var
b=b+1|0;continue}var
c=b+1|0;for(;;){if(c!==g){var
e=a.safeGet(c)-9|0,j=e<0||4<e?23===e?1:0:(e-2|0)<0||1<(e-2|0)?1:0;if(j){var
f=[0,l2(a,b,c-b|0),f],b=c+1|0;continue a}var
c=c+1|0;continue}var
h=[0,l2(a,b,c-b|0),f];break}}return ci(t,L(h))}},R=function(a,b){return i(a,i(t,b))},nY=function(c,b){if(typeof
b===g)return au(Yx);else
switch(b[0]){case
1:var
k=b[1],l=G(c,b[2]),m=R(au(Yz),l),o=R(jO(c,k),m);return R(au(YA),o);case
2:var
q=G(c,b[1]);return R(au(YB),q);case
3:var
r=G(c,aJ(b[1]));return R(au(YC),r);case
4:var
s=G(c,b[1]);return R(au(YD),s);case
5:var
t=nV(c,b[1]);return R(au(YE),t);case
6:var
u=b[1],a=p(function(a){return nV(c,a)},u),d=x(a),e=iX(function(a,b,c){if(0===a)return c;var
e=a<(d-1|0)?Tz:Tx;return i(b,i(e,c))},P,a);return R(au(YF),e);case
7:var
v=b[1],w=R(bV,G(c,b[2])),y=R(G(c,v),w);return R(au(YG),y);case
8:var
z=b[1],A=G(c,b[2]),B=R(bi(YH),A),C=R(G(c,z),B);return R(au(YI),C);case
9:var
D=b[1],E=G(c,b[2]),F=R(bi(YJ),E),H=R(G(c,D),F);return R(au(YK),H);case
10:var
I=G(c,b[1]),J=R(bi(YL),I),K=R(bV,R(n(YM),J)),L=R(n(YN),K);return R(au(YO),L);case
11:var
M=b[1],N=G(c,b[2]),O=R(n(YP),N),Q=R(G(c,M),O),S=R(n(YQ),Q);return R(au(YR),S);default:var
f=b[1],h=R(rI,G(c,b[2])),j=R(G(c,f),h);return R(au(Yy),j)}},vF=iR(jr,a_),vG=function(a){var
b=a[2],c=n(a[1]),d=i(c,gG(du,a$(vF,nZ,b)));return R(n(YS),d)},nZ=function(a){if(0===a[0]){var
d=a[3],e=nY(a[1],a[2]),f=vG(d);return R(e,R(n(YT),f))}var
b=a[3],g=nY(a[1],a[2]);if(0<x(b))var
h=a$(vF,vG,b),c=gG(au(YU),h);else
var
c=au(YX);var
i=R(g,R(n(YV),c));return R(au(YW),i)},f4=function(a,b){return af(a,[0,function(a){return nZ(a)},b])},vH=function(a,b){var
c=V(a,b),d=h(aN(vi),c);return 0<x(d)?a4(d):a4(c)},n0=function(a,b){return nq(bF(a,nX(a,b)))},vI=function(c,b){var
r=vH(c,b),s=fU(c,b),a=dQ(tX,h(aN(function(a){return O(a[1][1],YY)}),s));if(0<x(a)){var
e=a4(a),f=e[2],k=e[1];if(fL[1])var
l=P;else{var
d=aw(cc);jq(d,[0,k,f]);var
w=n(aO(d)),y=i(T(1),w),z=i(n(j(eN(Y1),aI,[0,k,f])),y),A=i(T(1),z);if(0<gT(0))var
B=au(Y2),q=i(t,R(h(fD,x(a)),B));else
var
q=P;var
C=i(q,A),D=i(n(Y3),C),l=R(vv(c,b),D)}var
m=l}else
var
m=P;var
u=ag(c,b),o=h(aN(function(a){var
b=typeof
a===g?0===a?1:0:6===a[0]?1:0;return b?0:1}),u);if(o)var
v=aY(2,i(a_,a$(a_,function(a){var
b=R(iV,n0(c,a));return R(a0(c,r),b)},o))),p=i(au(YZ),v);else
var
p=au(Y0);return i(m,i(T(1),p))},vJ=function(a){if(typeof
a===g)return au(Y4);else
switch(a[0]){case
1:var
n=n0(a[1],a[2]),o=i(T(1),n);return i(au(Y6),o);case
2:var
p=vJ(a[1]),q=i(T(1),p);return i(au(Y7),q);case
3:var
r=nZ(a[1]),s=i(T(1),r);return i(au(Y8),s);default:var
c=a[2],b=a[1],d=a[3],e=vH(b,c),f=vI(b,c),h=i(T(1),f),j=T(1),k=R(iV,i(n0(b,d),j)),l=R(a0(b,e),k),m=i(aY(2,i(T(1),l)),h);return i(au(Y5),m)}},n1=function(a){if(typeof
a===g)return 0;else
switch(a[0]){case
1:return 10;case
2:return n1(a[1])-1|0;case
3:return 5;default:return 10}},vK=function(a){if(0===a[0])return F(Y$);var
b=a[2],c=a[1],n=a[3];if(typeof
b===g)var
d=0;else
switch(b[0]){case
1:var
e=0===x(cO(b[2])[2])?1:0,d=1;break;case
2:var
e=1===x(cP(c,b[1]))?1:0,d=1;break;case
3:var
m=b[1],e=1===x(aD(function(a){return cP(c,a)},m))?1:0,d=1;break;default:var
d=0}if(!d)var
e=0;if(e){var
o=[0,function(a){return nY(c,a)},b];j(s(Zb,Za),af,o);var
i=function(a){var
b=aM(c,Z(c,a));if(typeof
b!==g)switch(b[0]){case
1:case
3:return[1,c,b];case
9:var
d=b[2];return[0,c,J(b[1]),d]}throw[0,l,Y9]};if(typeof
b!==g)switch(b[0]){case
1:return[0,c,b[1],b[2]];case
2:return i(b[1]);case
3:return i(a4(b[1]))}throw[0,l,Y_]}var
f=p(function(a){var
b=a[2];if(0<x(b)){var
c=tt(b);an(vA(c),Zc);return vK(c)}return 0},n);if(f){if(f[2]){var
h=dQ(function(a,b){var
c=n1(a);return ga(n1(b),c)},f);if(h){var
k=h[1];return h[2]?[2,k]:k}return 0}return f[1]}return[3,a]},c$=function(a,b){var
c=b[2],d=b[1],e=0;return af(a,[0,function(a){return vI(d,c)},e])},jR=function(a,b){var
c=0;return af(a,[0,function(a){return vJ(vK(b))},c])},Zg=[ac,function(a){var
b=W(cg,Zd),c=b?W(Y(i8(Zf),0,6),Ze):b;return c}],jS=function(a,b){return u6(a,b)},n3=function(d,b){var
N=b[2],c=b[1];h(am(d),ZI);h(am(d),ZJ);h(am(d),ZK);h(am(d),ZL);var
a=w(e0,u5(c),N),e=c9(a,function(a,d,c){return w(function(a,b){if(typeof
b!==g)switch(b[0]){case
4:var
c=b[1];if(0<x(c)){var
f=e0(a,d);return w(function(a,b){return e0(a,bG(b))},f,c)}return a;case
5:var
e=b[1][3];if(0<x(e)){var
h=e0(a,d);return w(function(a,b){return e0(a,bG(b[2]))},h,e)}return a}return a},a,c)},a),f=0;c9(e,function(a,b,c){var
ad=aB(function(a){return ao(e,b,a)},N),ae=V(e,b);if(aB(function(a){if(0===a[0]){var
b=a[1];return j(d6,b,bZ(e))?1:0}return 1},ae))if(jJ(e,b)){var
q=jS(e,b),O=V(e,b),P=c6(function(a){if(0===a[0]){var
b=a[2],c=a[1];if(j(d6,c,bZ(e)))return[0,h(ak,b)];var
d=u(Zh,h(ak,b));return[0,u(h(bY,c),d)]}return 0},O),o=dQ(function(a,b){return bI(a,b)},P);if(o){var
p=0,l=o[1],f=o[2];for(;;){if(f){var
s=f[2],t=f[1];if(av(l,t)){var
f=s;continue}var
p=[0,l,p],l=t,f=s;continue}var
v=L([0,l,p]);break}}else
var
v=0;var
w=dR(Zi,v),y=function(a){if(typeof
a===g)switch(a){case
1:return 2;case
2:break;default:return 3}else
if(6===a[0])return 4;return 1},i=a4(dQ(function(a,b){var
c=y(b);return y(a)-c|0},c)),z=function(a,b,c){if(typeof
c===g)var
d=0;else
if(6===c[0])var
e=J(Z(a,c[1])),d=1;else
var
d=0;if(!d)var
e=F(Zj);var
f=j(E(Zk),b,b);return[0,f,[0,b,jS(a,e)]]};if(typeof
i===g)var
n=0;else
switch(i[0]){case
4:var
W=i[1],D=bt(kT(function(a,b){return z(e,h(E(ZC),a),b)},W)),G=D[1],X=D[2],_=0<x(G)?dR(ZD,G):ZE,m=[0,_,X],n=1;break;case
5:var
H=i[1],$=H[3],aa=H[2],I=fJ(function(a){var
b=a[2];return z(e,h(ak,a[1]),b)},$),K=I[1],ab=I[2],ac=0<x(K)?u(ZG,dR(ZF,K)):ZH,m=[0,u(h(cj,aa[2]),ac),ab],n=1;break;default:var
n=0}if(!n)var
Q=j(eN(Zl),C,[0,e,i]),R=i4(me(Zm),Zn,Q),S=i4(me(Zo),Zp,R),r=i4(me(Zq),Zr,S),T=30<r.getLen()?u(Y(r,0,30),Zs):r,m=[0,T,0];var
B=m[1],U=m[2];M(function(a){var
b=a[2],c=a[1];A(am(d),Zt,q,c,b);return h(am(d),Zu)},U);j(am(d),Zv,q);j(am(d),Zw,q);if(ad)h(am(d),Zx);if(0<w.getLen())k(am(d),Zy,B,w);else
j(am(d),ZB,B);h(am(d),Zz);return h(am(d),ZA)}return 0},f);return h(am(d),ZM)},vL=function(a){function
b(a){return[0,ep,[0,[0,ZR,[0,kq,a[2]]],[0,[0,ZQ,[0,kq,a[4]-a[3]|0]],0]]]}var
c=[0,[0,ZS,b(a[2])],0];return[0,ep,[0,[0,ZT,b(a[1])],c]]},vM=function(d){var
a=0;return c9(d,function(a,b,c){var
e=V(d,b),f=fU(d,b),g=at(d,b),i=[0,ff,p(function(a){return 0===a[0]?[0,ff,[0,ZU,[0,[0,bL,h(ak,a[2])],0]]]:[0,ff,[0,ZV,[0,[0,bL,h(ak,a[1])],0]]]},e)],k=[0,ff,p(vL,f)],l=[0,bL,j(eN(ZW),af,[0,cE,g])],m=0,n=[0,ep,[0,[0,Z1,i],[0,[0,Z0,k],[0,[0,ZZ,l],[0,[0,ZY,[0,ff,p(function(a){return[0,bL,j(eN(ZX),C,[0,d,a])]},c)]],m]]]]];return[0,[0,cW(jS(d,b)),n],a]},a)},vN=function(a,b){var
c=rP(Z2),d=c[2],e=c[1];j(fG(0,d,Z3),n3,[0,a,b]);go(d);var
f=th(e);fj(e);return f},vO=function(a){var
c=aa(a)[1][1],b=i4(rY(0,[1,Z5]),Z4,c);return j(E(Z6),t6,b)},vP=function(a,b){var
f=aa(a)[1][1],k=lQ(f),l=i8(h(E(ZP),k)),m=[0,ep,D([0,[0,Z9,[0,bL,l]],[0,[0,Z8,vL(aa(a))],[0,[0,Z7,[0,bL,f]],0]]],b)],g=kP(vO(a)),e=hQ;function
d(a,b){gn(g,a[1],0,a[3]);a[4]=a[4]+a[3]|0;a[3]=0;var
c=a[2]<b?1:0;return c?rt(a,b):c}var
i=[0,d]?d:rt,c=[0,ae(hQ),e,0,0,e,i,aq(Bz,16),16];gE(c,m);j(c[6],c,0);return go(g)},vQ=function(a){if(0===zx(0)){var
c=vO(a),b=j(E(_k),t6,c);return cM(Zg)?rQ(_o,[0,_n,_m,nj,_l,b]):rQ(nj,[0,nj,_p,b])}return 0},vR=function(a,b,c){var
k=a?a[1]:_D;mF(function(a){s(_r,_q);var
b=aa(c),d=[0,c,V(c,a)];A(s(_t,_s),ar,d,aI,b);s(_v,_u);j(s(_x,_w),vz,c);var
e=aU(mD,45);h(s(_z,_y),e);return j(jc(_A),c$,[0,c,a])},b);var
f=mG(b);if(W(n2,_B)){nf(0);var
i=[0,[0,Z$,[0,ep,vM(c)]],[0,[0,Z_,[0,bL,k]],0]];vP(c,[0,_b,[0,[0,_a,[0,bL,vN(c,f)]],i]]);ne(0);return vQ(c)}if(W(n2,_C)){var
d=rP(ZN),e=d[2],g=d[1];j(fG(0,e,ZO),n3,[0,c,f]);go(e);return fj(g)}return 0},vS=function(a,b){if(W(n2,_E)){nf(0);var
c=function(a){var
c=a[2],d=a[1],b=d[1],e=d[2],f=[0,[0,_d,[0,bL,j(eN(_c),n3,[0,b,c])]],0],g=[0,[0,_e,[0,ep,vM(b)]],f],h=[0,[0,_f,[0,kq,jS(b,e)]],g];return[0,ep,[0,[0,_g,[0,bL,vN(b,c)]],h]]},d=[0,[0,_h,[0,ff,p(c,b)]],0],e=[0,_j,[0,[0,_i,c(a)],d]];vP(a[1][1],e);ne(0);return vQ(a[1][1])}return 0},vT=[0,_F],H=function(a,b){throw[0,vT,[0,a,b]]},n4=function(k,b){var
a=b[2],c=b[1];function
d(a){return h(am(k),a)}if(5<=gT(0)){j(d(_G),af,[0,ed,c]);d(_H)}if(typeof
a===g)var
i=0;else
switch(a[0]){case
0:case
1:var
i=1;break;default:var
i=0}if(!i){if(fL[1]){var
l=aa(c);uj(l[1],l[2])}aI(k,aa(c))}if(typeof
a===g)switch(a){case
1:return d(_J);case
2:return d(_K);case
3:return d(_L);case
4:return d(_M);case
5:return d(_N);default:return d(_I)}else
switch(a[0]){case
1:var
B=a[1];return j(d(_P),dz,B);case
2:var
m=a[1],D=[0,c,vE(c,0,m)[2]];return A(d(_Q),vx,[0,c,m],C,D);case
3:var
e=a[3],E=a[2],F=a[1];if(fL[1])return j(d(_R),jR,e);var
G=aa(c),H=aa(c),I=[0,c,V(c,E)];return function(a,b,c,d,e,f,g,h,i,j,k,l,m){return a.length==12?a(b,c,d,e,f,g,h,i,j,k,l,m):br(a,[b,c,d,e,f,g,h,i,j,k,l,m])}(d(_S),ar,I,C,[0,c,F],f4,e,aI,H,jq,G,jR,e);case
4:var
f=a[2],J=a[1];if(fL[1])return j(d(_T),jR,f);var
K=aa(c),L=aa(c);return oE(d(_U),C,[0,c,J],f4,f,aI,L,jq,K,jR,f);case
5:var
M=a[1];return j(d(_V),bX,M);case
6:var
N=a[1];return j(d(_W),bX,N);case
7:var
n=a[1],O=a[2];return a1(d(_X),dE,[0,c,n],bX,O,c$,[0,c,n]);case
8:var
o=a[1];return A(d(_Y),dE,[0,c,o],c$,[0,c,o]);case
9:var
P=a[2],Q=[0,c,a[1]],R=nP[1];return A(d(_Z),R,Q,bX,P);case
10:var
p=a[2],S=[0,c,a[1]],T=nP[1];return a1(d(_0),dE,[0,c,p],T,S,c$,[0,c,p]);case
11:var
U=a[2],W=a[1];return A(d(_1),bX,U,gV,W);case
12:var
q=a[1];return A(d(_2),dE,[0,c,q],c$,[0,c,q]);case
13:var
r=a[1],X=a[2];return a1(d(_3),dE,[0,c,r],gV,X,c$,[0,c,r]);case
14:var
s=a[1];return A(d(_4),dE,[0,c,s],c$,[0,c,s]);case
15:var
Y=a[2],Z=[0,c,a[1]];return A(d(_5),C,Z,gV,Y);case
16:var
_=a[2],$=[0,c,a[1]];return A(d(_6),C,$,gV,_);case
17:var
ab=[0,c,V(c,a[1])];return j(d(_7),ar,ab);case
18:var
ac=[0,c,V(c,a[1])];return j(d(_8),ar,ac);case
19:var
ad=[0,c,a[2]],ae=[0,c,a[1]];return A(d(_9),C,ae,C,ad);case
20:var
ag=[0,cE,a[3]],ah=[0,cE,a[2]],ai=[0,c,a[1]],aj=u$[1];return a1(d(__),aj,ai,af,ah,af,ag);case
21:var
t=a[1];return A(d(_$),dE,[0,c,t],c$,[0,c,t]);case
22:var
ak=[0,c,a[1]];return j(d($a),C,ak);case
23:var
u=a[1],al=[0,c,V(c,u)];return A(d($b),ar,al,Yb,[0,c,u]);case
24:var
v=a[1];return A(d($c),dE,[0,c,v],c$,[0,c,v]);case
25:var
w=a[1],an=[0,c,nX(c,a[2])];return a1(d($d),dE,[0,c,w],C,an,c$,[0,c,w]);case
26:var
x=a[4],y=a[1],ao=[0,x,a[6]],ap=[0,y,a[3]],aq=[0,x,a[5]],as=[0,y,a[2]];return oR(d($e),C,as,C,aq,C,ap,C,ao);case
27:var
at=a[3],au=a[1],av=nX(c,a[2]),aw=aa(c),ax=aa(c);return oE(d($f),vx,[0,c,au],C,[0,c,av],aI,ax,jq,aw,f4,at);case
28:var
ay=a[2],az=a[1],aA=bZ(c),aB=bZ(c);return function(a,b,c,d,e,f,g,h){return a.length==7?a(b,c,d,e,f,g,h):br(a,[b,c,d,e,f,g,h])}(d($g),bX,az,dz,aB,dz,aA,ay);case
29:var
aC=a[1];return j(d($h),bX,aC);case
30:var
aD=a[1],aE=[0,c,a[2]];return A(d($i),bX,aD,C,aE);case
31:var
aF=[0,c,V(c,a[1])];return j(d($j),ar,aF);default:var
z=a[1];return h(d(_O),z)}},n5=$(7,0),ef=function(a,b){if(typeof
b===g)switch(b){case
1:var
d=3,c=1;break;case
4:var
d=4,c=1;break;default:var
c=0}else
switch(b[0]){case
17:var
d=2,c=1;break;case
18:var
d=1,c=1;break;case
30:var
d=5,c=1;break;case
31:var
d=6,c=1;break;default:var
c=0}if(!c)var
d=0;switch(I(n5,d)){case
1:return j(tl($l),n4,[0,a,b]);case
2:return 0;default:return H(a,b)}},vU=function(a){var
E=a.getLen(),g=0,f=0,W=0;for(;;){if((0+E|0)<=f){if(f===(0+E|0)){var
o=$(g,0),b=W,n=0,l=g;for(;;){if(0<l){var
c=a.safeGet(b);if(hN<=c)if(hU<=c)if(e$<=c)var
d=0;else{var
r=a.safeGet(b+1|0),s=a.safeGet(b+2|0),t=a.safeGet(b+3|0),u=2!==r>>>6?1:0;if(u)var
v=u;else
var
K=2!==s>>>6?1:0,v=K||(2!==t>>>6?1:0);if(v)throw[0,bU];var
i=(c&7)<<18|(r&63)<<12|(s&63)<<6|t&63,d=1}else
if(gf<=c){var
w=a.safeGet(b+1|0),x=a.safeGet(b+2|0),L=2!==w>>>6?1:0,N=L||(2!==x>>>6?1:0);if(N)throw[0,bU];var
k=(c&15)<<12|(w&63)<<6|x&63,y=yZ<=k?1:0,O=y?k<=57088?1:0:y;if(O)throw[0,bU];var
i=k,d=1}else{var
z=a.safeGet(b+1|0);if(2!==z>>>6)throw[0,bU];var
i=(c&31)<<6|z&63,d=1}else
if(dg<=c)var
d=0;else
var
i=c,d=1;if(d){B(o,n,i);var
b=b+I(fA,a.safeGet(b))|0,n=n+1|0,l=l-1|0;continue}throw[0,bU]}var
j=o.length-1,P=1,Q=eI[8],R=eI[7],S=eI[6],T=eI[5],U=eI[4],C=function(a){return I(o,a)};if(0===j)var
D=[0];else{var
p=$(j,C(0)),q=j-1|0,H=1;if(!(q<1)){var
e=H;for(;;){p[e+1]=C(e);var
J=e+1|0;if(q!==e){var
e=J;continue}break}}var
D=p}var
V=[0,eI[1],D,j,U,T,S,R,Q,P],X=rz(SQ);try{var
Y=h(X,function(a){return tZ(V)}),G=Y}catch(f){f=m(f);if(f[1]!==iO)if(f[1]!==jo)throw f;var
G=F($m)}return M(function(a){var
e=a[2],c=e[2],d=e[1],f=a[1],h=0<=d?n5.length-1<=c?0:1:0;if(!h)F($n);if(!(c<d)){var
b=d;for(;;){B(n5,b,f);var
g=b+1|0;if(c!==b){var
b=g;continue}break}}return 0},G)}}throw[0,bU]}var
A=I(fA,a.safeGet(f));if(0<A){var
g=g+1|0,f=f+A|0;continue}throw[0,bU]}},jT=function(a,b){var
e=b[2],f=hh(b[1]),c=Z(a,e);if(typeof
c!==g)if(1===c[0]){var
d=c[1],i=eb(a,d);return fV(a,d,k(tD,function(a,b,c){if(b)if(c){var
d=c[1],e=b[1];if(e)if(d){var
j=d[1];if(0===h(bD[16],e[1]))var
g=e,f=1;else{if(0!==h(bD[16],j))throw[0,l,V3];var
g=d,f=1}}else
var
i=e,f=0;else
var
i=d,f=0;if(!f)var
g=i;return[0,g]}throw[0,l,V6]},f,i))}return a},n6=function(a){var
b=ad[1];function
c(a){throw[0,l,$o]}return[0,a,ad[1],c,b]},cq=function(a,b){var
c=a,e=b;for(;;){var
t=[0,c[1],e];j(s($q,$p),C,t);var
d=Z(c[1],e);if(typeof
d!==g)switch(d[0]){case
0:return F($r);case
1:return eb(c[1],d[1]);case
2:var
m=d[2],u=d[4],v=0===d[1]?ty:m5,i=c_(c[1],m,u),o=i[1],p=m[2],M=i[3],N=i[2];if(typeof
p===g){var
q=0===p?o:jT(o,[0,v,[1,M]]),O=jK(q,N),c=[0,q,c[2],c[3],c[4]],e=O;continue}throw[0,l,$t];case
3:var
w=d[2],f=J(d[1]),x=j(ad[3],f,c[2])?h(c[3],f):eb(c[1],f),y=cl(at(c[1],f))[1],L=dk(function(a,b){if(typeof
a===g)return 0===a?hi:cq(c,b);throw[0,l,$s]},y,w);return j(NV,function(a){if(a){var
b=a[1],c=function(a,b,c){return nz(j(gZ,b,fl(L,a)),c)};return k(bD[11],c,b,fO)}return 0},x);case
4:var
z=d[1];return uP(uO(function(a){return j(gZ,1,cq(c,a))},z));case
5:var
n=d[1],A=n[3];return 0===n[1]?uP(uO(function(a){return j(gZ,1,cq(c,a[2]))},A)):hh(2);case
8:var
B=d[1],r=k(gY,2,fO,cq(c,d[2]));return nA(cq(c,B),r);case
9:return k(gY,2,0,cq(c,d[2]));case
10:var
D=d[1],E=cq(c,d[2]);return nA(cq(c,D),E);case
11:var
G=d[2],H=c[4],I=c[3],K=c[2],c=[0,jT(c[1],d[1]),K,I,H],e=G;continue}return hh(1)}},vV=function(a,b,c){var
d=nU(a,at(a,b),c),f=d[2],g=d[3],h=d[1],i=bz(function(a,b,c){var
d=uQ(a);return 0===at(b,c)?b:fV(b,c,d)},h,f),j=ad[1],l=bz(function(a,b,c){return k(ad[4],c,a,b)},j,f),e=n6(i);return[0,[0,e[1],e[2],e[3],l],g]},n7=function(a,b,c){j(s($v,$u),C,[0,b,c]);var
e=cq(n6(b),c),f=j(gZ,a,e);if(f){if(0!==h(bD[16],f[1]))throw[0,l,$y];var
d=1}else
var
d=0;ej(s($x,$w),d,C,[0,b,c],vy,e);return d},$z=1,cr=function(a,b){return n7($z,a,b)},$A=2,da=function(a,b){return n7($A,a,b)},dF=function(a,b){if(0!==a)if(0!==b){if(3<=a)var
c=b;else{if(!(3<=b))return av(a,b)?a:0;var
c=a}return c}return 0},vW=function(a,b){return av(dF(a,b),b)},vX=function(a){switch(a){case
1:return 2;case
2:return 1;case
3:return 3;default:return 0}},vY=function(a,b){switch(a){case
1:return b;case
2:return vX(b);case
3:return 3;default:return 3<=b?3:0}},$B=3,$C=function(a,b){return av(a,b)},$D=0,$E=[0,$B,$C,function(a){return av($D,a)}],$F=h(rN(uY),$E),jU=function(a,b){if(typeof
b===g)return a;else
switch(b[0]){case
1:return w(jU,a,b[1]);case
2:return w(jU,a,bt(b[2])[2]);case
3:throw[0,l,$J];case
4:return w(jU,a,[0,b[1],[0,b[2],0]]);default:return[0,[0,b[1],0,b[2]],a]}},vZ=function(a){return L(jU(0,a))},oU=function(a,b,c){var
e=b,d=c;for(;;)if(typeof
d===g)return e;else
switch(d[0]){case
1:return a<50?oT(1+a,e,d[1]):v(oT,[0,e,d[1]]);case
2:return w($K,e,d[2]);case
3:throw[0,l,$M];case
4:var
f=d[2],e=hv(e,d[1]),d=f;continue;default:return e+1|0}},ag6=function(a,b,c){return a<50?oU(1+a,b,c[2]):v(oU,[0,b,c[2]])},oT=function(a,b,c){return w(hv,b,c)},hv=function(b,c){return y(oU(0,b,c))},$K=function(b,c){return y(ag6(0,b,c))},$L=function(b,c){return y(oT(0,b,c))},$N=function(a,b){return hv(a,b[1])},v0=function(a,b){return w($N,a,b)},v1=function(a){return v0(0,a[3])},jV=function(a,b){if(typeof
a===g)return[0,0,b];else
switch(a[0]){case
1:var
i=a[1],j=[0,0,b],e=w(function(a,b){var
d=a[1],c=jV(b,a[2]);return[0,[0,c[1],d],c[2]]},j,i),k=e[2];return[0,[1,L(e[1])],k];case
2:var
m=a[2],n=a[1],o=[0,0,b],f=w(function(a,b){var
d=b[1],e=a[1],c=jV(b[2],a[2]);return[0,[0,[0,d,c[1]],e],c[2]]},o,m),p=f[2];return[0,[2,n,L(f[1])],p];case
3:return F($P);case
4:var
q=[0,a[1],[0,a[2],0]],r=[0,0,b],h=w(function(a,b){var
d=a[1],c=jV(b,a[2]);return[0,[0,c[1],d],c[2]]},r,q),s=h[2],c=L(h[1]);if(c){var
d=c[2];if(d)if(!d[2])return[0,[4,c[1],d[1]],s]}throw[0,l,$Q];default:return b?[0,[3,b[1]],b[2]]:F($O)}},v2=function(a,e,c){function
d(c,b){if(typeof
b!==g)switch(b[0]){case
1:var
f=b[1];return[1,p(function(a){return d(c,a)},f)];case
2:var
a=b[1],h=b[2],i=a[2],j=aR(c,e,a[1]);return[2,[0,j,i],p(function(a){var
b=a[1];return[0,b,d(c,a[2])]},h)];case
4:var
k=b[1],l=d(c,b[2]);return[4,d(c,k),l]}return b}return d(a,c)},v3=function(a,b){return[0,b[1],[0,[1,a],b[2][2]],b[3],b[4]]},n8=function(a,d,c){var
e=x(a);return bz(function(a,b,c){return k(d,[1,c],(e-a|0)-1|0,b)},c,a)},$R=function(a,b){return n8(a,ah,b)},$S=function(a,b){return n8(a,hw,b)},v4=function(a,b,c,d){var
N=b[2],O=[0,a,0],u=w(function(a,b){var
c=a[1],f=a[2],g=b[1],h=[0,bZ(c),g],d=cK(c,[0,h,b[6],b[2]]),e=d[2];return[0,fV(d[1],e,b[5]),[0,e,f]]},O,N),P=u[1],e=L(u[2]),v=1===b[1]?n8(e,hn,b):b,K=v[2],f=bf(function(a,b,c){var
d=c[3];if(typeof
d===g)var
e=0;else
if(0===d[0])var
h=d[1],f=[0,p(function(a){return eX(a,function(a){return v3(b,a)})},h)],e=1;else
var
e=0;if(!e)var
f=d;var
i=c[4];return jF(a,b,function(a){return typeof
a===g?[0,[0,f,i]]:F(Wy)})},P,e,K),x=ad[1],i=w(function(a,b){return k(ad[4],b,0,a)},x,e),y=h(rN(uY),[0,hi,V7,V8]);function
z(b){var
a=ba(bE(f,b));if(typeof
a===g){var
c=eb(f,b);return function(a){return c}}else{if(0===a[0]){var
e=a[1];return function(a){var
c=vV(f,b,e),d=c[1],g=c[2],h=[0,d[1],i,a,d[4]];return w(function(a,b){return nA(a,cq(h,b))},hi,g)}}var
m=a[1];return function(a){var
d=f1(f,at(f,b),0),c=d[2],e=d[1],g=bz(function(a,b,c){var
d=uQ(a);return 0===at(b,c)?b:fV(b,c,d)},e,c),h=cN(m,p(vk,c)),j=ad[1],l=bz(function(a,b,c){return k(ad[4],c,a,b)},j,c);return cq([0,n6(g)[1],i,a,l],h)}}}var
r=h(y[1],z);function
A(a,b,c){var
d=ba(bE(c,a));return typeof
d===g?c:0===d[0]?fV(c,a,h(r,a)):fV(c,a,h(r,a))}var
l=k(ad[11],A,i,f);function
B(a,b){var
c=ba(bE(l,a));if(typeof
c!==g)if(0===c[0]){var
d=vV(l,a,c[1]),e=d[1],f=d[2];return M(function(a){var
b=fQ(a)[4];return j(gZ,2,cq(e,b))?0:H(e[1],[22,b])},f)}return 0}j(ad[10],B,i);var
D=[0,l,0],t=w(function(a,b){var
e=a[2],c=a[1],i=at(c,b),d=ba(bE(c,b));if(typeof
d===g)return[0,c,e];else{if(0===d[0]){var
f=nU(c,i,d[1]);return[0,f[1],[0,[0,b,[0,f[2],f[3]]],e]]}var
k=d[1],l=f1(c,i,0),m=l[2],h=l[1];j(s(0,$G),C,[0,h,k]);var
n=cN(k,p(vk,m));j(s(0,$H),C,[0,h,n]);return[0,h,[0,[0,b,[0,m,[0,n,0]]],e]]}},D,e),q=t[2],n=t[1];function
E(k){var
a=cY(function(a){var
b=a[2][1];return aB(function(a){return ao(n,k,a)},b)},q)[2][2];return function(B){return w(dF,3,p(function(a){function
c(a){var
b=a;for(;;){if(typeof
b===g)var
d=0;else
switch(b[0]){case
2:var
b=b[4];continue;case
3:var
l=b[2],e=J(b[1]);return w(dF,3,kT(function(a,b){try{var
f=h(B,fl(cY(function(a){return ao(n,e,a[1])},q)[2][1],a)),d=f}catch(f){f=m(f);if(f[1]!==o)throw f;var
d=fl(jG(n,e),a)}return vY(d,c(b))},l));case
4:return w(dF,3,p(c,b[1]));case
5:var
f=b[1],r=f[3],s=p(function(a){return c(a[2])},r);return w(dF,3,[0,c(f[4]),s]);case
6:var
b=b[1];continue;case
7:var
t=b[1],u=c(b[2]);return dF(vX(c(t)),u);case
8:var
j=b[2],i=b[1],d=1;break;case
9:var
x=b[1],y=c(b[2]);return dF(c(x),y);case
10:var
j=b[2],i=b[1],d=1;break;case
11:var
z=b[1][2],A=c(b[2]);return dF(vY(0,c(z)),A);case
0:var
d=0;break;default:return ao(n,b[1],k)?1:3}if(d){var
v=c(j);return dF(c(i),v)}return 3}}return c(a)},a))}}var
G=h($F[1],E),I=w(function(c,b){var
a=b[1],d=p(G,b[2][1]);return jF(c,a,function(a){if(typeof
a!==g)if(0===a[0]){var
b=a[1];if(!ih(vW,d,b[2]))H(c,3);return[0,[0,b[1],d]]}return F(Wx)})},l,q),S=j(c,e,d),Q=v[2],R=0;return[0,I,S,e,bf(function(a,f,c){var
b=c[3];if(typeof
b!==g)if(0===b[0]){var
d=b[1];return bz(function(a,b,c){var
d=fQ(c),e=d[2][2],g=d[1],h=d[3];return[0,[0,f,e,tG(e,a,g,p(function(a){return a[1]},h))],b]},a,d)}return a},R,e,Q)]},v5=function(a,b,c){return v4(a,b,$R,c)},v6=function(a,b,c){return v4(a,b,$S,c)},v7=function(e,b,c,d){var
a=v0(0,d),f=0===c?b:b+a|0;return[0,a,p(function(a){var
c=a[1],d=ah(e,f,a[2]);return[0,v2(e,b,c),d]},d)]},ah=function(d,b,c){if(typeof
c===g)return 0;else
switch(c[0]){case
0:var
q=c[1],r=aR(d,b,c[2]);return[0,ah(d,b,q),r];case
4:var
f=c[1],s=c[3],h=v7(d,b,f,c[2]),t=h[2];return[4,f,t,ah(d,b+h[1]|0,s)];case
5:var
u=c[1];return[5,u,ah(d,b+1|0,c[2])];case
6:var
a=c[1],v=c[2],i=x(a[2]),w=1===a[1]?hn(d,b+i|0,a):hn(d,b,a);return[6,w,ah(d,b+i|0,v)];case
7:var
j=c[1],y=c[2];return[7,j,ah(d,b+x(j)|0,y)];case
8:var
z=c[3],A=c[2],B=aR(d,b,c[1]),C=aR(d,b,A);return[8,B,C,ah(d,b+1|0,z)];case
9:var
D=c[3],E=c[2],F=ah(d,b,c[1]);return[9,F,E,ah(d,b,D)];case
10:var
k=c[2],G=c[3],H=k[2],I=k[1],J=ah(d,b,c[1]);return[10,J,[0,aR(d,b,I),H],G];case
11:var
K=c[2];return[11,ah(d,b,c[1]),K];case
12:return[12,aR(d,b,c[1])];case
13:var
L=c[1],M=aR(d,b,c[2]);return[13,aR(d,b,L),M];case
14:var
N=c[2],O=ah(d,b,c[1]);return[14,O,ah(d,b,N)];case
15:var
e=c[2],P=c[3],Q=ah(d,b,c[1]),l=function(a){return aR(d,b,a)};if(0===e[0])var
m=[0,l(e[1])];else
var
o=e[1],m=[1,o,l(e[2])];return[15,Q,m,P];case
16:var
R=c[3],S=c[1],T=ah(d,b,c[2]);return[16,S,T,p(function(a){var
e=a[2],c=v2(d,b,a[1]);return[0,c,ah(d,b+hv(0,c)|0,e)]},R)];case
17:var
U=c[1];return[17,p(function(a){return ah(d,b,a)},U)];case
18:var
n=c[1],V=c[2],W=n[2],X=n[1],Y=p(function(a){var
c=a[1];return[0,c,ah(d,b,a[2])]},V);return[18,[0,aR(d,b,X),W],Y];case
19:var
Z=c[4],_=c[3],$=c[1],aa=ah(d,b,c[2]),ab=ah(d,b,_);return[19,$,aa,ab,ah(d,b,Z)];case
20:var
ac=c[2];return[20,ah(d,b,c[1]),ac];case
21:return c;case
22:var
ad=c[2],ae=ah(d,b,c[1]);return[22,ae,ah(d,b,ad)];case
23:var
af=c[2],ag=ah(d,b,c[1]);return[23,ag,ah(d,b,af)];case
24:var
ai=c[2],aj=ah(d,b,c[1]);return[24,aj,ah(d,b,ai)];default:return c}},v8=function(a,b,c){var
d=c[2],e=c[1];return[0,e,d,v7(a,b,d,c[3])[2]]},hw=function(a,b,c){if(c){var
d=c[1];switch(d[0]){case
1:var
k=c[2],g=v8(a,b,d[1]);return[0,[1,g],hw(a,b+v1(g)|0,k)];case
2:var
h=d[1],l=c[2],m=h[1],n=aR(a,b,h[2]);return[0,[2,[0,m,n]],hw(a,b+1|0,l)];default:var
e=d[1],i=c[2],f=x(e[2]),j=1===e[1]?hn(a,b+f|0,e):hn(a,b,e);return[0,[0,j],hw(a,b+f|0,i)]}}return 0},v9=function(e,b,c,d){var
a=bt(d),f=a[2],g=a[1],h=$L(0,g);if(0===c)var
i=p(function(a){return al(e,b,a)},f);else
var
j=b+h|0,i=p(function(a){return al(e,j,a)},f);return[0,h,dP(g,i)]},al=function(d,b,c){if(typeof
c===g)return 0;else
switch(c[0]){case
0:var
i=c[2];return[0,al(d,b,c[1]),i];case
1:return b===c[1]?d:c;case
4:var
a=c[1],j=c[3],e=v9(d,b,a,c[2]),k=e[2];return[4,a,k,al(d,b+e[1]|0,j)];case
5:var
l=c[1];return[5,l,al(d,b+1|0,c[2])];case
6:var
f=c[1],m=c[2];return[6,f,al(d,b+x(f[2])|0,m)];case
7:var
h=c[1],n=c[2];return[7,h,al(d,b+x(h)|0,n)];case
8:var
o=c[2],q=c[1];return[8,q,o,al(d,b+1|0,c[3])];case
9:var
r=c[3],s=c[2],t=al(d,b,c[1]);return[9,t,s,al(d,b,r)];case
10:var
u=c[3],v=c[2];return[10,al(d,b,c[1]),v,u];case
11:var
w=c[2];return[11,al(d,b,c[1]),w];case
14:var
y=c[2],z=al(d,b,c[1]);return[14,z,al(d,b,y)];case
15:var
A=c[3],B=c[2];return[15,al(d,b,c[1]),B,A];case
16:var
C=c[3],D=c[1],E=al(d,b,c[2]);return[16,D,E,p(function(a){var
c=a[1],e=a[2];return[0,c,al(d,b+hv(0,c)|0,e)]},C)];case
17:var
F=c[1];return[17,p(function(a){return al(d,b,a)},F)];case
18:var
G=c[2],H=c[1];return[18,H,p(function(a){var
c=a[1];return[0,c,al(d,b,a[2])]},G)];case
19:var
I=c[4],J=c[3],K=c[1],L=al(d,b,c[2]),M=al(d,b,J);return[19,K,L,M,al(d,b,I)];case
20:var
N=c[2];return[20,al(d,b,c[1]),N];case
21:return c;case
22:var
O=c[2],P=al(d,b,c[1]);return[22,P,al(d,b,O)];case
23:var
Q=c[2],R=al(d,b,c[1]);return[23,R,al(d,b,Q)];case
24:var
S=c[2],T=al(d,b,c[1]);return[24,T,al(d,b,S)];default:return c}},v_=function(a,b,c){var
d=c[2],e=c[1];return[0,e,d,v9(a,b,d,c[3])[2]]},jW=function(a,b,c){if(c){var
d=c[1];switch(d[0]){case
1:var
h=c[2],f=v_(a,b,d[1]);return[0,[1,f],jW(a,b+v1(f)|0,h)];case
2:return[0,d,jW(a,b+1|0,c[2])];default:var
e=d[1],g=c[2];return[0,[0,e],jW(a,b+x(e[2])|0,g)]}}return 0},n9=function(a){var
b=a;for(;;){if(typeof
b!==g)if(20===b[0]){var
b=b[1];continue}return b}},e4=function(a,b){var
f=[0,a,0,0],d=w(function(a,b){var
e=a[3],f=a[2],c=cK(a[1],b),d=b[1],g=c[2],i=c[1],j=1===d[0]?h(_,$T):d[2];return[0,i,[0,g,f],[0,j,e]]},f,b),c=d[2],g=d[3],i=d[1];function
j(a){return bz(function(a,b,c){return aR([1,c],a,b)},a,c)}function
k(a){return bz(function(a,b,c){return al([2,c],a,ah([1,c],a,b))},a,c)}function
m(a){return bz(function(a,b,c){return v_([2,c],a,v8([1,c],a,b))},a,c)}function
n(a){return bz(function(a,b,c){return jW([2,c],a,hw([1,c],a,b))},a,c)}var
e=L(c),o=L(g);return[0,i,[0,j,k,m,n,function(a){var
c=[0,e,0],b=w(function(a,b){var
d=a[2],c=jV(b,a[1]);return[0,c[2],[0,c[1],d]]},c,a),d=b[2];if(0===b[1])return L(d);throw[0,l,$U]},e,o]]},v$=function(c,b){return e4(c,p(function(a){var
b=a[3],d=a[2],e=a[1];return[0,[0,bZ(c),e],d,b]},b))},n_=function(a,b,c){var
d=bt(c),e=d[2],f=d[1],g=v$(a,vZ([1,f])),h=g[2],i=g[1],j=0===b?e:p(h[2],e);return[0,i,dP(f,j),h]},wa=function(d,b){function
a(a){var
b=a[2],f=a[1];if(typeof
b===g)var
e=0;else
if(0===b[0])var
k=b[1],c=[0,i(a5,i(t,G(d,b[2]))),k],e=1;else
var
e=0;if(!e)var
c=[0,P,b];var
h=c[1],j=i(h,i(t,i(bV,bB(0,ap(d,c[2])))));return i(e5(d,f),j)}var
c=i(n($V),t);return a$(i(T(1),c),a,b)},e5=function(c,b){if(typeof
b===g)return Ew;else
switch(b[0]){case
1:var
f=b[1],h=p(function(a){return e5(c,a)},f);return i(dZ,i(ci(i(du,t),h),d0));case
2:var
a=b[2],j=b[1];if(0<x(a))var
k=bB(0,iT),l=function(a){var
b=a[1],d=i(t,i(bV,i(t,e5(c,a[2]))));return i(jN(b),d)},d=i(t,i(iS,i(bB($W,a$(i(iU,T(1)),l,a)),k)));else
var
d=P;return i(jM(j[2]),d);case
3:return a0(c,cJ(c,b[1]));case
4:var
m=b[1],o=i(t,e5(c,b[2])),q=i(t,i(n($X),o));return i(e5(c,m),q);default:var
e=b[1];return a0(c,[0,bZ(c),e])}},wb=function(a,b){if(0===b[0])return G(a,b[1]);var
c=b[2],d=b[1],e=[0,bZ(a),d],f=i(t,i(bV,i(t,G(a,c))));return i(a0(a,e),f)},ap=function(c,b){var
a=b;for(;;)if(typeof
a===g)return n($Y);else
switch(a[0]){case
1:var
B=a[1],C=n($Z),D=i(h(fD,B),C);return i(n($0),D);case
2:return a0(c,cJ(c,a[1]));case
3:var
E=i(t,n(a[1]));return i(n($1),E);case
4:var
f=a[1],F=a[3],e=n_(c,f,a[2]),j=e[1],H=e[2],I=ap(j,h(e[3][2],F)),J=i(T(1),I),K=i(n($2),J),L=i(T(1),K),M=i(t,i(wa(j,H),L)),N=i(wc(f),M);return i(n($3),N);case
5:var
k=a[1],O=a[2],l=e4(c,[0,k[1],0]),m=l[1],Q=ap(m,h(l[2][2],O)),R=i(T(1),Q),S=i(n($4),R),U=i(t,i(wd(m,k),S)),V=i(t,i(n($5),U));return i(n($6),V);case
6:var
o=v5(c,a[1],a[2]),W=ap(o[1],o[2]),X=i(T(1),W),Y=i(t,i(n($7),X)),Z=i(t,i(n($8),Y));return i(n($9),Z);case
7:var
q=a[1],_=a[2],r=e4(c,p(function(a){return a[1]},q)),s=r[1],$=i(t,ap(s,h(r[2][2],_))),ab=function(a){return wd(s,a)};return i(l6(a$(i(du,t),ab,q)),$);case
8:var
ac=a[3],ad=a[2],ae=a[1],af=aa(c),u=e4(c,[0,[0,dD($_),0,af],0]),v=u[2][2],d=u[1],ag=h(v,$$),ah=i(t,i(bV,bB(0,ap(d,h(v,ac))))),ai=i(a5,i(t,i(G(d,ad),ah))),aj=i(a5,i(t,G(d,ae))),ak=i(bB(0,rL(i(ap(d,ag),aj))),ai);return i(n(aaa),ak);case
9:var
al=a[2],am=a[1],an=i(t,i(t1,bB(0,ap(c,a[3])))),ao=i(rG,i(vt(al),an));return i(ap(c,am),ao);case
10:var
aq=a[1],ar=i(t1,jM(a[2][2]));return i(Tu,i(ap(c,aq),ar));case
11:var
as=a[1],at=i(rG,vt(a[2]));return i(ap(c,as),at);case
12:var
au=i(t,G(c,a[1]));return i(n(aab),au);case
13:var
av=a[1],aw=i(t,G(c,a[2])),ax=i(t,i(n(aac),aw)),ay=i(t,i(G(c,av),ax));return i(n(aad),ay);case
14:var
az=a[1],aA=ap(c,a[2]),aB=ap(c,az);return i(aB,i(t,aA));case
15:var
aC=a[3],aD=a[1],aE=wb(c,a[2]),aF=ap(c,aD);return i(aF,i(t,i(rE,i(aE,i(t,i(a5,i(a5,i(t,i(cE(aC),rF)))))))));case
16:var
aG=a[3],aH=a[2],aI=a[1],aJ=p(function(a){var
b=a[1],f=a[2],d=v$(c,vZ(b)),e=d[1],g=i(t,i(t0,bB(0,ap(e,h(d[2][2],f)))));return i(e5(e,b),g)},aG),aK=aI?i(n(aae),t):P,aL=i(fB,t),aM=ci(i(T(1),aL),aJ),aN=bB(aaf,i(iR(P,i(fB,t)),aM)),aO=i(t,i(n(aag),aN)),aP=i(t,i(aK,i(ap(c,aH),aO)));return i(n(aah),aP);case
17:var
aQ=a[1],aR=p(function(a){return ap(c,a)},aQ);return i(dZ,i(ci(i(du,t),aR),d0));case
18:var
aS=a[2],aT=a[1],w=p(function(a){var
b=a[1],d=i(t,i(bV,i(t,ap(c,a[2]))));return i(jN(b),d)},aS);if(0<x(w))var
aU=i(T(1),iT),y=i(t,i(iS,i(bB(0,ci(i(iU,T(1)),w)),aU)));else
var
y=P;return i(jM(aT[2]),y);case
19:var
aV=a[4],aW=a[3],aX=a[2],aY=a[1]?i(n(aai),t):P,aZ=bB(0,ap(c,aV)),a1=i(n(aaj),aZ),a2=i(T(1),a1),a3=i(bB(0,ap(c,aW)),a2),a4=i(t,i(n(aak),a3)),a6=i(t,i(aY,i(ap(c,aX),a4)));return i(n(aal),a6);case
20:var
a=a[1];continue;case
21:return h(fD,a[1]);case
22:var
a7=a[1],a8=i(t,ap(c,a[2])),a9=i(t,i(n(aam),a8)),a_=i(t,i(ap(c,a7),a9));return i(n(aan),a_);case
23:var
ba=a[1],bb=i(t,ap(c,a[2])),bc=i(t,i(n(aao),bb)),bd=i(t,i(ap(c,ba),bc));return i(n(aap),bd);case
24:var
be=a[1],bf=i(t,ap(c,a[2])),bg=i(t,i(n(aaq),bf));return i(ap(c,be),bg);default:var
z=a[1],A=i(a5,i(t,G(c,a[2])));return i(ap(c,z),A)}},wc=function(a){return 0===a?P:n(aar)},wd=function(a,b){var
c=b[1],d=c[2],e=c[1],f=1===b[2]?rH:P,g=i(f,i(t,i(a5,i(t,cE(d)))));return i(a0(a,e),g)},aat=function(a,b){return af(a,[0,function(a){var
d=a[2],b=d[2],c=n_(a[1],b,d[3]),e=i(t,wa(c[1],c[2])),f=i(wc(b),e);return i(n(aas),f)},b])},aau=function(a,b){return af(a,[0,function(a){return e5(a[1],a[2])},b])};u$[1]=function(a,b){return af(a,[0,function(a){return wb(a[1],a[2])},b])};nP[1]=aau;var
we=function(d){if(5<=gT(0)){var
a=0;c9(d,function(a,b,c){if(1!==x(h(aN(function(a){if(typeof
a!==g)if(6===a[0]){var
b=a[1];if(typeof
b!==g)if(1===b[0])return 1}return 0}),c))){var
k=[0,d,V(d,b)],l=aa(d);a1(F(aaz),aI,l,ar,k,hu,d)}h(aN(function(a){if(typeof
a!==g)switch(a[0]){case
4:return 1;case
5:return 1}return 0}),c);var
f=h(aN(function(a){return da(d,a)}),c);if(hk(d))var
e=0;else
if(1<x(f)){var
i=[0,d,V(d,b)],j=aa(d);a1(F(aay),aI,j,ar,i,hu,d);var
e=1}else
var
e=0;return M(function(a){return u7(d,a)},c)},a);var
b=c7(d);return M(function(a){return u7(d,a)},b)}return 0},wf=function(a){return c9(a,function(d,b,c){if(aB(function(a){return da(d,a)},c)){var
e=1;if(!aB(function(a){return a9(d,e,a)},c))return b0(d,b,[0,1,c])}return d},a)},f5=function(a,b,c){var
d=[7,[1,b],[1,c]],e=fX(a,b,c);return e?f3(a,d,aaA,e[1]):f2(a,d)},db=function(a,b){if(a){var
c=a[1],d=0===c[0]?c[2]:c[1],e=u(aaC,b);return[0,[1,h(_,u(h(ak,d),e))]]}return 0},n$=function(a,b){var
c=aM(a,Z(a,b));if(typeof
c!==g)switch(c[0]){case
1:return 1-ab(a,c[1]);case
9:return 1-ab(a,J(c[1]))}return 1},wg=function(a,e,c){var
d=c[3],f=[0,a,0],b=w(function(a,b){var
c=a[1],f=a[2],g=aa(c),d=u3(c,[0,dD(aaG),1,g],e);return[0,d[1],[0,d[2],f]]},f,d),g=b[2],h=b[1],i=c[4],j=c[3],k=dk(function(a,b){return[0,a[1],[1,b]]},j,g);return[0,h,[5,[0,c[1],c[2],k,i]]]},wh=function(a,e,c){var
d=[0,a,0],b=w(function(a,b){var
c=a[1],f=a[2],g=aa(c),d=u3(c,[0,dD(aaH),1,g],e);return[0,d[1],[0,d[2],f]]},d,c),f=b[2],g=b[1];return[0,g,[4,p(function(a){return[1,a]},f)]]},f6=function(a,b){var
c=cO(aM(a,Z(a,b)))[1];if(typeof
c!==g)if(6===c[0])return 1;return 0},aaL=dr(aav,function(d){var
e=dq(d,aaI),a=dX(d,aax),i=a[1],f=a[2],c=a[3],b=cA(d,0,0,aaw,fW,1),v=b[23],l=b[1];function
m(a,b,c){var
d=c[1],e=c[2],f=b[3],g=b[1],j=[0,g,1,gP(function(a){return u(a,u(aaJ,h(ak,d)))},f)];return[0,d,k(a[1][i+1],a,j,e)]}function
n(a,b,c){var
d=c[4],e=c[3],g=p(j(a[1][f+1],a,b),e);return[0,c[1],c[2],g,d]}eF(d,[0,i,function(a,b,c){var
o=b[3],f=b[1],E=b[2],F=Z(a[e+1][1],c),p=aM(a[e+1][1],F);if(E)if(f6(a[e+1][1],p))var
m=0;else
if(0===f){var
T=a[e+1][1],t=cO(p),u=t[2],l=t[1];if(typeof
l===g)var
s=0;else
if(6===l[0])var
B=[8,l,aJ(u)],s=1;else
var
s=0;if(!s)var
C=o?h(_,o[1]):c5(aaF),D=[0,[1,C],0,aa(T)],B=[2,1,D,1,[8,aaE,aJ([0,[9,aaD,l],u])]];var
d=B,m=1}else
var
m=0;else
var
m=0;if(!m)var
d=p;if(typeof
d!==g)switch(d[0]){case
4:case
5:return j(h(v,a),[0,f,1,o],d);case
2:if(0===d[1])if(0===f)var
n=0;else
var
w=d[4],q=d[2],n=1;else
if(0===f)var
w=d[4],q=d[2],n=1;else
var
n=0;if(n){var
y=c_(a[e+1][1],q,w),G=y[2],H=ea(y[1],q[3]);a[e+1][1]=H;return k(a[1][i+1],a,[0,f,0,0],G)}break;case
7:if(0!==f){var
I=d[2];return[7,k(a[1][i+1],a,aaK,d[1]),I]}break;case
8:var
K=d[1],L=k(a[1][i+1],a,[0,f,0,0],d[2]);return[8,k(a[1][i+1],a,[0,f,1,0],K),L];case
9:var
r=d[1],M=d[2],N=J(r),z=dQ(tX,fU(a[e+1][1],N));if(0<x(z))var
O=a4(z),A=ea(a[e+1][1],O);else
var
A=a[e+1][1];var
P=J(r),Q=cJ(a[e+1][1],P),R=[0,vs(a[e+1][1],Q)];a[e+1][1]=A;return[9,r,k(a[1][i+1],a,[0,f,0,R],M)];case
10:return j(h(v,a),[0,f,0,0],d);case
11:var
S=d[1];return[11,S,k(a[1][i+1],a,[0,f,0,0],d[2])]}return d},c,n,f,m]);return function(a,b,c){var
f=ch(b,d);f[e+1]=c;h(l,f);return cB(b,f,d)}}),hx=function(a,b,c){var
d=[0,a],f=aa(a),e=j(aaL[1],0,d),g=k(cs(e,fa,28),e,[0,c,0,0],b);return[0,ea(d[1],f),g]},oX=function(a,b){var
i=c7(b),e=p(function(a){return aM(b,Z(b,a))},i),f=h(aN(function(a){if(typeof
a===g)if(2<=a)return 0;return 1}),e),c=kU(function(a){if(typeof
a!==g)switch(a[0]){case
9:case
10:return 1}return 0},f),d=c[1];return a<50?oV(1+a,eY(b,c[2]),d):v(oV,[0,eY(b,c[2]),d])},aha=function(a,b,c,d){return gP(aaM,jH(b,c,d))},ag$=function(a,b,c){var
i=-1,l=b[8];function
m(a,b,c){return cw(b[2],c)}var
g=k(cn[11],m,l,i),n=c[8];function
o(a,b){return b[2]<=g?1:0}var
d=j(cn[14],o,n);k(s(WY,WX),g,uZ,b);j(s(W0,WZ),uZ,c);var
p=h(cn[16],d);h(s(W2,W1),p);var
q=h(cn[16],b[8]);an(q<=h(cn[16],d)?1:0,W3);var
e=b.slice();e[8]=d;function
r(a){var
b=a[1];if(0===b[0])return a;var
d=b[1],f=h(c8(e,c),d);return[0,[1,f],a[2]]}var
t=j(cn[23],r,d),f=e.slice();f[8]=t;return a<50?oX(1+a,f):v(oX,[0,f])},ag_=function(a,b,c,d){var
e=[7,[1,c],d],f=oa(b,c,d);return f?f3(b,e,aaO,f[1]):f2(b,e)},oW=function(a,b,c,d){var
e=hs(b,c),g=e?hs(b,d):e;an(g,aaP);if(ao(b,c,d))return b;var
h=ab(b,d)?0:ag(b,d),f=fX(b,c,d);if(f){var
i=f[1];return w(function(a,b){return bc(a,c,b)},i,h)}return b},ag9=function(a,b){var
c=c9(b,function(d,b,c){return b0(d,b,h(aN(function(a){return cr(d,a)}),c))},b),d=c7(c);return eY(c,h(aN(function(a){return cr(c,a)}),d))},hG=function(a,n,c,d){var
h=n,i=d;for(;;){an(hs(h,c),aaQ);var
o=aM(h,Z(h,i));if(ab(h,c))if(!f6(h,o)){A(s(aa5,aa4),C,[0,h,[1,c]],C,[0,h,o]);return h}var
t=hx(h,o,0),k=t[1],u=cO(t[2]),f=u[1],L=u[2],M=[0,k,V(k,c)];a1(s(aaS,aaR),bj,aC,ar,M,C,[0,k,f]);var
e=wi(k,L),w=function(f){return function(a){var
b=wk(a,c,f);we(b);return b}}(f);if(typeof
f!==g)switch(f[0]){case
2:if(0!==f[1]){var
N=f[4],O=f[2];j(s(aaU,aaT),bj,aC);var
y=c_(e,O,N),h=y[1],i=y[2];continue}break;case
3:var
P=f[2],Q=f[1],R=ag(e,c),b=J(Q),z=ck(function(e,b){return function(a){if(typeof
a!==g)if(5===a[0]){var
c=a[1][2],d=c[2];return ao(e,b,J(c[1]))?[0,d]:0}return 0}}(e,b),R);if(z){var
h=e,i=hr(e,b,z[1],P);continue}return w(e);case
4:var
B=f[1],S=ag(e,c),D=ck(function(a){if(typeof
a!==g)if(4===a[0])return[0,a[1]];return 0},S);if(D){var
E=D[1],T=x(E);return x(B)!==T?hl(e):bf(function(a,b,c){return bc(a,bG(aM(a,Z(a,b))),c)},e,B,E)}return a<50?hF(1+a,e,c,f):v(hF,[0,e,c,f]);case
5:var
m=f[1],F=ag(e,c),G=ck(function(a){if(typeof
a!==g)if(5===a[0])return[0,a[1]];return 0},F);if(G){var
p=G[1];if(da(e,f)){j(s(aaW,aaV),bj,aC);return hl(e)}if(eZ(e,m[2],p[2])){if(a9(e,m[4],e1)){if(a9(e,p[4],e1)){var
U=p[3],W=m[3];return bf(function(a,b,c){var
d=c[2],e=b[2];an(j(bl,b[1],c[1]),aaX);return bc(a,bG(aM(a,Z(a,e))),d)},e,W,U)}throw[0,l,aaY]}throw[0,l,aaZ]}return hl(e)}var
q=m[2][1],H=fI(function(e,q){return function(a){if(typeof
a!==g)if(3===a[0]){var
b=J(a[1]);if(ao(e,J(q),b))return 1}return 0}}(e,q),F);if(H){var
I=H[1],X=I[2],h=wk(b0(e,c,I[1]),c,f),i=X;continue}return a<50?hF(1+a,e,c,f):v(hF,[0,e,c,f]);case
6:var
r=f[1];if(typeof
r!==g)if(1===r[0]){var
K=r[1];j(s(aa1,aa0),bj,aC);return a<50?oW(1+a,e,c,K):v(oW,[0,e,c,K])}break;case
11:var
Y=f[2],_=f[1];j(s(aa3,aa2),bj,aC);var
h=wf(jT(e,_)),i=Y;continue}return w(e)}},ag8=function(a,b,c){var
d=b,f=c;for(;;){an(2===hq(d,f)?1:0,aa6);if(2!==f)j(s(aa_,aa9),C,[0,d,f]);var
e=aM(d,Z(d,f));if(typeof
e===g){if(2===e)return d}else
switch(e[0]){case
2:if(0!==e[1]){var
k=c_(d,e[2],e[4]),d=k[1],f=k[2];continue}break;case
9:var
h=e[2],i=e[1];if(ab(d,J(i)))if(f6(d,h))return a<50?hG(1+a,d,J(i),h):v(hG,[0,d,J(i),h]);else
return j(s(aa8,aa7),C,[0,d,e]),d;else
return a<50?hG(1+a,d,J(i),h):v(hG,[0,d,J(i),h]);case
10:var
l=e[2],d=e6(d,e[1]),f=l;continue}an(1-vr(d,e),aaB);return eY(d,[0,e,c7(d)])}},oV=function(a,b,c){return w(e6,b,c)},ag7=function(a,b,c,d){return b0(b,c,[0,d,ag(b,c)])},hF=function(a,f,c,d){var
b=f,e=d;for(;;){var
h=ag(b,c),i=da(b,e);if(aB(function(b){return function(a){return da(b,a)}}(b),h))if(i)return hl(wj(b,c,e));var
j=ag(b,c);if(aB(function(e,b){return function(a){return a9(b,e,a)}}(e,b),j))return b;var
g=wj(b,c,e);if(da(g,e)){var
b=g,e=1;continue}return g}},aaM=function(b){return y(oX(0,b))},oa=function(b,c,d){return y(aha(0,b,c,d))},dc=function(b,c){return y(ag$(0,b,c))},dG=function(b,c,d){return y(ag_(0,b,c,d))},aaN=function(b,c,d){return y(oW(0,b,c,d))},ob=function(b){return y(ag9(0,b))},bc=function(n,c,d){return y(hG(0,n,c,d))},e6=function(b,c){return y(ag8(0,b,c))},wi=function(b,c){return y(oV(0,b,c))},wj=function(b,c,d){return y(ag7(0,b,c,d))},wk=function(f,c,d){return y(hF(0,f,c,d))},hy=function(d,e,c){an(hs(d,e),aa$);var
f=[1,e,c];if(ab(d,e))return f2(d,f);var
h=aM(d,Z(d,c));function
a(a,b){return cp(d,f,a,b)}if(hk(d))return a(aba,N(d));if(f6(d,h))return a(abb,z(az(d,0,hp(e),h),N));var
b=ag(d,e);function
i(a){if(cr(d,a)){if(typeof
a===g){if(0===a)return 3}else
if(6===a[0])return 2;return 1}return 0}var
j=dQ(function(a,b){var
c=i(b);return i(a)-c|0},b);return vC(d,f,abf,j,function(a,b,c){var
d=cr(a,c),f=d?a:b0(a,e,b);function
g(a){var
f=cr(a,c);if(!d)if(f)return z(f3(a,[10,c],abc,b0(a,e,[0,c,b])),N);return N(a)}return cp(f,0,abe,z(az(f,abd,c,h),g))})},wl=function(a,b){var
c=n7(b[1],a,b[2])?N(a):Yk;return cp(a,[5,b],abg,c)},cQ=function(a,b,c){var
e=cl(hq(a,b))[2];if(typeof
e===g){switch(e){case
1:var
f=cO(b),k=f[2],m=f[1],h=cO(c),n=h[2],o=h[1],p=aa(a),i=cK(a,[0,dD(abj),0,p]),j=i[2],d=z(oc(i[1],[0,[9,[1,j],m],k],[0,[9,[1,j],o],n]),N);break;case
2:var
q=cP(a,c),d=z(oc(a,cP(a,b),q),N);break;default:var
d=z(az(a,0,b,c),N)}return cp(a,[0,b,c],abi,d)}throw[0,l,abk]},az=function(f,aI,Q,d){a1(s(abm,abl),C,[0,f,Q],bj,aC,C,[0,f,d]);var
R=Z(f,Q),S=Z(f,d),K=[0,R,S];function
k(a,b){return cp(f,K,a,b)}var
G=f2(f,K),h=aM(f,R),e=aM(f,S);if(a9(f,h,e))return k(abn,N(f));if(typeof
h===g)var
i=0;else
switch(h[0]){case
1:var
n=h[1];if(typeof
e!==g)switch(e[0]){case
4:var
aZ=e[1];if(ab(f,n)){var
ad=wh(f,n,aZ),ae=ad[2],a0=ad[1],a2=function(a){return z(az(a,0,ae,e),N)};return k(abA,z(dG(a0,n,ae),a2))}break;case
5:var
a3=e[1];if(ab(f,n)){var
af=wg(f,n,a3),ag=af[2],a4=af[1],a5=function(a){return z(az(a,0,ag,e),N)};return k(abB,z(dG(a4,n,ag),a5))}break}if(ab(f,n))return k(abz,z(dG(f,n,e),N));var
i=0;break;case
2:if(0===h[1]){var
a6=h[4],a7=h[2];if(typeof
e===g)var
y=1;else
switch(e[0]){case
1:var
i=0,y=0;break;case
2:if(0!==e[1]){var
a8=e[4],a_=e[2],ah=hx(f,h,0),a$=ah[2],ai=fY(ah[1],a_,a8),aj=[0,k(abC,z(az(ai[1],0,a$,ai[2]),N)),0],ak=hx(f,e,1),ba=ak[2],al=fY(ak[1],a7,a6),am=k(abD,z(az(al[1],0,al[2],ba),N)),bb=[0,am,aj];return vB(f,K,abE,[ac,function(a){function
c(e,b){return[ac,function(a){var
d=cL(e);if(d){var
f=d[1];return[0,f,c(d[2],b)]}return b?cL(c(b[1],b[2])):0}]}return bb?cL(c(am,aj)):0}])}var
i=1,y=0;break;case
11:var
i=1,y=0;break;default:var
y=1}if(y)var
i=2}else
var
i=0;break;case
3:var
ap=h[1],bc=h[2];if(typeof
e===g)var
r=1;else
switch(e[0]){case
2:case
11:var
i=1,r=0;break;case
1:var
i=0,r=0;break;case
3:var
bd=e[2],be=J(e[1]);if(ao(f,J(ap),be)){var
bf=J(ap),I=0,a=0,F=bc,v=bd,bg=ob(f);for(;;){if(F){if(v){var
b=v[1],c=F[1],aF=v[2],aG=F[2],aH=a+1|0,I=[0,function(a,b,c){return function(d){switch(vp(d,bf,a)){case
1:var
g=function(a){return N(dc(d,a))};return cp(d,[8,c,b],abG,z(cQ(d,c,b),g));case
2:var
h=function(a){return N(dc(d,a))};return cp(d,[9,c,b],abH,z(cQ(d,b,c),h));case
3:return fZ([0,[0,f,[0,f,0,[0,abI,0]]]]);default:var
e=function(a){var
e=dc(d,a);function
f(a){return N(dc(e,a))}return z(cQ(e,b,c),f)};return cp(d,[7,c,b],abF,z(cQ(d,c,b),e))}}}(a,b,c),I],a=aH,F=aG,v=aF;continue}}else
if(!v){var
bh=jP(bg,L(I));return k(abJ,f0(function(a){if(0===a[0]){var
b=a[1],c=b[2];return[0,[0,dc(f,b[1]),c]]}return[1,a[1]]},bh))}throw[0,cf,NG]}}var
i=6,r=0;break;case
8:var
i=4,r=0;break;default:var
r=1}if(r)var
i=6;break;case
4:var
M=h[1];if(typeof
e===g)var
t=1;else
switch(e[0]){case
2:case
11:var
i=1,t=0;break;case
1:var
O=e[1];if(ab(f,O)){var
aq=wh(f,O,M),ar=aq[2],bi=aq[1],bk=function(a){return z(az(a,0,h,ar),N)};return k(abK,z(dG(bi,O,ar),bk))}var
i=0,t=0;break;case
4:var
as=e[1],bm=x(as);if(x(M)===bm)return k(abL,jP(f,dk(function(a,b,c){if(typeof
a!==g)if(6===a[0]){var
d=a[1];if(typeof
d!==g)if(1===d[0])return hy(c,d[1],b)}return cQ(c,a,b)},M,as)));var
i=6,t=0;break;case
8:var
i=4,t=0;break;default:var
t=1}if(t)var
i=6;break;case
5:var
q=h[1];if(typeof
e===g)var
A=1;else
switch(e[0]){case
2:case
11:var
i=1,A=0;break;case
1:var
P=e[1];if(ab(f,P)){var
at=wg(f,P,q),au=at[2],bn=at[1],bo=function(a){return z(az(a,0,h,au),N)};return k(abM,z(dG(bn,P,au),bo))}var
i=0,A=0;break;case
3:var
aw=q[2],bp=e[2],bq=e[1],br=aw[2],bs=J(aw[1]),ax=J(bq);if(ao(f,bs,ax)){var
ay=cO(hr(f,ax,br,bp)),bt=ay[2],bu=ay[1],bv=function(a){return z(jX(a,bt),N)};return k(abN,z(az(f,0,h,bu),bv))}return G;case
5:var
w=e[1];if(eZ(f,q[2],w[2])){if(av(q[1],w[1])){var
bw=x(w[3]);if(x(q[3])===bw){var
bx=function(a){var
b=w[3],c=q[3];return jP(a,dk(function(a,b,c){var
f=b[2],d=a[2];an(j(bl,a[1],b[1]),abO);if(typeof
d!==g)if(6===d[0]){var
e=d[1];if(typeof
e!==g)if(1===e[0])return hy(c,e[1],f)}return cQ(c,d,f)},c,b))};return k(abP,z(az(f,0,q[4],w[4]),bx))}throw[0,l,abQ]}throw[0,l,abR]}return G;case
8:var
i=4,A=0;break;default:var
A=1}if(A)var
i=6;break;case
6:var
by=h[1];if(typeof
e===g)var
B=1;else
switch(e[0]){case
2:case
11:var
i=1,B=0;break;case
1:var
i=0,B=0;break;case
6:return k(abS,z(az(f,0,by,e[1]),N));case
8:var
i=4,B=0;break;default:var
B=1}if(B)var
i=5;break;case
7:var
bz=h[2],bA=h[1];if(typeof
e===g)var
D=1;else
switch(e[0]){case
2:case
11:var
i=1,D=0;break;case
1:var
i=0,D=0;break;case
7:var
bB=e[2],bC=e[1],aA=va(f,jK(f,bA)),aB=aA[1],bD=aA[2],bE=ob(f);j(s(abU,abT),bj,aC);var
bF=function(b){j(s(abW,abV),bj,aC);function
a(a){j(s(abY,abX),bj,aC);var
c=dc(b,a);function
d(a){j(s(ab0,abZ),bj,aC);return N(dc(f,a))}return z(cp(c,[6,aB],abh,jP(c,p(function(a,b){return wl(b,a)},aB))),d)}return z(cQ(b,bz,bB),a)};return k(ab1,z(az(bE,0,bC,bD),bF));case
8:var
i=4,D=0;break;default:var
D=1}if(D)var
i=6;break;case
8:if(typeof
e===g)var
i=3;else
switch(e[0]){case
2:case
11:var
i=1;break;case
8:var
bG=f6(f,e);if(gb(f6(f,h),bG))return cQ(f,h,e);var
aD=cO(h),bH=aD[2],bI=aD[1],aE=cO(e),bJ=aE[2],bK=aE[1];s(ab3,ab2);var
bL=function(a){return z(oc(a,bH,bJ),N)};return k(ab4,z(az(f,0,bI,bK),bL));case
1:var
i=0;break;default:var
i=3}break;default:var
i=0}switch(i){case
1:var
m=0;break;case
2:var
m=1;break;case
3:var
m=2;break;case
4:var
m=3;break;case
5:var
m=4;break;case
6:var
m=5;break;default:if(typeof
e!==g)if(1===e[0]){var
aa=e[1];if(ab(f,aa))return k(aby,z(dG(f,aa,h),N))}if(typeof
h===g)var
m=0;else
switch(h[0]){case
3:case
4:case
7:var
m=5;break;case
5:var
Y=e[1],_=h[1][2],aU=_[2];if(ao(f,J(_[1]),Y)){var
$=cO(hr(f,Y,aU,0)),aV=$[2],aW=$[1],aX=function(a){return z(jX(a,aV),N)};return k(abw,z(az(f,0,h,aW),aX))}return G;case
11:var
aY=h[2];return k(abx,z(az(wf(jT(f,h[1])),0,aY,e),N));case
8:var
m=2;break;case
6:var
m=4;break;default:var
m=0}}switch(m){case
1:var
o=0;break;case
2:var
o=1;break;case
3:var
o=2;break;case
4:var
o=3;break;case
5:var
o=4;break;default:if(typeof
e===g)var
o=0;else
switch(e[0]){case
2:if(0===e[1]){var
X=c_(f,e[2],e[4]);return k(abu,z(az(X[1],0,h,X[2]),N))}var
o=0;break;case
11:var
aR=e[2],aS=e[1],aT=function(a){return z(wl(a,aS),N)};return k(abv,z(az(f,0,h,aR),aT));default:var
o=0}}switch(o){case
1:var
u=0;break;case
2:var
u=1;break;case
3:var
u=2;break;case
4:var
u=3;break;default:if(typeof
h!==g)if(2===h[0]){if(0===h[1]){var
aO=h[4],aP=h[2],V=hx(f,e,1),aQ=V[2],W=fY(V[1],aP,aO);return k(abs,z(az(W[1],0,W[2],aQ),N))}throw[0,l,abt]}if(typeof
e===g)var
u=0;else{if(2===e[0]){var
aK=e[4],aL=e[2],T=hx(f,h,0),aN=T[2],U=fY(T[1],aL,aK);return k(abr,z(az(U[1],0,aN,U[2]),N))}var
u=0}}switch(u){case
1:var
E=0;break;case
2:var
E=1;break;case
3:var
E=2;break;default:if(typeof
h===g)var
E=0;else{if(8===h[0])return k(abq,z(az(f,0,h,[8,e,2]),N));var
E=0}}switch(E){case
1:var
H=0;break;case
2:var
H=1;break;default:if(typeof
e===g)var
H=0;else{if(8===e[0])return k(abp,z(az(f,0,[8,h,2],e),N));var
H=0}}if(!H)if(typeof
h!==g)if(6===h[0]){var
aJ=h[1];if(!s1(aI))return k(abo,z(hy(f,J(aJ),e),N))}return G},oc=function(p,u,c){var
B=aJ(c),D=[0,aJ(u),B],E=aD(function(a){return cP(p,a)},u),d=p,h=0,i=E,f=aD(function(a){return cP(p,a)},c);for(;;){if(i){var
v=i[2],b=i[1],w=fI(function(d,b){return function(a){return a9(d,b,a)}}(d,b),f);if(w){var
G=w[1][1],H=cr(d,b)?e6(d,b):d,d=H,i=v,f=G;continue}var
h=[0,b,h],i=v;continue}if(h){var
q=h[1];if(typeof
q===g)var
e=1;else
if(9===q[0])if(h[2])var
a=0,e=0;else
if(f){var
r=f[1];if(typeof
r===g)var
n=1;else
if(9===r[0])if(f[2])var
a=0,e=0,n=0;else{var
y=r[1],L=r[2],M=q[2],O=q[1];if(ab(d,J(y)))var
P=function(a){var
b=J(O);return z(f5(a,J(y),b),N)},x=z(cQ(d,M,L),P),a=1,e=0,n=0;else
var
a=0,e=0,n=0}else
var
n=1;if(n)var
a=0,e=0}else
var
a=0,e=0;else
var
e=1;if(e)var
a=0}else
var
a=0;if(!a){var
t=function(e,b,c,d){var
h=aD(function(a){return cP(e,a)},b),f=aD(function(a){return cP(e,a)},c);if(f){var
a=f[1];if(typeof
a===g)var
l=0;else
if(1===a[0])if(f[2])var
l=1;else{var
u=a[1];if(ab(e,u))return z(dG(e,u,aJ(h)),N);var
l=1}else
var
l=0}var
n=fI(function(a){return n$(e,a)},h);if(n){var
p=n[1],i=p[2],v=p[1];j(s(0,ab5),C,[0,e,i]);var
w=e6(e,i),x=function(a){return t(a,v,f,d)};return z(f3(e,[10,i],ab6,w),x)}var
q=fI(function(a){var
f=n$(e,a);if(f){var
j=f7(e,a);try{var
g=[0,Xr];try{var
c=j;for(;;){var
b=cL(c);if(b){var
d=b[1],h=b[2];if(vb(d))throw[0,g,d];var
c=h;continue}throw[0,o]}}catch(f){f=m(f);if(f[1]!==g)throw f;var
i=1}}catch(f){f=m(f);if(f[1]===o)return 0;throw f}return i}return f},f);if(q){var
r=q[1],y=r[2],A=r[1],B=function(a){return t(a,h,A,d)};return z(f7(e,y),B)}return k(d,e,h,f)},I=[0,d,aJ(f)],K=[0,d,aJ(h)];A(s(ab8,ab7),C,K,C,I);var
x=t(d,h,f,function(a,b,c){var
d=[0,a,aJ(c)],e=[0,a,aJ(b)];A(s(ab_,ab9),C,e,C,d);function
f(a){if(b){var
f=b[1];if(typeof
f===g)var
e=1;else
switch(f[0]){case
1:if(b[2])var
d=0,e=0;else{var
j=f[1];if(c){var
k=c[1];if(typeof
k===g)if(2===k)var
d=0,e=0,r=0;else
var
r=1;else
if(1===k[0]){if(!c[2]){var
m=k[1],h=e6(a,f),D=function(a){return z(f7(a,k),N)},E=ab(h,j),w=ab(h,m),G=0===E?0===w?ao(h,j,m)?F(acg):f2(h,[0,f,k]):f5(h,j,m):0===w?f5(h,m,j):f5(h,j,m);return z(G,D)}var
d=1,e=0,r=0}else
var
r=1;if(r)var
d=1,e=0}else{ab(a,j);var
d=1,e=0}}break;case
9:if(b[2])var
d=0,e=0;else
if(c){var
n=c[1],x=f[1],H=f[2];if(typeof
n===g)var
o=2===n?2:1;else
switch(n[0]){case
1:var
o=2;break;case
9:if(c[2])var
d=2,e=0,o=0;else{var
I=n[2],K=n[1];if(ab(a,J(x))){var
L=function(a){var
b=J(K);return z(f5(a,J(x),b),N)};return z(cQ(a,H,I),L)}var
d=2,e=0,o=0}break;default:var
o=1}switch(o){case
1:var
d=2,e=0;break;case
2:var
d=0,e=0;break}}else
var
d=2,e=0;break;default:var
e=1}if(e)var
d=0}else
var
d=0;switch(d){case
1:var
i=0;break;case
2:var
i=1;break;default:if(c){var
q=c[1];if(typeof
q===g)if(2===q){if(!c[2])throw[0,l,ace];var
i=0,p=0}else
var
p=1;else
if(1===q[0])if(c[2])var
i=0,p=0;else{if(ab(a,q[1]))throw[0,l,acf];var
i=0,p=0}else
var
p=1;if(p)var
i=0}else
var
i=0}if(!i)if(b){var
t=b[1];if(typeof
t===g)var
u=0;else
if(1===t[0])if(b[2])var
u=1;else{var
v=t[1];if(ab(a,v)){s(acd,acc);return z(dG(a,v,aJ(c)),N)}var
u=1}else
var
u=0}var
y=wi(a,b);function
B(a){var
d=[0,a,aJ(c)],e=[0,a,aJ(b)];A(s(aca,ab$),C,e,C,d);return z(jX(a,c),N)}return z(f3(a,[10,aJ(b)],acb,y),B)}var
h=aJ(c);return z(f3(a,[11,aJ(b),h],ach,a),f)})}return cp(p,D,aci,x)}},f7=function(c,b){an(2===hq(c,b)?1:0,acj);if(2!==b)j(s(acq,acp),C,[0,c,b]);var
m=[2,b];function
a(a,b){return cp(c,m,a,b)}var
d=aM(c,Z(c,b));if(typeof
d===g){if(2===d)return a(ack,N(c))}else
switch(d[0]){case
1:var
k=d[1];if(ab(c,k))return dG(c,k,2);break;case
2:if(0!==d[1]){var
l=fY(c,d[2],d[4]);return a(acl,z(f7(l[1],l[2]),N))}break;case
9:var
f=d[1];if(typeof
f!==g)if(1===f[0]){var
e=d[2],h=f[1];if(ab(c,h)){if(typeof
e!==g)if(6===e[0]){var
i=e[1];if(typeof
i!==g)if(1===i[0])return a(acm,z(f5(c,h,i[1]),N))}return f2(c,[2,e])}return a(acn,z(hy(c,h,e),N))}break;case
10:return a(aco,z(jX(c,cP(c,d)),N))}function
n(a,b,c){A(an(1-vr(a,c),acs),C,[0,a,c],ti,c);var
e=cr(a,c)?a:eY(a,b);return az(e,0,c,d)}return vC(c,[4,d],act,c7(c),n)},jX=function(c,b){var
a=kU(function(a){return n$(c,a)},b),e=D(a[1],a[2]);function
d(a,b){if(b){var
c=b[2],e=b[1],f=function(a){return d(a,c)};return z(f7(a,e),f)}return N(a)}return cp(c,[3,b],acr,d(c,e))},f8=function(a){return 0===a[0]?[0,a[1][1]]:0},jY=function(a,b,c){return nQ(cQ(a,b,c))},eg=function(a,b,c){return nQ(hy(a,b,c))},wm=function(a,b){return nQ(f7(a,b))},od=function(a,b){var
c=b[3],d=b[2],e=b[1];return[0,[0,uw(a),e],d,c]},oe=function(a){return[0,[1,a[1]],a[2],a[3]]},jZ=function(a){return 0===a[0]?[0,a[1]]:[1,a[1]]},j0=function(a,b){var
c=jw(a,b),d=c[3],e=c[2];return[0,jZ(c[1]),e,d]},dH=function(a,b){return[0,a,a,b]},wn=function(a,b,c){return[2,a,oe(b),1,c]},o0=function(a,b,c,d){var
e=c;a:for(;;)if(typeof
e===g)switch(e){case
1:return dH(1,1);case
2:return dH(2,2);case
3:return F(acw);default:return dH(0,1)}else
switch(e[0]){case
1:var
M=e[1],u=fJ(function(a){var
c=j(d,b,a);return[0,c[1],c[2]]},M);return[0,[4,u[1]],[4,u[2]],1];case
2:var
w=e[1],N=g_(b,w);return dH(jZ(he(b,w)),N);case
3:var
n=e[1],O=n[3],P=n[2],Q=n[1],I=bt(p(function(a){var
c=a[1],d=eh(b,a[2]);return[0,[0,c,d[1]],[0,c,d[2]]]},P)),R=I[2],S=I[1],o=j0(b,Q),T=o[3],U=o[2],V=o[1],i=[0,T,[0,V,U],S,wq(b,O)];return[0,[5,i],[5,[0,i[1],i[2],R,i[4]]],1];case
4:return dH([6,ei(b,e[1],d)[1]],1);case
5:var
W=e[2],x=ei(b,e[1],d),X=x[2],Y=x[1],Z=fJ(function(a){return ei(b,a,d)},W)[1];return dH([3,Y,Z],cl(X)[2]);case
6:var
q=wo(b,e[1],e[2]),_=q[1],$=[7,q[2],q[3]],aa=0;return dH(aH(function(a,b){return wn(aa,a,b)},_,$),1);case
7:return a<50?hH(1+a,b,0,e[1],e[2],d):v(hH,[0,b,0,e[1],e[2],d]);case
8:return a<50?hH(1+a,b,1,e[1],e[2],d):v(hH,[0,b,1,e[1],e[2],d]);case
9:var
ab=e[2],ac=ei(b,e[1],d)[1];return dH([9,ac,ei(b,ab,d)[1]],2);case
10:var
ad=e[2],y=j(d,b,e[1]),ae=y[2],af=y[1],z=j(d,b,ad);return[0,[10,af,z[1]],[10,ae,z[2]],2];case
11:var
ag=e[2],k=jZ(he(b,[0,e[1]])),A=j(d,b,ag);return[0,[8,[6,k],[9,k,A[1]]],[8,[6,k],[9,k,A[2]]],1];case
12:var
B=j(d,b,e[1]),r=B[3],ah=B[1];if(typeof
r===g){switch(r){case
2:var
C=2,t=1;break;case
0:var
t=0;break;default:var
C=0,t=1}if(t)return[0,ah,C,r]}throw[0,l,acu];case
13:var
ai=e[2],D=j(d,b,e[1]),aj=D[2],ak=D[1],E=j(d,b,ai);return[0,[8,ak,E[1]],[8,aj,E[2]],1];case
14:var
G=e[1],al=e[2],am=G[1],J=[0,am,ei(b,G[2],d)[1]],H=j(d,b,al);return[0,[11,J,H[1]],[11,J,H[2]],1];case
15:var
s=[0,e[1],0],f=e[2];for(;;){if(typeof
f!==g)switch(f[0]){case
0:var
f=f[1];continue;case
6:var
h=s,m=f[1],an=f[2];for(;;){if(h){var
K=[14,h[1],m],h=h[2],m=K;continue}var
e=[6,m,an];continue a}case
15:var
s=[0,f[1],s],f=f[2];continue}return aZ(b,2)}default:var
L=e[1];return j(d,g$(b,e[2]),L)}},ahe=function(a,b,c){return a<50?o0(1+a,b,c,eh):v(o0,[0,b,c,eh])},ahd=function(a,b,c,d){var
g=c5(acx),j=nu(c),h=[0,[0,g,0,g9(b)],j],e=bC(b,h),f=jZ(he(e,[0,g])),i=eh(e,c),k=i[2],l=i[1],m=wp(e,d)[1],n=jK(dB,[8,[6,f],[9,f,l]]);return[0,h,n,jK(dB,[8,m,[9,f,k]])]},oZ=function(a,b,c,d){var
e=nu(c),f=j(d,bC(b,e),c),g=f[3],h=f[1],i=1;return[0,aH(function(a,b){return wn(i,a,b)},e,h),g]},ahc=function(a,b,c){return a<50?oZ(1+a,b,c,eh):v(oZ,[0,b,c,eh])},oY=function(a,b,c){return wp(b,c)[1]},ahb=function(a,b,c){return c?a<50?oY(1+a,b,c[1]):v(oY,[0,b,c[1]]):e1},hH=function(a,b,c,d,e,f){var
g=bC(b,[0,d,0]),h=ei(g,e,f),i=h[2],j=h[1];return dH([2,c,od(g,d),0,j],i)},acv=function(b,c,d){return y(o0(0,b,c,d))},eh=function(b,c){return y(ahe(0,b,c))},wo=function(b,c,d){return y(ahd(0,b,c,d))},ei=function(b,c,d){return y(oZ(0,b,c,d))},wp=function(b,c){return y(ahc(0,b,c))},dd=function(b,c){return y(oY(0,b,c))},wq=function(b,c){return y(ahb(0,b,c))},aiG=function(b,c,d,e,f){return y(hH(0,b,c,d,e,f))},of=function(a,b,c){var
d=c[3],e=c[2],h=c[1],i=j(a,b,nv(d)),n=g$(b,h),f=uF(i,d),r=1===e?f:n;return[0,f,[0,e,p(function(a){var
c=g9(r),h=a[1],d=h[1][1],i=bt(h[2]),q=i[2],e=i[1],n=bC(r,q),f=tH(a[1])[2],b=a[2];switch(b[0]){case
1:var
x=b[1],s=w(function(a,b){var
c=b[2][1],d=b[1],e=bD[1],f=w(function(a,b){var
c=b[2],r=b[1];for(;;){if(typeof
c!==g)if(0===c[0]){var
c=c[1];continue}if(typeof
c!==g)if(2===c[0]){var
f=c[1];if(1!==f[0]){var
h=[0,NI],s=f[1];try{var
e=0,d=q;for(;;){if(d){var
p=d[2];if(j(bl,s,d[1][1]))throw[0,h,e];var
e=e+1|0,d=p;continue}throw[0,o]}}catch(f){f=m(f);if(f[1]===h){var
i=f[2];try{var
u=j(bD[22],i,a),n=u}catch(f){f=m(f);if(f[1]!==o)throw f;var
n=m5}var
t=tz(n,r);return k(bD[4],i,t,a)}throw f}}}throw[0,l,acz]}},e,d);if(j(tC,c,a))throw[0,l,acA];return k(gY,c,[0,f],a)},tB,x);return[0,d,c,0,e,w(function(a,b){if(j(tC,b,a))return a;var
c=jm(b)?fO:0;return k(gY,b,c,a)},s,tA),f];case
2:return[0,d,c,[1,dd(n,b[1])],e,hi,f];default:var
t=b[3],u=b[2],v=b[1];return[0,d,c,[0,p(function(a){var
b=a[2],h=a[1];function
d(c,b){if(typeof
b!==g)switch(b[0]){case
3:var
a=b[1],i=a[2],j=a[1],k=p(function(a){var
b=a[1];return[0,b,dd(c,a[2])]},i),m=[0,0,g0(j)],n=m7(v,h,function(a){throw[0,l,acy]});return[0,[5,[0,n,m,k,wq(c,t)]],0,1];case
13:var
o=b[2],e=d(c,b[1]),q=e[2],r=e[1],f=eh(c,o);return[0,[8,r,f[1]],[8,q,f[2]],1]}return acv(c,b,d)}return ei(n,b,d)[1]},u)],e,hi,f]}},d)]]},wr=function(a){function
c(d,b){if(typeof
b===g)return acB;else
switch(b[0]){case
1:var
r=b[1],e=fJ(function(a){return c(d,a)},r),f=e[2],s=e[1],t=aB(function(a){return gb(0,a)},f)?[1,f]:0;return[0,[1,s],t];case
2:var
h=b[1],i=h[1],u=h[2],a=tq(p(function(a){var
e=a[1],b=c(d,a[2]);return[0,e,b[1],b[2]]},u)),k=a[3],l=a[1],v=a[2],w=aB(function(a){return gb(0,a)},k)?[3,[0,i,dP(l,k),0]]:0;return[0,[2,[0,i,dP(l,v)]],w];case
3:var
m=b[2],n=c(m,b[1]);return[0,[3,n[1],m],n[2]];case
4:var
x=b[2],o=c(d,b[1]),y=o[1];if(0!==o[2])j(tl(acC),aI,d);return[0,y,x];case
5:var
z=b[2],q=c(d,b[1]);return[0,[5,q[1],z],q[2]];default:return[0,b,0]}}return c(m8,a)},f9=function(a,b){var
d=a,c=b;for(;;)if(typeof
c===g)return 0;else
switch(c[0]){case
1:var
j=c[1];return[1,p(function(a){return f9(d,a)},j)];case
2:var
e=c[1],k=e[2],f=j0(d,e[1]),l=f[2],m=f[1],h=bt(k),n=h[2],o=h[1];return[2,[0,m,l],dP(o,p(function(a){return f9(d,a)},n))];case
3:var
q=c[1],d=g$(d,c[2]),c=q;continue;case
4:return F(acD);case
5:var
r=c[1],s=f9(d,[0,c[2]]);return[4,f9(d,r),s];default:var
i=c[1];return[0,i,g9(d)]}},bH=function(c,b){if(typeof
b===g){if(3===b){var
d=c5(acE);return[0,[2,[0,d]],[0,[0,d,1,g9(c)],0]]}}else
switch(b[0]){case
0:var
e=b[2],s=b[1],f=bH(g$(c,e),s);return[0,[0,f[1],e],f[2]];case
1:var
t=b[1],h=w(function(a,b){var
e=a[2],f=a[1],d=bH(c,b);return[0,[0,d[1],f],[0,d[2],e]]},acF,t),u=h[2],v=L(h[1]);return[0,[1,v],fm(u)];case
3:var
a=b[1],x=a[3],y=a[2],z=a[1],i=w(function(a,b){var
e=a[2],f=a[1],g=b[1],d=bH(c,b[2]);return[0,[0,[0,g,d[1]],f],[0,d[2],e]]},acG,y),A=i[2],B=L(i[1]);return[0,[3,[0,z,B,x]],fm(A)];case
9:var
C=b[1],j=bH(c,b[2]);return[0,[9,C,j[1]],j[2]];case
10:var
E=b[2],k=bH(c,b[1]),F=k[2],G=k[1],l=bH(c,E),H=l[1];return[0,[10,G,H],D(l[2],F)];case
11:var
I=b[1],m=bH(c,b[2]);return[0,[11,I,m[1]],m[2]];case
12:var
n=bH(c,b[1]);return[0,[12,n[1]],n[2]];case
13:var
J=b[1],o=bH(c,b[2]),K=o[2],M=o[1],p=bH(c,J),N=p[1];return[0,[13,N,M],D(p[2],K)];case
14:var
O=b[1],q=bH(c,b[2]);return[0,[14,O,q[1]],q[2]];case
15:var
P=b[1],r=bH(c,b[2]);return[0,[15,P,r[1]],r[2]]}return[0,b,0]},ai=function(c,b){var
a=b;for(;;)if(typeof
a===g)return 0;else
switch(a[0]){case
1:var
i=he(c,a[1]);return 0===i[0]?[1,i[1]]:[2,i[1]];case
2:return[3,a[1]];case
3:var
l=a[1],M=a[3],m=ws(c,l,a[2]),N=m[2];return[4,l,N,ai(m[1],M)];case
4:var
n=a[1],O=a[2],o=bC(c,[0,n,0]),P=ai(o,O);return[5,[0,od(o,n),0],P];case
5:var
Q=a[2],q=of(bC,c,a[1]),R=q[2];return[6,R,ai(q[1],Q)];case
6:var
r=a[1],S=a[4],T=a[3],s=bH(c,a[2]),t=s[1],U=s[2],u=bH(c,T),V=u[1],v=D(U,u[2]),j=bC(bC(c,v),r),W=p(function(a){return[0,od(j,a),0]},r),X=d8(t),k=wo(j,t,V),x=k[1],Y=k[3],Z=k[2],y=bC(j,x),z=c5(acH),$=[8,Z,Y,ai(bC(y,[0,[0,z,0,g9(y)],0]),[3,0,[0,[0,X,[1,[0,z]]],0],S])],aa=[7,D(W,p(function(a){return[0,oe(a),1]},x)),$];return aH(function(a,b){return[5,[0,oe(a),1],b]},v,aa);case
7:var
ab=a[3],ac=a[2],ad=ai(c,a[1]);return[9,ad,ac,ai(c,ab)];case
8:var
ae=a[3],af=a[1],A=j0(c,a[2]),ag=A[2],ah=A[1];return[10,ai(c,af),[0,ah,ag],ae];case
9:var
aj=a[2];return[11,ai(c,a[1]),aj];case
10:return[12,eh(c,a[1])[1]];case
11:var
ak=a[2],al=dd(c,a[1]);return[13,al,dd(c,ak)];case
12:var
am=a[2],an=ai(c,a[1]);return[14,an,ai(c,am)];case
13:var
ao=a[2],ap=ai(c,a[1]),aq=p(function(a){var
f=0===a[0]?a[1]:a[2],g=hd(c,f);function
b(a){return dd(c,a)}if(0===a[0])var
d=[0,b(a[1])];else
var
e=a[1],d=[1,e,b(a[2])];return[0,d,g]},ao);return w(function(a,b){return[15,a,b[1],b[2]]},ap,aq);case
14:var
ar=a[3],as=a[1],at=ai(c,a[2]);return[16,as,at,p(function(a){var
j=a[2],k=wr(a[1]),f=k[2],b=k[1];if(0===f)var
d=[0,b,0];else{if(typeof
b===g)var
e=0;else
if(3===b[0]){var
h=b[1];if(typeof
h===g)var
i=1;else
if(5===h[0])var
d=[0,b,[0,h[2]]],e=1,i=0;else
var
i=1;if(i)var
e=0}else
var
e=0;if(!e)var
n=c5(acI),d=[0,[5,b,n],[0,n]]}var
l=d[1],o=d[2],m=bC(c,hb(l)),p=f9(c,l),q=0===f?ai(m,j):ai(m,[20,[10,[9,[2,[0,ba(o)]],f]],j]);return[0,p,q]},ar)];case
15:var
au=a[1];return[17,p(function(a){return ai(c,a)},au)];case
16:var
B=a[1],av=B[2],C=j0(c,B[1]),aw=C[2],ax=C[1];return[18,[0,ax,aw],p(function(a){var
b=a[1];return[0,b,ai(c,a[2])]},av)];case
17:var
ay=a[4],az=a[3],aA=a[1],aB=ai(c,a[2]),aC=ai(c,az);return[19,aA,aB,aC,ai(c,ay)];case
18:var
aD=a[3],aE=a[2],aF=a[1],E=c5(acJ),F=[12,[1,[0,E]],acK],a=[3,1,[0,[0,[0,E],[6,0,[13,acN,aF],acM,[17,0,aE,[20,aD,F],acL]]],0],F];continue;case
19:var
G=a[2][1],aG=a[6],aI=a[5],aJ=a[4],aK=a[3],aL=a[1],f=c5(acO),H=c5(acP),I=[1,[0,G]],d=function(a){return[1,[0,h(_,a)]]};switch(aJ){case
1:var
aR=d(acW),e=[0,d(acX),aR];break;case
2:var
aS=d(acY),e=[0,d(acZ),aS];break;case
3:var
aT=d(ac0),e=[0,d(ac1),aT];break;default:var
aM=d(acQ),e=[0,d(acR),aM]}var
aN=e[2],aO=[12,e[1],[15,[0,I,acS]]],J=function(f){return function(a){return[12,[1,[0,f]],a]}}(f),aP=[17,0,[12,aN,[15,[0,I,[0,[1,[0,H]],0]]]],[20,aG,J(aO)],acT],aQ=[6,0,[13,[11,G,[2,[0,h(_,acU)]]],aL],acV,aP],a=[3,0,[0,[0,[0,H],aI],0],[3,1,[0,[0,[0,f],aQ],0],J(aK)]];continue;case
20:var
aU=a[2],aV=ai(c,a[1]);return[4,0,[0,[0,$I,aV],0],ai(c,aU)];case
21:var
aW=a[2];return[20,ai(c,a[1]),aW];case
22:return[21,a[1]];case
23:var
aX=a[1],aY=ai(c,a[2]);return[22,ai(c,aX),aY];case
24:var
aZ=a[1],a0=ai(c,a[2]);return[23,ai(c,aZ),a0];case
25:var
a1=a[1],a2=ai(c,a[2]);return[24,ai(c,a1),a2];default:var
K=a[2],L=ai(c,a[1]);return[0,L,dd(c,K)]}},ws=function(d,b,c){var
f=bt(c),g=f[2],h=fJ(wr,f[1]),i=h[2],j=h[1],e=bC(d,hb([1,j])),k=p(function(a){return f9(d,a)},j);if(0===b)var
l=p(function(a){return dd(d,a)},i),a=[0,p(function(a){return ai(d,a)},g),l];else
var
o=p(function(a){return dd(e,a)},i),a=[0,p(function(a){return ai(e,a)},g),o];var
m=a[2],n=a[1];return[0,e,dP(k,dk(function(a,b){return 0===b?a:[0,a,b]},n,m))]},og=function(a,b){if(b){var
c=b[1],n=b[2];switch(c[0]){case
1:var
e=c[1],g=e[2],h=e[1],k=e[3],i=ws(g$(a,h),g,k),d=[0,i[1],[0,[1,[0,h,g,i[2]]]]];break;case
2:var
j=c[1],l=j[1],m=dd(a,c[2]),d=[0,bC(a,[0,j,0]),[0,[2,[0,l,m]]]];break;case
3:var
d=[0,nt(a,c[1]),0];break;default:var
f=of(bC,a,c[1]),d=[0,f[1],[0,[0,f[2]]]]}var
o=d[2],p=og(d[1],n);return D(mG(o),p)}return 0},wt=function(a){switch(a){case
1:return Ev;case
2:return rI;case
3:return bV;default:return P}},wu=function(a,b,c,d,e){if(typeof
e===g){var
m=i(t,i(a5,i(t,cE(c)))),o=i(t,i(a0(a,b),m));return i(n(adi),o)}else{if(0===e[0]){var
J=e[1],q=t2(x(cl(c)[1])),r=dk(function(a,b){var
c=bi(b);return i(wt(a),c)},d,q),h=nU(a,c,J),j=h[1],s=h[3],u=i(fB,t),v=i(T(1),u),w=a$(v,function(a){return G(j,a)},s),y=i(t,i(bV,bB(0,i(iR(P,i(fB,t)),w)))),z=i(d0,i(iY(function(a){return rJ(t,a)},r),y)),A=i(t,i(a5,i(t,i(cE(c),z)))),B=i(t,i(dZ,i(a0(j,b),A)));return i(n(adj),B)}var
K=e[1],k=f1(a,c,0),l=k[2],f=k[1],C=p(function(a){return cJ(f,a)},l),D=dk(function(a,b){var
c=a0(f,b);return i(wt(a),c)},d,C),E=i(t,i(bV,i(t,G(f,cN(K,p(function(a){return[1,a]},l)))))),F=i(d0,i(iY(function(a){return rJ(t,a)},D),E)),H=i(t,i(a5,i(t,i(cE(c),F)))),I=i(t,i(dZ,i(a0(f,b),H)));return i(n(adk),I)}},adl=function(a,b){return af(a,[0,function(a){var
b=a[1],c=a[2][2],d=p(function(a){var
c=a[1],d=[0,bZ(b),c];return wu(b,d,a[6],a[4],a[3])},c);return i(aY(2,ci(iW(T(1)),d)),a_)},b])},adm=function(d){var
a=0,e=i(aY(2,i(a_,ci(a_,u4(d,function(a,b,c){var
h=cJ(d,b),j=eb(d,b),f=f1(d,at(d,b),0),g=f[2],e=f[1];function
k(a){return G(e,[1,fl(g,a)])}var
l=i(a5,bB(0,uR(k,G(e,[3,[1,b],p(function(a){return[1,a]},g)]),j))),m=i(t,i(a0(e,h),l));return[0,i(n(X$),m),a]},a)))),a_),f=i(aF[5],e),g=i(n(adn),f),h=i(a_,i(a_,i(aF[2],g))),b=0,c=u4(d,function(a,b,c){var
e=cJ(d,b),f=at(d,b);return[0,wu(d,e,f,jG(d,b),c),a]},b),j=i(aY(2,i(a_,ci(iW(T(1)),c))),h),k=i(aF[5],j),l=i(n(ado),k);return i(aF[2],l)},oh=function(a,b){var
c=aq(0,13),j=[0,0];function
r(a){try{var
z=bR(c,a),s=z}catch(f){f=m(f);if(f[1]!==o)throw f;var
s=0}switch(s){case
1:return H(dB,[1,a]);case
2:return 0;default:c1(c,a,1);var
x=h(b,a),q=function(a){var
b=a[3];return aD(function(a){var
b=a[2];switch(b[0]){case
1:return 0;case
2:return e(b[1]);default:var
c=b[3],d=aD(w,b[2]);return D(mE(0,gP(e,c)),d)}},b)},E=function(a,b){switch(b[0]){case
1:return a<50?n(1+a,b[1][3]):v(n,[0,b[1][3]]);case
2:return a<50?i(1+a,b[2]):v(i,[0,b[2]]);case
3:return[0,b[1],0];default:return q(b[1])}},n=function(a,b){var
c=bt(b),e=c[1],g=aD(d,c[2]);return D(aD(f,e),g)},C=function(a,b){var
c=b;for(;;)if(typeof
c===g)return 0;else
switch(c[0]){case
1:return aD(f,c[1]);case
2:var
d=c[1],h=d[1],i=bt(d[2])[2],j=l(h[1]);return D(aD(f,i),j);case
3:var
c=c[1];continue;case
4:var
k=c[1],m=e(c[2]);return D(f(k),m);case
5:var
c=c[1];continue;default:return 0}},B=function(a,b){var
c=b;for(;;){if(typeof
c===g)var
f=0;else
switch(c[0]){case
0:var
r=c[1],s=e(c[2]);return D(d(r),s);case
1:return a<50?k(1+a,c[1]):v(k,[0,c[1]]);case
3:var
n=c[2],m=c[3],f=1;break;case
4:var
c=c[2];continue;case
5:var
w=c[1],x=d(c[2]);return D(q(w),x);case
6:var
y=c[3],z=c[2],A=d(c[4]),B=D(e(y),A);return D(e(z),B);case
7:var
j=c[3],h=c[1],f=2;break;case
8:var
E=c[1],F=l(c[2][1]);return D(d(E),F);case
9:var
o=c[1],f=3;break;case
10:return a<50?i(1+a,c[1]):v(i,[0,c[1]]);case
11:var
G=c[1],H=e(c[2]);return D(e(G),H);case
12:var
j=c[2],h=c[1],f=2;break;case
13:var
I=c[2],J=c[1],K=aD(function(a){var
b=0===a[0]?a[1]:a[2];return e(b)},I);return D(d(J),K);case
14:var
n=c[3],m=c[2],f=1;break;case
15:return aD(d,c[1]);case
16:var
p=c[1],L=p[1],M=bt(p[2])[2],N=l(L[1]);return D(aD(d,M),N);case
17:var
O=c[3],P=c[2],Q=d(c[4]),R=D(d(O),Q);return D(d(P),R);case
18:var
S=c[2],T=c[1],U=d(c[3]),V=D(d(S),U);return D(e(T),V);case
19:var
W=c[5],X=c[3],Y=c[1],Z=d(c[6]),_=D(d(W),Z),$=D(d(X),_);return D(e(Y),$);case
20:var
j=c[2],h=c[1],f=2;break;case
21:var
o=c[1],f=3;break;case
23:var
j=c[2],h=c[1],f=2;break;case
24:var
j=c[2],h=c[1],f=2;break;case
25:var
j=c[2],h=c[1],f=2;break;default:var
f=0}switch(f){case
1:var
t=d(m);return D(u(n),t);case
2:var
C=d(j);return D(d(h),C);case
3:var
c=o;continue;default:return 0}}},i=function(a,b){var
c=b;for(;;){if(typeof
c===g)return 0;else
switch(c[0]){case
1:return aD(e,c[1]);case
2:return a<50?k(1+a,c[1]):v(k,[0,c[1]]);case
3:var
j=c[1],m=j[2],n=j[1],o=aD(e,mG(j[3])),q=D(l(n[1]),o);return D(aD(e,p(function(a){return a[2]},m)),q);case
4:var
f=c[1],d=0;break;case
5:return aD(e,[0,c[1],c[2]]);case
6:var
i=c[2],h=c[1],d=1;break;case
7:var
f=c[2],d=0;break;case
8:var
f=c[2],d=0;break;case
9:var
i=c[2],h=c[1],d=1;break;case
10:var
i=c[2],h=c[1],d=1;break;case
11:var
f=c[2],d=0;break;case
12:var
f=c[1],d=0;break;case
13:var
i=c[2],h=c[1],d=1;break;case
14:var
i=c[2],h=c[1][2],d=1;break;case
15:var
i=c[2],h=c[1][2],d=1;break;default:var
f=c[1],d=0}if(d){var
r=e(i);return D(e(h),r)}var
c=f;continue}},A=function(a,b){return a<50?i(1+a,b[2]):v(i,[0,b[2]])},k=function(a,b){return 0===b[0]?0:[0,b[1],0]},t=function(b){return y(E(0,b))},u=function(b){return y(n(0,b))},f=function(b){return y(C(0,b))},d=function(b){return y(B(0,b))},e=function(b){return y(i(0,b))},w=function(b){return y(A(0,b))},l=function(b){return y(k(0,b))};M(r,aD(t,x));j[1]=[0,a,j[1]];return c1(c,a,2)}}r(a);var
d=L(ie(j[1])),e=dR(adp,p(bY,d));k(s(0,adq),dz,a,e);return d},j1=function(a,b){var
c=b[2],f=a[2],g=a[1],d=f1(g,at(b[1],c),1),h=d[2],i=d[1],e=vj([1,c],p(function(a){return[1,a]},h));return[0,ec(jY(i,f,e),f8),e]},j2=function(a,b,c){try{h(c8(a,b),c);var
d=1}catch(f){f=m(f);if(f[1]===cI)return 0;throw f}return d},wv=function(a){return[0,0]},ww=function(a,b){a[1]=[0,b,a[1]];return 0},wx=function(k,ae,c,d){if(hk(c[1]))return[0,d,aet];if(hk(d[1]))return[0,c,aeu];var
z=wv(0);function
T(a){return ww(z,a)}var
r=wv(0);function
U(a){return ww(r,a)}function
K(a,b){var
d=b[2],e=b[1],f=a[2],g=a[1],i=r[1],c=h(aN(function(a){var
c=a[2],b=ao(g,f,a[1]);return b?ao(e,d,c):b}),i);an(x(c)<=1?1:0,adr);if(c)if(!c[2])return[0,c[1][3]];return 0}function
ai(a,b,c){var
e=c[2],f=c[1],d=K([0,a[1],a[2]],[0,b[1],b[2]]);return d?ao(f,e,d[1]):0}var
B=[0,0],E=[0,0],G=[0,0],bi=aa(k);ej(s(adJ,adI),aI,bi,0!==ae?1:0,af,[0,ed,k]);function
aq(a){var
b=V(k,a);return aB(function(a){if(0===a[0]){var
b=a[1];if(!j(d6,bZ(k),b))return 1}return 0},b)}var
as=eY(c9(k,function(a,b,c){if(aq(b))return a;var
d=jE(a,b);return jF(a,b,function(a){if(typeof
a!==g)if(1===a[0])return[1,[0,uX(d)]];return F(Wv)})},k),0),bj=0,bk=c9(k,function(a,b,c){return[0,b,a]},bj);M(function(a){return aq(a)?0:T([0,a,a,a])},bk);var
au=c[2],aw=c[1],ax=d[2],ay=d[1],bm=dD(adK),az=cK(as,[0,bm,0,aa(as)]),I=az[2],aA=az[1];T([0,au,ax,I]);var
bn=0,aV=k[1];M(U,ny(function(a,b,c){var
d=[0,b];return ht(k,d)?[0,[0,d,d,d],a]:a},bn,aV));if(ae){var
N=ae[1];j(s(adM,adL),C,[0,k,N]);var
aC=function(a,b){var
c=eg(a,b,N);return 0===c[0]?c[1][1]:H(a,[3,N,b,c[1]])},bo=aC(aw,au),bp=aC(ay,ax),O=[0,bc(aA,I,N),I,bo,bp]}else
var
O=[0,aA,I,aw,ay];var
aD=O[4],aE=O[3],aF=O[1];j(s(adB,adA),af,[0,ed,aE]);j(s(adD,adC),af,[0,ed,aD]);j(s(adF,adE),af,[0,ed,aF]);s(adH,adG);function
aG(a){var
b=u5(a);return c9(b,function(d,b,c){return aB(function(a){return 1-cr(d,a)},c)?e0(d,b):d},b)}var
aH=aG(aE),aK=aG(aD);function
aL(a,B,A,z){var
e=a,h=B,g=z;for(;;){var
m=g[2],f=g[1],i=h[2],b=h[1],j=e[3],k=e[2],c=e[1];if(k)if(i){var
r=k[2],d=k[1],t=jl(function(f,b,c,d){return function(a){return q([0,c,d],[0,b,a],A,f)}}(f,b,c,d),i);if(t){var
u=t[1],v=u[2],l=v[2],w=l[4],x=l[3],n=l[2],o=l[1],p=v[1],y=u[1];a1(s(adR,adQ),C,[0,o,d],C,[0,n,p],C,[0,x,w]);var
E=cr(o,d),F=cr(n,p),G=E?[0,d,j]:j,H=F?[0,p,y]:y,e=[0,o,r,G],h=[0,n,H],g=[0,x,[0,w,m]];continue}var
e=[0,c,r,[0,d,j]],h=[0,b,i],g=[0,f,m];continue}return[0,c,D(k,j),b,i,f,m]}}function
q(a,b,f,d){var
o=b[2],i=b[1],u=a[2],e=a[1];function
w(a,b,c){var
g=K([0,e,b],[0,i,c]);if(g)return[0,a,g[1]];var
j=dD(adS),h=cK(a,[0,j,0,aa(e)]),d=h[2],k=h[1],l=aa(i),f=nG(k,d,function(a){var
b=a.slice();b[2]=[0,l,a[2]];return b});T([0,b,c,d]);var
m=[0,f,V(f,d)],n=[0,i,V(i,c)],o=[0,e,V(e,b)];a1(s(adU,adT),ar,o,ar,n,ar,m);return[0,f,d]}function
I(d,b,c){var
a=ag(d,b);return aB(function(a){var
b=jL(aM(d,Z(d,a)));return b?ao(d,c,b[1][1]):0},a)}A(s(adW,adV),C,[0,e,u],C,[0,i,o]);var
n=Z(e,u),c=Z(i,o);function
r(a){return 1-j2(d,e,[1,a])}function
t(a){return 1-j2(d,i,[1,a])}var
v=0,y=[0,[ac,function(a){var
j=jL(n),k=jL(c);if(j){var
m=j[1],o=m[1],t=m[2];if(vq(e,o)){var
p=bE(e,o);if(p){var
b=p[1];if(typeof
b!==g)if(0!==b[0])return W([0,e,cN(b[1],t)],[0,i,c],f,d)}throw[0,l,adX]}}if(k){var
q=k[1],r=q[1],u=q[2];if(vq(e,r)){var
s=bE(i,r);if(s){var
h=s[1];if(typeof
h!==g)if(0!==h[0])return W([0,e,n],[0,i,cN(h[1],u)],f,d)}throw[0,l,adY]}}return 0}],v],z=[0,[ac,function(a){if(typeof
n===g)var
b=0;else
switch(n[0]){case
3:var
y=n[1],ae=n[2];if(typeof
c===g)var
u=1;else
switch(c[0]){case
3:var
z=c[1],af=c[2],ag=at(i,J(z));if(av(at(e,J(y)),ag))if(!r(J(y)))if(!t(J(z))){var
ah=q([0,e,y],[0,i,z],f,d);return a7(ah,function(a){var
b=a[3],c=a[2],d=a[1],i=J(a[4]);if(s2(f))if(I(b,ba(f),i))return 0;var
e=[0,[0,d,c,b,0]],g=ts(function(p,b,c,d){return a7(b,function(a){var
b=a[3],e=a[2],g=a[1],q=a[4];if(1===vp(b,i,p))var
j=W([0,g,c],[0,e,d],f,b);else
try{var
l=h(c8(k,g),c),o=h(c8(k,e),d),s=function(a){function
b(a){return[0,[0,g,e,a,l]]}return a7(ec(jY(a,o,l),f8),b)},t=a7(ec(jY(b,l,o),f8),s),j=t}catch(f){f=m(f);if(f[1]!==cI)throw f;var
j=0}var
n=aO([0,g,c],[0,e,d],b),r=s2(n)?n:j;return a7(r,function(a){return[0,[0,a[1],a[2],a[3],[0,a[4],q]]]})})},e,ae,af);return a7(g,function(a){var
b=a[3],c=a[2],d=a[1];return[0,[0,d,c,b,vj([1,i],L(a[4]))]]})})}var
b=1,u=0;break;case
5:var
b=0,u=0;break;default:var
u=1}if(u)var
b=1;break;case
4:var
N=n[1];if(typeof
c===g)var
v=1;else
switch(c[0]){case
4:var
O=c[1],ai=x(O);if(x(N)===ai){var
aj=[0,d,0],P=bf(function(a,b,c){var
e=a[2],f=a[1],g=bG(b),d=w(f,g,bG(c));return[0,d[1],[0,d[2],e]]},aj,N,O),ak=P[1];return[0,[0,e,i,ak,[4,p(hp,L(P[2]))]]]}var
b=1,v=0;break;case
5:var
b=0,v=0;break;default:var
v=1}if(v)var
b=1;break;case
5:var
l=n[1];if(typeof
c!==g)if(5===c[0]){var
B=c[1],S=l[2],T=B[2],o=J(S[1]),U=J(T[1]),D=ba(f);if(!r(o))if(!t(U)){if(eZ(d,S,T)){var
ap=B[3],aq=l[3],ar=[0,d,0],V=bf(function(a,b,c){var
d=b[1],f=c[2],g=b[2],h=a[2],i=a[1];an(j(bl,d,c[1]),adZ);var
k=bG(f),e=w(i,bG(g),k),l=e[1];return[0,l,[0,[0,d,hp(e[2])],h]]},ar,aq,ap),as=V[1],au=L(V[2]),X=l[4],Y=B[4];try{var
E=h(c8(k,e),X),F=h(c8(k,i),Y),aw=a9(k,E,F)?q([0,e,E],[0,i,F],0,as):H(k,[26,e,n,E,i,c,F]),Z=aw}catch(f){f=m(f);if(f[1]!==cI)throw f;var
Z=H(k,[26,e,n,X,i,c,Y])}return a7(Z,function(a){return[0,[0,a[1],a[2],a[3],[5,[0,l[1],l[2],au,a[4]]]]]})}if(ao(d,o,U)){if(I(d,D,o))return 0;if(0<tw(at(d,o)))ef(d,[18,D]);s(ad1,ad0);var
_=j1([0,e,n],[0,d,o]),$=_[2],ax=_[1];s(ad3,ad2);var
aa=j1([0,i,c],[0,d,o]),ab=aa[2],ay=aa[1];return a7(ax,function(b){return a7(ay,function(a){A(s(ad5,ad4),C,[0,b,$],C,[0,a,ab]);var
c=q([0,b,$],[0,a,ab],[0,D],d);return a7(c,function(a){return[0,[0,a[1],a[2],a[3],a[4]]]})})})}return 0}return 0}var
Q=J(l[2][1]);if(r(Q))return 0;var
R=j1([0,e,n],[0,d,Q]),al=R[2],am=R[1];return a7(am,function(a){return q([0,a,al],[0,i,c],f,d)});case
6:var
az=n[1];if(typeof
c===g)var
G=1;else
switch(c[0]){case
5:var
b=0,G=0;break;case
6:var
aA=q([0,e,az],[0,i,c[1]],0,d);return a7(aA,function(a){return[0,[0,a[1],a[2],a[3],[6,a[4]]]]});default:var
G=1}if(G)var
b=1;break;default:var
b=0}if(!b)if(typeof
c!==g)if(5===c[0]){var
K=J(c[1][2][1]);if(t(K))return 0;var
M=j1([0,i,c],[0,d,K]),ac=M[2],ad=M[1];return a7(ad,function(a){return q([0,e,n],[0,a,ac],f,d)})}return 0}],y],B=[0,[ac,function(a){return aO([0,e,n],[0,i,c],d)}],z],D=[0,[ac,function(a){if(typeof
n!==g)if(1===n[0])if(typeof
c!==g)if(1===c[0]){var
f=c[1],b=n[1],z=at(i,f);an(av(at(e,b),z),ad6);var
m=ab(e,b),h=ab(i,f);j(s(ad8,ad7),m,h);if(0===m){if(0===h){if(!ht(e,b))if(2!==at(e,b)){var
p=w(d,b,f);return[0,[0,e,i,p[1],[1,p[2]]]]}var
A=r(b),o=A||t(f);if(o)ef(k,4);if(!o)if(ao(d,b,f))return[0,[0,e,i,d,[1,b]]];return 0}var
q=1-r(b),B=q?ht(d,b):q;an(B,ad9);if(j2(k,e,n)){var
C=function(a){an(ai([0,e,b],[0,a,f],[0,d,b]),ad_);return[0,[0,e,a,d,[1,b]]]};return a7(fX(i,b,f),C)}return 0}if(0===h){var
u=1-t(f),D=u?ht(d,f):u;an(D,ad$);if(j2(k,i,c)){var
E=function(a){an(ai([0,a,b],[0,i,f],[0,d,f]),aea);return[0,[0,a,i,d,[1,f]]]};return a7(fX(e,f,b),E)}return 0}var
l=at(e,b);an(av(l,at(i,f)),aeb);var
v=K([0,e,b],[0,i,f]);if(v)return[0,[0,e,i,d,[1,v[1]]]];an(0!==l?1:0,aec);var
F=aa(d),x=jI(d,[0,cJ(e,b),l,F]),y=x[2],G=x[1];U([0,b,f,y]);return[0,[0,e,i,G,[1,y]]]}return 0}],B],E=[0,[ac,function(a){try{var
b=h(c8(e,e),n),f=a9(k,b,h(c8(i,i),c))?(s(aee,aed),[0,[0,e,i,d,b]]):0}catch(f){f=m(f);if(f[1]===cI)return 0;throw f}return f}],D];return ck(function(a){var
b=cS(a);return bO===b?a[1]:ac===b?dS(a):a},E)}function
aO(a,b,c){var
d=b[2],e=b[1],f=a[2],i=a[1];if(typeof
f!==g)if(1===f[0]){var
n=f[1];if(ab(i,n)){try{var
o=h(c8(k,e),d),r=function(a){return[0,[0,a,e,c,o]]},s=a7(oa(i,n,o),r)}catch(f){f=m(f);if(f[1]===cI)return 0;throw f}return s}}if(typeof
d!==g)if(1===d[0]){var
j=d[1];if(ab(e,j)){try{var
l=h(c8(k,i),f),p=function(a){return[0,[0,i,a,c,l]]},q=a7(oa(e,j,l),p)}catch(f){f=m(f);if(f[1]===cI)return 0;throw f}return q}}return 0}function
W(a,b,c,d){var
h=b[2],i=b[1],e=a[2],f=a[1];if(1===hq(f,e)){var
k=function(a,b){var
c=Z(a,b);j(s(0,aef),C,[0,a,c]);function
d(a){var
b=typeof
a===g?2===a?0:1:6===a[0]?1:0;return b?1:0}if(d(c))return[0,a,c];var
i=aa(a),e=cK(a,[0,dD(aeg),0,i]),f=e[2],h=bc(e[1],f,c),k=ag(h,f);return[0,h,cY(function(a){return 1-d(a)},k)]},l=k(f,e),n=l[2],o=l[1],m=k(i,h);return q([0,o,n],[0,m[1],m[2]],c,d)}return q([0,f,e],[0,i,h],c,d)}var
bA=c7(aH),y=aL([0,aH,bA,0],[0,aK,c7(aK)],0,[0,aF,0]),aQ=y[6],aR=y[5],aS=y[3],aT=y[1],bB=y[4],bC=y[2],aU=c7(aR),Y=eY(aR,D(aQ,aU)),bD=[0,Y,aJ(aU)],bF=[0,k,aJ(c7(k))];A(s(aei,aeh),C,bF,C,bD);var
bH=[0,aT,aJ(bC)];j(s(aek,aej),C,bH);var
bI=[0,aS,aJ(bB)];j(s(aem,ael),C,bI);var
bJ=[0,Y,aJ(aQ)];j(s(aeo,aen),C,bJ);var
_=[0,[0,aT,aS,Y]];for(;;){if(0<x(z[1])){var
$=_[1],i=$[3],Q=$[2],R=$[1],S=a4(z[1]);z[1]=ie(z[1]);var
b=S[3],n=S[2],o=S[1],bq=[0,i,V(i,b)],br=[0,Q,V(Q,n)],bs=[0,R,V(R,o)];a1(s(adO,adN),ar,bs,ar,br,ar,bq);var
e=ea(R,a4(fU(R,o))),f=ea(Q,a4(fU(Q,n))),aj=K([0,e,o],[0,f,n]);if(aj){var
ak=aj[1],aW=[0,i,V(i,ak)],aX=[0,i,V(i,b)];A(s(adt,ads),ar,aX,ar,aW);var
P=[0,ak]}else{var
aY=r[1],al=h(aN(function(i,b){return function(a){return ao(i,b,a[3])}}(i,b)),aY);an(x(al)<=1?1:0,adu);var
aZ=r[1],am=ck(function(e,o){return function(a){var
b=a[1];if(ao(e,o,b))if(jJ(e,b))return[0,b];return 0}}(e,o),aZ);if(am){var
t=am[1];ef(e,[17,o]);B[1]=[0,t,B[1]];var
a0=E[1],a2=r[1];E[1]=D([0,n,c6(function(t,e){return function(a){var
b=a[2];return ao(e,t,a[1])?[0,b]:0}}(t,e),a2)],a0);var
a3=G[1],a5=r[1];G[1]=D([0,b,c6(function(t,e){return function(a){var
b=a[3];return ao(e,t,a[1])?[0,b]:0}}(t,e),a5)],a3)}var
a6=r[1],ap=ck(function(f,n){return function(a){var
b=a[2];if(ao(f,n,b))if(jJ(f,b))return[0,b];return 0}}(f,n),a6);if(ap){var
u=ap[1];ef(f,[17,n]);E[1]=[0,u,E[1]];var
a8=B[1],a_=r[1];B[1]=D([0,o,c6(function(u,e){return function(a){var
b=a[1];return ao(e,u,a[2])?[0,b]:0}}(u,e),a_)],a8);var
a$=G[1],bb=r[1];G[1]=D([0,b,c6(function(u,f){return function(a){var
b=a[3];return ao(f,u,a[2])?[0,b]:0}}(u,f),bb)],a$)}if(0!==x(al)){var
bh=[0,i,V(i,b)];j(s(ady,adx),ar,bh);throw[0,l,adz]}U([0,o,n,b]);var
bd=[0,i,V(i,b)],be=[0,f,V(f,n)],bg=[0,e,V(e,o)];a1(s(adw,adv),ar,bg,ar,be,ar,bd);var
P=0}if(typeof
P===g)if(0===P){if(ab(e,o))var
ah=0;else
if(ab(f,n))var
ah=0;else
var
bt=ag(e,o),v=aL([0,e,bt,0],[0,f,ag(f,n)],[0,b],[0,i,0]),bu=v[6],bv=v[5],bw=v[4],bx=v[3],by=b0(v[1],o,v[2]),bz=b0(bx,n,bw),a=[0,by,bz,w(function(b){return function(a,c){return bc(a,b,c)}}(b),bv,bu)],ah=1;if(!ah){var
aP=q([0,e,[1,o]],[0,f,[1,n]],0,i);if(aP)var
X=aP[1],a=[0,X[1],X[2],X[3]];else
var
a=F(adP)}}else
var
a=[0,e,f,i];else
var
a=[0,e,f,aaN(i,P[1],b)];_[1]=[0,a[1],a[2],a[3]];continue}var
ad=_[1][3];j(s(aeq,aep),af,[0,ed,ad]);s(aes,aer);we(ad);return[0,[0,ad,I],[0,B[1],E[1],G[1]]]}},wy=function(a,b,c,d){var
f=wx(a,b,c,d),e=f[2];return[0,[0,f[1],e[3]],[0,[0,c,e[1]],[0,[0,d,e[2]],0]]]},wz=function(a,b){if(typeof
b!==g)switch(b[0]){case
1:return hm(vl(a,b[1]));case
3:var
c=b[2];return hm(cN(vl(a,J(b[1])),c));case
5:var
d=b[1];return da(a,b)?[0,d[4]]:0}return 0},oi=function(f,e,c,d){var
i=kU(XP,ag(f,e)),a=i[1],m=i[2];if(a){var
k=a[2],b=a[1];if(0!==k)s(aew,aev);var
n=function(a,b){return h(b,b0(f,e,D([0,[5,a],k],m)))};if(typeof
b!==g)if(5===b[0])return j(c,b[1],n);throw[0,l,XO]}return h(d,0)},oj=function(a){if(typeof
a!==g)switch(a[0]){case
7:var
b=a[1],c=oj(a[2]);return aH(function(a,b){return[2,XJ,a[1],a[2],b]},b,c);case
8:return[7,a[1],a[2]]}return F(aeP)},ok=function(a,b,c){var
e=a,d=b;for(;;)if(typeof
d===g)return e;else
switch(d[0]){case
1:var
i=d[1],q=ag(e,c),k=c6(function(a){if(typeof
a!==g)if(4===a[0])return[0,a[1]];return 0},q);if(0===x(k))H(e,[10,d,c]);var
l=a4(k),r=x(i);if(x(l)!==r)H(e,[10,d,c]);return bf(function(a,b,c){return ok(a,b,bG(c))},e,i,l);case
2:var
s=d[2],t=d[1],u=ag(e,c),n=c6(function(a){if(typeof
a!==g)if(5===a[0]){var
b=a[1];if(eZ(e,t,b[2]))return[0,b[3]]}return 0},u);if(0===x(n))H(e,[10,d,c]);var
v=a4(n);return w(function(a,b){var
c=b[1],f=b[2];try{var
g=cY(function(a){return j(bl,c,a[1])},v),e=g}catch(f){f=m(f);if(f[1]!==o)throw f;var
e=H(a,[9,d,c])}return ok(a,f,bG(e[2]))},e,s);case
3:return ba(fX(e,c,d[1]));case
4:var
f=d[2],y=d[1];if(typeof
f===g)var
h=0;else
if(3===f[0])var
p=f[1],h=1;else
var
h=0;if(!h)var
p=F(aeR);var
e=ba(fX(e,c,p)),d=y;continue;default:return F(aeQ)}},as=function(a,b,c,d){var
f=a,i=b,e=d;for(;;){var
az=function(f){return function(e,b){return[ac,function(a){var
g=h(_,b),d=[1,h(cD,e),g],c=he(eW(f),d);if(0===c[0])throw[0,l,Xb];return[1,c[1]]}]}}(f),c2=az(aeT,aeS),c3=az(aeV,aeU),c4=az(aeX,aeW),n=function(i,f){return function(a,b){var
k=mE(dD(aeY),i),g=cK(a,[0,k,0,aa(f)]),d=g[2],e=bc(g[1],d,b);if(c){var
h=c[1],j=eg(e,d,h);return 0===j[0]?[0,e,d]:H(e,[3,h,d,j[1]])}return[0,e,d]}}(i,f);if(typeof
e===g){var
c5=[1,h(_,aeZ)],bo=cK(f,[0,c5,0,aa(f)]),c6=bo[2];return[0,hl(bo[1]),c6]}else
switch(e[0]){case
1:return F(ae0);case
2:return[0,f,e[1]];case
3:return c?n(f,c[1]):F(ae1);case
4:var
c9=e[3],bs=ol(f,e[1],e[2]),c_=bs[1],f=c_,i=0,e=h(bs[2][2],c9);continue;case
5:var
bt=e[1],c$=e[2],bu=jI(f,bt[1]),bv=[1,bu[2]],dd=bu[1],bw=as(dd,0,c,ah(bv,0,c$)),bx=bw[1],aA=bt[1][1],de=bw[2],df=0===aA[0]?aA[2]:aA[1];ef(bx,[30,df,bv]);return[0,bx,de];case
6:var
by=v5(f,e[1],e[2]),f=by[1],i=0,e=by[2];continue;case
7:var
dg=e[2],dh=e[1],di=oj(e),bz=e4(f,p(function(a){return a[1]},dh)),bA=bz[1];return n(dc(bA,as(bA,0,0,h(bz[2][2],dg))[1]),di);case
8:var
Y=e[2],bB=e[1],dj=e[3],bC=ob(f),dl=aa(bC),bD=e4(bC,[0,[0,dD(ae2),0,dl],0]),bF=bD[2],aC=bF[6],dm=bF[2],dn=bD[1];if(aC)if(!aC[2]){var
dp=aC[1],dq=h(dm,dj),bH=as(bc(dn,dp,bB),0,[0,Y],dq),bI=bH[2],bJ=bH[1],aD=eg(bJ,bI,Y);if(0===aD[0]){var
bK=aD[1],dr=bK[2],ds=bK[1];j(s(ae5,ae4),f4,dr);return n(dc(f,ds),[7,bB,Y])}return H(bJ,[3,Y,bI,aD[1]])}throw[0,l,ae3];case
9:var
bL=e[2],aE=bL[1],dt=e[3],du=e[1],bM=as(f,db(i,h(ak,aE)),0,du),bN=bM[2],bO=as(bM[1],0,0,dt),aF=bO[1],dv=bO[2],dw=function(a,b){if(!tF(a[1]))H(aF,[15,[5,a],a[2][2]]);var
c=a[3],d=kT(function(a,b){var
d=b[2],c=b[1];return j(bl,aE,c)?(bG(d),bL[2]=[0,a],[0,c,[6,[1,dv]]]):[0,c,d]},c),e=[0,a[1],a[2],d,a[4]];return j(b,e,function(a){return n(a,e3)})};return oi(aF,bN,dw,function(a){return H(aF,[7,bN,aE])});case
10:var
dx=e[3],N=e[2],bP=as(f,0,0,e[1]),bQ=bP[2],D=bP[1],bR=vn(D,N),dy=function(a,b){var
c=[5,a],d=a[2];if(!tF(a[1]))H(D,[15,c,d[2]]);var
e=x(bR);if(x(a[3])!==e)H(D,[16,c,N[2]]);var
f=a[3],g=dk(function(a,b){return[0,a,b[2]]},bR,f);dx[1]=eZ(D,d,N)?ae6:ae7;function
h(a){return n(a,e3)}var
i=a[4];return j(b,[0,vo(D,N),N,g,i],h)};return oi(D,bQ,dy,function(a){return H(D,[8,bQ])});case
11:var
bS=e[2],Z=bS[1],dz=e[1],bT=as(f,db(i,h(ak,Z)),0,dz),aG=bT[2],aI=bT[1],dA=function(a,b){var
d=a[3],c=tu(function(a,b){var
c=b[2];return j(bl,b[1],Z)?(bS[2]=[0,a],[0,bG(c)]):0},d);if(c){var
e=c[1];return j(b,a,function(a){return[0,a,e]})}return H(aI,[7,aG,Z])};return oi(aI,aG,dA,function(a){return H(aI,[7,aG,Z])});case
12:var
aJ=e[1],aK=wm(f,aJ);return 0===aK[0]?n(e6(aK[1][1],aJ),e3):H(f,[4,aJ,aK[1]]);case
13:var
bU=e[2],E=e[1];if(typeof
E===g)var
a$=0;else
if(9===E[0])var
cQ=E[1],z=[9,cQ,aM(f,E[2])],a$=1;else
var
a$=0;if(!a$)var
z=aM(f,E);if(typeof
z===g)var
v=0;else
switch(z[0]){case
2:if(0===z[1])var
v=0;else
if(0===z[3])var
aL=aR(bU,0,z[4]),v=1;else
var
v=0;break;case
9:var
O=z[2];if(typeof
O===g)var
U=1;else
if(2===O[0])if(0===O[1])var
v=0,U=0;else
if(0===O[3])var
dB=z[1],aL=[9,dB,aR(bU,0,O[4])],v=1,U=0;else
var
v=0,U=0;else
var
U=1;if(U)var
v=0;break;default:var
v=0}if(!v)var
aL=H(f,5);var
aO=wm(f,aL);return 0===aO[0]?n(e6(aO[1][1],E),e3):H(f,[4,E,aO[1]]);case
14:var
bV=e[1],dC=e[2],bW=n9(bV),ep=typeof
bW===g?0:14===bW[0]?(ef(f,1),1):0,dE=db(i,ae8),dF=db(i,ae9),bX=as(f,dE,0,bV),P=bX[2],bY=as(bX[1],dF,0,dC),Q=bY[2],r=bY[1];if(ao(r,P,J(cM(c4))))vR(0,[0,Q],r);var
cR=[0,r,V(r,Q)],cS=[0,r,V(r,P)];a1(s(aey,aex),ar,cS,ar,cR,hu,r);var
cT=function(a){var
b=a;for(;;){if(typeof
b!==g)switch(b[0]){case
2:if(0===b[1]){var
b=b[4];continue}break;case
7:return 1}return 0}},cU=ag(r,P),cV=h(aN(cT),cU),bj=function(a,b){if(typeof
b!==g)if(2===b[0])if(0===b[1]){var
e=b[2],c=fY(a,e,b[4]),i=c[3],d=bj(c[1],c[2]),f=d[3],h=e[1],j=d[2],k=d[1],l=0===h[0]?[0,[0,h[2],i],f]:f;return[0,k,j,l]}return[0,a,b,0]},bk=aH(function(a,b){var
m=b[2],n=b[1],i=bj(r,a),e=i[2],f=i[1],t=i[3];if(typeof
e!==g)if(7===e[0]){var
j=e[2],h=e[1];if(c){var
u=c[1];s(aeC,aeB);var
o=ec(jY(f,j,u),f8);if(o){var
v=o[1];s(aeE,aeD);var
p=dc(f,v)}else
var
p=f;var
d=p}else
var
d=f;var
w=[0,d,V(d,Q)];A(s(aeG,aeF),ar,w,C,[0,d,h]);var
k=eg(d,Q,h);if(0===k[0]){var
q=k[1];return[0,[0,[0,q[1],q[2],[0,h,j],t],n],m]}return[0,n,[0,[0,d,k[1],[0,h,j]],m]]}throw[0,l,aez]},cV,aeA),bm=bk[2],aw=bk[1];if(aw){var
X=aw[1],bn=X[1],cX=X[4],cY=X[3][2],cZ=X[2];if(0!==aw[2])ef(r,[31,P]);M(function(a){return ef(bn,[30,a[1],[1,a[2]]])},cX);s(aeI,aeH);j(s(aeK,aeJ),f4,cZ);var
$=[0,bn,cY]}else
if(bm)var
ax=bm[1],$=H(ax[1],[3,ax[3][1],Q,ax[2]]);else
var
$=H(r,[2,P]);return n($[1],$[2]);case
15:var
bZ=e[3],R=e[2],b1=as(f,0,0,e[1]),ab=b1[2],I=b1[1],b2=function(a){if(typeof
a!==g)if(2===a[0])if(0===a[1])if(0===a[3]){var
b=a[4],c=a[2],d=c[2],e=c[1],m=c[3],h=function(a){return gb(bZ,d)?H(I,[20,R,bZ,d]):0};if(0===R[0]){var
n=R[1];h(0);return[0,aR(n,0,b)]}var
o=R[2],p=R[1];if(0===e[0]){if(j(bl,p,e[2])){h(0);var
q=aR(o,0,b),f=j(Xf[1],0,-1);return[0,k(cs(f,fa,21),f,0,q)]}var
i=b2(b);return i?[0,[2,0,[0,e,d,m],0,i[1]]]:0}throw[0,l,ae_]}return 0},b3=ck(b2,ag(I,ab)),dG=b3?b3[1]:H(I,[21,ab]),aP=cJ(I,ab),dH=1===aP[0]?aP:[1,h(_,u(h(ak,aP[2]),ae$))],b4=cK(I,[0,dH,0,a4(fU(I,ab))]),b5=b4[2];return[0,bc(b4[1],b5,dG),b5];case
16:var
dI=e[3],dJ=e[2],dK=e[1],b6=as(f,db(i,afa),0,dJ),b7=b6[2],aQ=b6[1],ad=p(function(a){var
b=a[1],e=a[2];function
f(d,b,c){var
a=c;for(;;){if(typeof
a!==g)switch(a[0]){case
1:var
k=a[1],u=ag(d,b),l=ck(function(a){if(typeof
a!==g)if(4===a[0])return[0,p(bG,a[1])];return 0},u),n=l?l[1]:H(d,[14,b]),v=x(k);if(x(n)!==v)H(d,[14,b]);return bf(f,d,n,k);case
2:var
e=a[1],y=a[2],h=function(a){return H(d,[13,b,e[2]])},i=function(a){return a?h(0):0},z=ag(d,b),q=jl(function(a){if(typeof
a!==g)switch(a[0]){case
1:var
b=a[1],f=e[2];i(1-ao(d,b,J(e[1])));i(0===bE(d,b)?1:0);try{var
j=[0,[0,d,hr(d,b,f,0)]]}catch(f){f=m(f);if(f[1]===o)return h(0);throw f}return j;case
3:var
c=a[1],k=a[2],l=e[2],n=J(e[1]);i(1-ao(d,J(c),n));try{var
p=[0,[0,d,hr(d,J(c),l,k)]]}catch(f){f=m(f);if(f[1]===o)return h(0);throw f}return p;case
5:if(!eZ(d,e,a[1][2]))h(0);return[0,[0,d,a]]}return 0},z);if(q){var
r=q[1],s=r[2][2],A=s[2],t=bc(b0(s[1],b,r[1]),b,A),B=ag(t,b),C=ba(ck(function(a){if(typeof
a!==g)if(5===a[0])return[0,a[1][3]];return 0},B));return w(function(a,b){var
c=b[1],g=b[2],d=ck(function(a){var
b=a[2];return j(bl,a[1],c)?[0,bG(b)]:0},C);return d?f(a,d[1],g):H(a,[11,e[2],c])},t,y)}return h(0);case
4:var
a=a[1];continue}return d}}var
d=ol(f(aQ,b7,b),0,[0,[0,b,[2,b7]],0]),i=d[1];return as(i,0,c,h(d[2][2],e))},dI);if(ad){var
aS=ad[2];if(aS)if(!aS[2]){var
b8=wy(aQ,c,ad[1],aS[1]),b9=b8[1],dL=b8[2];if(dK)vS(b9,dL);return b9[1]}}return m3(function(a,b){function
d(a){return a[1]}return ec(wx(aQ,c,a,b),d)},ad);case
17:var
aT=e[1];if(c){var
aU=c[1];if(typeof
aU===g)var
av=1;else
if(4===aU[0]){var
ca=aU[1],dP=x(aT);if(x(ca)===dP)var
b_=p(function(a){return[0,a]},ca),au=1,av=0;else
var
au=0,av=0}else
var
av=1;if(av)var
au=0}else
var
au=0;if(!au)var
dM=function(a){return 0},b_=tr(x(aT),dM);var
dN=[0,f,0],b$=ts(function(a,b,c,d){var
f=b[2],g=b[1],e=as(g,db(i,cW(a)),d,c),h=e[1];return[0,h,[0,hp(e[2]),f]]},dN,aT,b_),dO=b$[1];return n(dO,[4,L(b$[2])]);case
18:var
cb=e[2],aV=e[1],ae=gP(function(a){return aM(f,a)},c);if(ae){var
aW=ae[1];if(typeof
aW===g)var
bd=1;else
if(5===aW[0])var
cc=aW[1][4],bb=1,bd=0;else
var
bd=1;if(bd)var
bb=0}else
var
bb=0;if(!bb)var
cc=e1;if(ae){var
aX=ae[1];if(typeof
aX===g)var
bg=1;else
if(5===aX[0])var
cg=aX[1][3],dV=gr(function(a){var
b=a[1];return aB(function(a){return j(bl,b,a[1])},cb)},cg)?cg:0,cd=dV,be=1,bg=0;else
var
bg=1;if(bg)var
be=0}else
var
be=0;if(!be)var
cd=0;var
dQ=vn(f,aV),dR=[0,f,0],ce=w(function(a,b){var
c=b[1],e=b[2],f=a[2],g=a[1],k=db(i,h(ak,c)),d=as(g,k,ck(function(a){var
b=a[2];return j(bl,c,a[1])?[0,b]:0},cd),e);return[0,d[1],[0,[0,c,d[2]],f]]},dR,cb),dS=[0,ce[1],ce[2],0],aY=w(function(a,b){var
f=a[1],g=a[3],h=a[2],d=fI(function(a){return j(bl,a[1],b)},h);if(d)var
e=d[1],c=[0,e[2][2],e[1]];else
var
c=H(f,[5,b]);var
i=c[2];return[0,f,i,[0,[0,b,hp(c[1])],g]]},dS,dQ),cf=aY[2],aZ=aY[1],dT=aY[3];if(cf)H(aZ,[6,cf[1][1]]);var
dU=L(dT);return n(aZ,[5,[0,vo(aZ,aV),aV,dU,cc]]);case
19:var
dW=e[4],dX=e[3],dY=e[2],dZ=e[1],ch=as(f,db(i,afb),0,dY),S=ch[2],t=ch[1],d0=ag(t,S),ci=fI(function(a){function
c(a){if(ht(t,a)){var
c=bE(t,a);if(c){var
b=c[1];if(typeof
b!==g)if(1!==b[0])return 2===x(b[1])?1:0}return 0}return 0}var
b=aM(t,a);if(typeof
b!==g)switch(b[0]){case
1:return c(b[1]);case
3:return c(J(b[1]));case
5:return 2===x(vm(t,J(b[1][2][1])))?1:0}return 0},d0);if(ci){var
cj=ci[1],B=cj[2],d1=cj[1],cl=cr(t,B)?t:b0(t,S,d1),cm=function(a,b){var
c=ba(bE(cl,a));if(typeof
c!==g)if(0===c[0]){var
d=c[1];if(d){var
e=d[2];if(e)if(!e[2]){var
f=e[1],h=cN(d[1],b);return[0,h,cN(f,b)]}}}throw[0,l,afc]};if(typeof
B===g)var
W=0;else
switch(B[0]){case
1:var
ai=cm(B[1],0),W=1;break;case
3:var
d7=B[2],ai=cm(J(B[1]),d7),W=1;break;case
5:var
ai=[0,B,B],W=1;break;default:var
W=0}if(!W)var
ai=F(afd);var
a0=[0,cl,ai]}else
var
a0=H(t,[12,S]);var
cn=a0[2],a2=a0[1],d2=cn[2],d3=bc(a2,S,cn[1]),d4=bc(a2,S,d2),d5=as(d4,db(i,afe),c,dX),co=wy(a2,c,d5,as(d3,db(i,aff),c,dW)),cp=co[1],d6=co[2];if(dZ)vS(cp,d6);return cp[1];case
20:var
cq=e[2],d8=e[1],ct=as(ea(f,cq),i,c,d8),d9=ct[2];return[0,ea(ct[1],cq),d9];case
21:return n(f,cM(c2));case
22:var
a3=e[1],d_=e[2],a5=n9(a3);if(typeof
a5===g)var
bh=0;else
if(0===a5[0])var
ee=a5[2],cC=as(f,i,0,a3),al=[0,cC[1],cC[2],[0,ee]],bh=1;else
var
bh=0;if(!bh)var
cu=as(f,i,0,a3),al=[0,cu[1],cu[2],0];var
cv=al[3],a6=al[2],cw=as(al[1],i,0,d_),a7=cw[2],q=cw[1],d$=ag(q,a7),cx=jl(function(a){return wz(q,a)},d$);if(cx){var
cy=cx[1],cz=cy[2],T=cz[2],a8=cz[1],eb=cy[1];if(a9(q,T,e1)){if(cv){var
am=cv[1];if(!da(q,am))H(q,[22,am]);var
ed=ba(ec(eg(q,a6,am),f8));if(typeof
a8===g)var
bi=0;else
if(5===a8[0]){var
aj=a8[1];if(0!==hm(aj[4]))throw[0,l,afh];var
cA=[5,[0,aj[1],aj[2],aj[3],am]],bi=1}else
var
bi=0;if(!bi)var
cA=F(afg);return n(b0(ed,a7,[0,cA,eb]),e3)}return H(q,2)}if(!da(q,T))H(q,[22,T]);var
cB=ec(eg(q,a6,T),f8);return cB?n(cB[1],e3):H(q,[25,a6,T])}return H(q,[23,a7]);case
23:var
eh=e[2],cE=as(f,i,0,e[1]),a_=cE[2],an=cE[1],ei=ag(an,a_),ej=1;if(!aB(function(a){return a9(an,ej,a)},ei))H(an,[24,a_]);var
cF=as(an,i,0,eh),cG=cF[2],ap=cF[1],ek=ag(ap,cG),cH=ck(function(a){return wz(ap,a)},ek);return cH?n(bc(ap,a_,cH[1]),e3):H(ap,[23,cG]);case
24:var
el=e[1],cI=as(f,i,0,e[2]),cL=cI[2],aq=cI[1],em=ag(aq,cL),en=1;if(!aB(function(a){return a9(aq,en,a)},em))H(aq,[24,cL]);var
cO=as(aq,i,0,el),cP=cO[2],at=cO[1],eo=ag(at,cP);if(!aB(function(a){return da(at,a)},eo))H(at,[23,cP]);return n(at,cM(c3));default:var
y=e[2],c7=e[1];if(c)var
bp=c[1],c8=a9(f,y,bp)?y:H(f,[19,y,bp]),bq=c8;else
var
bq=y;var
br=as(f,i,[0,bq],c7),K=br[2],G=br[1],c0=[0,nW,[0,G,ag(G,K)]];A(s(aeM,aeL),C,[0,G,y],af,c0);var
ay=eg(G,K,y);if(0===ay[0])return[0,bc(ay[1][1],K,y),K];var
c1=ay[1];j(s(aeO,aeN),hu,G);return H(G,[3,y,K,c1])}}},ol=function(a,b,c){var
d=n_(a,b,c),e=d[3],f=d[1],l=e[5],m=e[2],i=bt(d[2]),n=i[1],j=p(m,i[2]),k=h(l,n),o=0===b?f:bf(function(a,b,c){var
d=n9(b);if(typeof
c!==g)if(3===c[0]){var
e=c[1];if(typeof
d!==g)switch(d[0]){case
7:case
8:return bc(a,e,oj(d))}}return H(a,0)},f,j,k);return[0,bf(function(a,b,c){if(typeof
b===g)var
d=0;else
if(3===b[0])var
e=[0,cJ(a,b[1])],d=1;else
var
d=0;if(!d)var
e=0;var
f=as(a,e,0,c);return ok(f[1],b,f[2])},o,k,j),e]},wA=function(a){return fz(a,afi)?rr(a,afj):fz(a,afk)?rr(a,afl):S(afm)},wB=function(e,b){return tg(e,function(a){var
d=[0,0,[4,[0,a,ae(hQ),0,0]]],f=[0,0,[3,[0,0,function(a){try{var
b=dT(d);if(hN<=b)if(hU<=b)if(e$<=b)var
c=0;else{var
f=dT(d),g=dT(d),h=dT(d),i=2!==f>>>6?1:0;if(i)var
j=i;else
var
o=2!==g>>>6?1:0,j=o||(2!==h>>>6?1:0);if(j)throw[0,bU];var
e=(b&7)<<18|(f&63)<<12|(g&63)<<6|h&63,c=1}else
if(gf<=b){var
k=dT(d),l=dT(d),p=2!==k>>>6?1:0,q=p||(2!==l>>>6?1:0);if(q)throw[0,bU];var
e=(b&15)<<12|(k&63)<<6|l&63,c=1}else{var
n=dT(d);if(2!==n>>>6)throw[0,bU];var
e=(b&31)<<6|n&63,c=1}else
if(dg<=b)var
c=0;else
var
e=b,c=1;if(!c)throw[0,bU];var
r=[0,e]}catch(f){f=m(f);if(f[1]===kX)return 0;throw f}return r}]]];function
g(a,b,c){try{B(a,b,dT(f));var
d=1}catch(f){f=m(f);if(f[1]===kX)return 0;throw f}return d}var
c=eI.slice();c[1]=g;c[2]=$(dK,0);var
i=rz(b);try{tT[1]=e;jp[1]=1;na[1]=0;var
r=h(i,function(a){return tZ(c)})}catch(f){f=m(f);if(f[1]===iO){var
k=iP(c);h(k5(afn),k);return dN(X)}if(f[1]===D$){var
l=f[2],n=iP(c);j(k5(afo),l,n);return dN(h8)}if(f[1]===jo){j(fH(afp),nb,c);var
o=g4(c);uj(o,g5(c));return dN(pu)}if(f[1]===tY){var
p=[0,c,f[2]];j(fH(afq),Tc,p);return dN(ya)}var
q=qt(f);h(h(bS(BQ),afr),q);return dN(pv)}return r})},wC=[ac,function(a){if(fL[1])return afs;var
b=ds(ds(t7,afu),aft);return[0,ds(t7,afv),b]}],om=[ac,function(a){var
g=10,d=tg(ds(cM(wC)[1],afw),th);function
c(a,b){try{var
d=gs(a,g),e=s4(a,d+1|0,a.getLen()),f=c(e,[0,s4(a,0,d),b])}catch(f){f=m(f);if(f[1]===o)return[0,a,b];throw f}return f}var
b=L(c(d,0));return h(aN(function(a){var
b=0<a.getLen()?1:0,c=b?35!==a.safeGet(0)?1:0:b;return c}),b)}],wD=function(a){var
g=cM(wC),n=g[2],o=g[1],b=gD(a),i=iI(a),r=tk(o,i),f=r||tk(n,i);h(s(0,afz),f);var
j=wA(b);if(fz(b,afA))if(f)var
m=0;else
var
t=cM(om),m=aB(function(a){return av(j,a)},t)?(H(dB,[0,j]),1):0;else
var
m=0;if(f){var
d=0,c=cM(om);for(;;){if(c){var
e=c[1],q=c[2];if(!W(u(e,afx),b))if(!W(u(e,afy),b)){var
d=[0,e,d],c=q;continue}var
k=L(d)}else
var
k=L(d);var
l=k;break}}else
var
l=cM(om);return p(function(a){return[3,h(cD,a)]},l)},wE=function(a){var
b=wB(a,SS);return D(wD(a),b)},wF=function(a){var
b=wB(a,SR);return D(wD(a),b)},on=[0,0],oo=function(a){on[1]=[0,a,on[1]];return 0},op=function(a){return h(cD,wA(gD(a)))},wG=function(b){var
c=[0,afB];try{var
a=on[1];M(function(a){var
e=rp(a)?u(eG,u(rq,a)):a,d=ds(e,b);if(hI(d))throw[0,c,d];return 0},a);var
d=h(F(afC),b)}catch(f){f=m(f);if(f[1]===c)return f[2];throw f}return d},wH=h(cD,afD),j3=function(a){function
b(a){return wF(wG(u(h(bY,a),afE)))}var
c=h(tp,b);return j(d6,a,wH)?b(a):h(c,a)},oq=function(a){function
b(a){return wE(wG(u(h(bY,a),afF)))}var
c=h(tp,b);return j(d6,a,wH)?b(a):h(c,a)},wI=function(a,b){return w(function(a,d){var
y=j3(d);j(s(0,ac6),dz,d);var
r=nD(a,d),m=eW(r);uL(m,y);j(s(ac5,ac4),ur,m);var
e=r,b=og(m,y);for(;;){if(b){var
n=b[1];switch(n[0]){case
1:throw[0,l,ac7];case
2:var
u=n[1],g=u[1],D=b[2],E=u[2],v=e4(e,[0,[0,[0,d,g],0,aa(e)],0]),x=v[2],q=x[6],F=x[4],G=v[1];if(q)if(!q[2]){var
i=q[1],H=bc(jD(G,function(g,i){return function(a,b){var
c=uE(a,d,g,0,i);return j(b,c,function(a){return a})}}(g,i)),i,E),e=H,b=h(F,D);continue}throw[0,l,ac8];default:var
t=n[1],f=v6(e,t,b[2]),o=f[4],c=f[3],B=f[2],C=f[1],z=t[2],k=p(function(a){return[0,a[1],a[6]]},z),e=jD(C,function(k,o,c){return function(a,b){var
e=bf(function(a,b,c){return uE(a,d,b[1],b[2],c)},a,k,c),f=w(function(a,b){var
c=a[5],e=a[4],f=A(eV[5],d,b[2],[0,[1,b[1]],b[3]],a[3]);return[0,a[1],a[2],f,e,c]},e,o);return j(b,f,function(a){return a})}}(k,o,c)),b=B;continue}}return e}},a,b)},wJ=function(a,b){var
d=a[2],g=a[1];try{var
f=h(b,0)}catch(f){f=m(f);if(f[1]===vT){var
c=f[2];if(g){var
e=c[1];nf(0);vR([0,j(eN($k),n4,c)],0,e)}else
j(fH(af0),n4,c);if(d)throw f;return dN(pv)}if(f[1]===ut){var
i=f[2];j(fH(af1),i,0);if(d)throw f;return dN(bO)}throw f}return f};iK.mezzo={};var
f_=iK.mezzo,wK=function(a){return{}},wL=kP(af5),wM=function(a){var
b=new
bq(new
Ds().toLocaleTimeString());return h(fG(af7,wL,af6),b)},af8=function(a,b,c,d,e){try{var
r=b|0,n=c|0,z=new
bq(a),B=new
bq(e);wM(0);if(hI(bn))oD(bn);q(bn,z);f_[f("returnCode")]=0;var
E=w4(0);vU(U6);vU(B);if(!(0<=d))throw[0,l,Nx];m2[1]=d;if(r)wJ(wN,function(a){if(!hI(bn))h(F(afZ),bn);if(fz(bn,afV)){var
O=wE(bn),m=op(bn),V=u(bn,afW),W=hI(V)?[0,wF(V)]:0;A(s(afH,afG),d5,aC,dz,m);var
ap=oh(m,function(a){return j(d6,m,a)?O:j3(a)});A(s(afJ,afI),d5,aC,dz,m);var
r=nD(wI(dB,ap),m);uK(eW(r),O);var
T=eW(r);j(s(ac3,ac2),ur,T);var
_=og(T,O);a1(s(afS,afR),d5,aC,dz,m,hu,r);var
e=r,n=_;for(;;){if(n){var
K=n[1];switch(K[0]){case
0:var
L=K[1],aq=n[2];A(s(afL,afK),d5,aC,adl,[0,e,L]);var
t=v6(e,L,aq),N=t[4],c=t[3],ar=t[2],as=t[1],Z=L[2],x=p(function(a){return[0,a[1],a[6]]},Z),e=jD(as,function(x,N,c){return function(a,b){var
d=bf(function(a,b,c){return jx(a,[0,b[1],b[2],c])},a,x,c),e=w(function(a,b){return uD(a,b[2],[0,[1,b[1]],b[3]])},d,N);return j(b,e,function(a){return a})}}(x,N,c)),n=ar;continue;case
1:var
v=K[1],au=n[2];A(s(afN,afM),d5,aC,aat,[0,e,v]);var
ak=v[3],al=v[2],S=ol(ea(e,v[1]),al,ak),I=S[2],am=I[4],an=S[1],J=dP(I[7],I[6]),ao=h(am,au),e=jD(an,function(J){return function(a,b){var
c=w(function(a,b){return jx(a,[0,b[1],0,b[2]])},a,J);return j(b,c,function(a){return a})}}(J)),n=ao;continue;default:var
i=F(afO)}}else{A(s(afQ,afP),d5,aC,af,[0,adm,e]);var
i=e}A(s(afU,afT),d5,aC,dz,m);if(W){var
U=W[1];uL(eW(i),U);var
y=eW(i),d=i,f=eW(nD(i,bZ(i))),b=U;for(;;){if(b){var
o=b[1];switch(o[0]){case
1:throw[0,l,add];case
2:var
q=o[1][1],ae=b[2],ag=o[2];j(s(adf,ade),bX,q);var
B=dd(f,ag);if(!cr(d,B))H(d,[29,q]);var
E=nw(y,q),G=eg(d,E,B);if(0===G[0]){var
Q=G[1],ah=Q[2],ai=Q[1];A(s(adh,adg),bX,q,f4,ah);var
R=ai}else
var
R=H(d,[27,E,B,G[1]]);var
d=R,f=jx(f,[0,q,0,E]),b=ae;continue;case
3:var
aj=b[2],f=nt(f,o[1]),b=aj;continue;default:var
$=b[2],aa=o[1],z=function(a,b){var
c=b[1],d=b[2];return jx(a,[0,c,d,nw(y,c)])},P=of(function(z){return function(a,b){return w(z,a,b)}}(z),f,aa),ab=P[2],ac=P[1];id(cx);id(ev);var
ad=ab[2];M(function(d){return function(a){var
f=a[3],h=a[1],i=a[6],j=a[5],l=a[4],e=nw(y,h);function
c(a){return H(d,[28,h,a])}if(gb(i,at(d,e)))c(ac9);var
m=eb(d,e),b=ba(bE(d,e));if(!ih(vW,jG(d,e),l))c(adc);if(typeof
f===g)return k(tE,function(a,b){if(b){if(a){var
c=b[1],d=hj(a[1]),e=hj(c);return k(bD[9],jn,e,d)}return 0}return 1},m,j)?0:c(ac_);else
if(0===f[0]){if(typeof
b!==g)if(0===b[0]){var
n=b[1],o=f[1];return ig(function(a,b){var
f=eX(a,function(a){return v3(e,a)});return a9(d,f,b)?0:c(A(eN(ada),C,[0,d,f],C,[0,d,b]))},o,n)}}else
if(typeof
b!==g)if(1===b[0])return a9(d,f[1],b[1])?0:c(adb);return c(ac$)}}(d),ad);var
f=ac,b=$;continue}}var
X=d;break}}else
var
X=i;return X}}if(fz(bn,afX)){var
Y=op(bn);return wI(dB,D(oh(Y,j3),[0,Y,0]))}return F(afY)});if(n)wJ(wN,function(a){if(!hI(bn))h(F(af4),bn);if(!fz(bn,af2))F(af3);var
b=op(bn),c=oh(b,oq),d=w(function(a,c){var
m=oq(c),n=j3(c),g=h(bY,c);h(s(0,UI),g);var
i=uh(a,m),b=w(function(a,b){switch(b[0]){case
1:throw[0,l,UH];case
2:var
e=a[2];return[0,k(eS[7],c,b[1][1],a[1]),e];case
3:return a;default:var
d=b[1][3];return w(function(a,b){var
d=b[2];if(0===d[0]){var
e=d[2];return w(function(a,b){var
d=g0(g1(b[2])[1]),e=k(d9[7],c,d,a[2]);return[0,a[1],e]},a,e)}return a},a,d)}},i,n),d=j(d9[8],c,b[2]),e=j(eS[8],c,b[1]),f=h(d9[10],d);return[0,h(eS[10],e),f]},t_,c),e=oq(b);s(0,UJ);uh(d,e);return 0});var
G=w4(0)-E,I=0===r?0===n?aga:agd:0===n?age:agf,J=0===f_.returnCode?j(jc(agb),I,G):fH(agc)}catch(f){f=m(f);if(f[1]===lS){var
i=f[2],o=i.stack,t=o===Dq?af9:new
bq(o),v=new
bq(i.message),x=new
bq(i.name);return k(jc(af_),x,v,t)}var
y=qt(f);return h(fH(af$),y)}return J};f_.beforeInit=kb(function(a){ui[1]=function(a,b){var
c=[0,a[2]-1|0,a[4]-a[3]|0,b[2]-1|0,b[4]-b[3]|0];return w5(mz_highlight_range,dO(function(a){return a},c))};oo(agg);oo(agh);oo(agi);fL[1]=1;var
c=w6(dO(function(b){var
a=wK(0),c=w1(b),d=dO(function(a){var
c=wK(0),d=aht(u(b,u(agj,a)).toString());c.name=a.toString();c.content=d.toString();return c},c);a.name=b.toString();a.files=w6(d);return a},[0,agm,agl,agk]));function
b(a,b){var
c=[0,b,a];return w5(mz_log,dO(function(a){return a.toString()},c))}lT(cx,function(a){return b(agn,a)});lT(ev,function(a){return b(ago,a)});lT(wL,function(a){return b(agp,a)});f_.files=c;return wM(0)});f_.afterInit=kb(function(a){return jc(agq)});f_.process=kb(af8);kS(0);return}throw[0,l,agw]}throw[0,l,agx]}}}}}}(this));
